// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gameround_folks.proto

package msg

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// (龙虎/红黑/百家乐/骰宝)用户日志
type FolksUserLog struct {
	// 关联的游戏日志ID
	Log int64 `protobuf:"varint,1,opt,name=log,proto3" json:"l" bson:"l" msg:"l"`
	// 桌子ID
	Tab int32 `protobuf:"varint,2,opt,name=tab,proto3" json:"t" bson:"t" msg:"t"`
	// 投注总金额
	Bet int64 `protobuf:"varint,3,opt,name=bet,proto3" json:"b" bson:"b" msg:"b"`
	// 开牌情况
	Poker []byte `protobuf:"bytes,4,opt,name=poker,proto3" json:"p" bson:"p" msg:"p"`
	// 玩家投注分组(0:龙赢,1:虎赢,2:和)
	Group []int64 `protobuf:"varint,5,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
}

func (m *FolksUserLog) Reset()         { *m = FolksUserLog{} }
func (m *FolksUserLog) String() string { return proto.CompactTextString(m) }
func (*FolksUserLog) ProtoMessage()    {}
func (*FolksUserLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{0}
}
func (m *FolksUserLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FolksUserLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FolksUserLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FolksUserLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolksUserLog.Merge(m, src)
}
func (m *FolksUserLog) XXX_Size() int {
	return m.Size()
}
func (m *FolksUserLog) XXX_DiscardUnknown() {
	xxx_messageInfo_FolksUserLog.DiscardUnknown(m)
}

var xxx_messageInfo_FolksUserLog proto.InternalMessageInfo

func (m *FolksUserLog) GetLog() int64 {
	if m != nil {
		return m.Log
	}
	return 0
}

func (m *FolksUserLog) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *FolksUserLog) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *FolksUserLog) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *FolksUserLog) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

// 用户日志(龙虎/红黑/百家乐/骰宝)
type GameBill struct {
	// 玩家ID
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
	// 开始游戏时带的钱
	Coin int64 `protobuf:"varint,2,opt,name=coin,proto3" json:"c" bson:"c" msg:"c"`
	// 投注总额
	Bet int64 `protobuf:"varint,3,opt,name=bet,proto3" json:"b" bson:"b" msg:"b"`
	// 玩家投注分组(0:龙赢,1:虎赢,2:和)
	Group []int64 `protobuf:"varint,4,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 输赢情况
	Win int64 `protobuf:"zigzag64,5,opt,name=win,proto3" json:"w,omitempty" bson:"w,omitempty" msg:"w,omitempty"`
	// 税收
	Tax int64 `protobuf:"varint,6,opt,name=tax,proto3" json:"t,omitempty" bson:"t,omitempty" msg:"t,omitempty"`
	// 玩家类型
	Job int32 `protobuf:"varint,7,opt,name=job,proto3" json:"j,omitempty" bson:"j,omitempty" msg:"j,omitempty"`
}

func (m *GameBill) Reset()         { *m = GameBill{} }
func (m *GameBill) String() string { return proto.CompactTextString(m) }
func (*GameBill) ProtoMessage()    {}
func (*GameBill) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{1}
}
func (m *GameBill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBill.Merge(m, src)
}
func (m *GameBill) XXX_Size() int {
	return m.Size()
}
func (m *GameBill) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBill.DiscardUnknown(m)
}

var xxx_messageInfo_GameBill proto.InternalMessageInfo

func (m *GameBill) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GameBill) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *GameBill) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *GameBill) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GameBill) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameBill) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameBill) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

// 百人游戏日志(龙虎/红黑/百家乐/骰宝)
type FolksGameRound struct {
	// 游戏ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"_id" bson:"_id" msg:"_id"`
	// 游戏开始时间
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"s" bson:"s" msg:"s"`
	// 游戏结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"e" bson:"e" msg:"e"`
	// 房间ID
	Room int32 `protobuf:"varint,4,opt,name=room,proto3" json:"r" bson:"r" msg:"r"`
	// 桌子ID
	Tab int32 `protobuf:"varint,5,opt,name=tab,proto3" json:"t,omitempty" bson:"t,omitempty" msg:"t,omitempty"`
	// 所有玩家下注汇总
	Bill []*GameBill `protobuf:"bytes,6,rep,name=bill,proto3" json:"b" bson:"b" msg:"b"`
	// 下注情况(msg.Bet三个字段顺序压入)
	Flow []int32 `protobuf:"varint,7,rep,packed,name=flow,proto3" json:"f" bson:"f" msg:"f"`
	// 玩家投注分组
	Group []int64 `protobuf:"varint,8,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 发牌情况
	Poker []byte `protobuf:"bytes,9,opt,name=poker,proto3" json:"p" bson:"p" msg:"p"`
	// 赔付情况
	Odds []int32 `protobuf:"zigzag32,10,rep,packed,name=odds,proto3" json:"o" bson:"o" msg:"o"`
	// 系统税收
	Tax int64 `protobuf:"varint,11,opt,name=tax,proto3" json:"x" bson:"x" msg:"x"`
	// 系统输赢
	Win int64 `protobuf:"zigzag64,12,opt,name=win,proto3" json:"w" bson:"w" msg:"w"`
	// 备注
	Note string `protobuf:"bytes,13,opt,name=note,proto3" json:"n,omitempty" bson:"n,omitempty" msg:"n,omitempty"`
	// 富豪(第1个位置为赌神后面5个为富豪ID)
	Rich []int32 `protobuf:"varint,14,rep,packed,name=rich,proto3" json:"h,omitempty" bson:"h,omitempty" msg:"h,omitempty"`
	// 真实玩家下注分组
	BetGroup []int64 `protobuf:"varint,15,rep,packed,name=betGroup,proto3" json:"u,omitempty" bson:"u,omitempty" msg:"u,omitempty"`
}

func (m *FolksGameRound) Reset()         { *m = FolksGameRound{} }
func (m *FolksGameRound) String() string { return proto.CompactTextString(m) }
func (*FolksGameRound) ProtoMessage()    {}
func (*FolksGameRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{2}
}
func (m *FolksGameRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FolksGameRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FolksGameRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FolksGameRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolksGameRound.Merge(m, src)
}
func (m *FolksGameRound) XXX_Size() int {
	return m.Size()
}
func (m *FolksGameRound) XXX_DiscardUnknown() {
	xxx_messageInfo_FolksGameRound.DiscardUnknown(m)
}

var xxx_messageInfo_FolksGameRound proto.InternalMessageInfo

func (m *FolksGameRound) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FolksGameRound) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *FolksGameRound) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *FolksGameRound) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *FolksGameRound) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *FolksGameRound) GetBill() []*GameBill {
	if m != nil {
		return m.Bill
	}
	return nil
}

func (m *FolksGameRound) GetFlow() []int32 {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *FolksGameRound) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *FolksGameRound) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *FolksGameRound) GetOdds() []int32 {
	if m != nil {
		return m.Odds
	}
	return nil
}

func (m *FolksGameRound) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *FolksGameRound) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *FolksGameRound) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *FolksGameRound) GetRich() []int32 {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *FolksGameRound) GetBetGroup() []int64 {
	if m != nil {
		return m.BetGroup
	}
	return nil
}

type FolksGameInitAck struct {
	// 当前游戏ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 当前游戏状态
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state" bson:"state" msg:"state"`
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	Rich []*User `protobuf:"bytes,3,rep,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
	// 各个区域的投注情况
	Sum []int64 `protobuf:"varint,4,rep,packed,name=sum,proto3" json:"sum" bson:"sum" msg:"sum"`
	// 我的投注情况
	Bet []int64 `protobuf:"varint,5,rep,packed,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 最近的发牌的日志
	Log []byte `protobuf:"bytes,6,opt,name=log,proto3" json:"log" bson:"log" msg:"log"`
}

func (m *FolksGameInitAck) Reset()         { *m = FolksGameInitAck{} }
func (m *FolksGameInitAck) String() string { return proto.CompactTextString(m) }
func (*FolksGameInitAck) ProtoMessage()    {}
func (*FolksGameInitAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{3}
}
func (m *FolksGameInitAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FolksGameInitAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FolksGameInitAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FolksGameInitAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolksGameInitAck.Merge(m, src)
}
func (m *FolksGameInitAck) XXX_Size() int {
	return m.Size()
}
func (m *FolksGameInitAck) XXX_DiscardUnknown() {
	xxx_messageInfo_FolksGameInitAck.DiscardUnknown(m)
}

var xxx_messageInfo_FolksGameInitAck proto.InternalMessageInfo

func (m *FolksGameInitAck) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FolksGameInitAck) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *FolksGameInitAck) GetRich() []*User {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *FolksGameInitAck) GetSum() []int64 {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *FolksGameInitAck) GetBet() []int64 {
	if m != nil {
		return m.Bet
	}
	return nil
}

func (m *FolksGameInitAck) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

// 请求下注(红黑/龙虎/百家乐/色宝)
type BetReq struct {
	// 序列号
	Sn int32 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn" bson:"sn" msg:"sn"`
	// 投注项,根据游戏定义
	Item int32 `protobuf:"varint,2,opt,name=item,proto3" json:"i" bson:"i" msg:"i"`
	// 投注金币
	Bet int32 `protobuf:"varint,3,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
}

func (m *BetReq) Reset()         { *m = BetReq{} }
func (m *BetReq) String() string { return proto.CompactTextString(m) }
func (*BetReq) ProtoMessage()    {}
func (*BetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{4}
}
func (m *BetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetReq.Merge(m, src)
}
func (m *BetReq) XXX_Size() int {
	return m.Size()
}
func (m *BetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BetReq.DiscardUnknown(m)
}

var xxx_messageInfo_BetReq proto.InternalMessageInfo

func (m *BetReq) GetSn() int32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *BetReq) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *BetReq) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

// 下注返回(红黑/龙虎/百家乐/色宝)
type BetAck struct {
	// 序列号
	Sn int32 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn" bson:"sn" msg:"sn"`
	// 投注项,根据游戏定义
	Item int32 `protobuf:"varint,2,opt,name=item,proto3" json:"i" bson:"i" msg:"i"`
	// 投注金币
	Bet int32 `protobuf:"varint,3,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 剩余金币
	Coin int64 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
}

func (m *BetAck) Reset()         { *m = BetAck{} }
func (m *BetAck) String() string { return proto.CompactTextString(m) }
func (*BetAck) ProtoMessage()    {}
func (*BetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{5}
}
func (m *BetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetAck.Merge(m, src)
}
func (m *BetAck) XXX_Size() int {
	return m.Size()
}
func (m *BetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BetAck.DiscardUnknown(m)
}

var xxx_messageInfo_BetAck proto.InternalMessageInfo

func (m *BetAck) GetSn() int32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *BetAck) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *BetAck) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *BetAck) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 玩家下注信息
type UserBetAck struct {
	// 每三个项表示一条记录Bet(依次为玩家ID，投注项，投注金额）
	Bet []int32 `protobuf:"varint,1,rep,packed,name=bet,proto3" json:"bet" bson:"item" msg:"item"`
}

func (m *UserBetAck) Reset()         { *m = UserBetAck{} }
func (m *UserBetAck) String() string { return proto.CompactTextString(m) }
func (*UserBetAck) ProtoMessage()    {}
func (*UserBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{6}
}
func (m *UserBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBetAck.Merge(m, src)
}
func (m *UserBetAck) XXX_Size() int {
	return m.Size()
}
func (m *UserBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_UserBetAck proto.InternalMessageInfo

func (m *UserBetAck) GetBet() []int32 {
	if m != nil {
		return m.Bet
	}
	return nil
}

// 开放下注
type OpenBetAck struct {
	// 当前游戏ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 当前游戏状态
	State int32 `protobuf:"varint,2,opt,name=state,proto3" json:"state" bson:"state" msg:"state"`
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	Rich []*User `protobuf:"bytes,3,rep,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
}

func (m *OpenBetAck) Reset()         { *m = OpenBetAck{} }
func (m *OpenBetAck) String() string { return proto.CompactTextString(m) }
func (*OpenBetAck) ProtoMessage()    {}
func (*OpenBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{7}
}
func (m *OpenBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenBetAck.Merge(m, src)
}
func (m *OpenBetAck) XXX_Size() int {
	return m.Size()
}
func (m *OpenBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_OpenBetAck proto.InternalMessageInfo

func (m *OpenBetAck) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OpenBetAck) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OpenBetAck) GetRich() []*User {
	if m != nil {
		return m.Rich
	}
	return nil
}

// 开奖结果(红黑/龙虎/百家乐/色宝)
type FolksGameResult struct {
	// 当前游戏ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// A的牌
	A []byte `protobuf:"bytes,2,opt,name=a,proto3" json:"a" bson:"a" msg:"a"`
	// B的牌
	B []byte `protobuf:"bytes,3,opt,name=b,proto3" json:"b" bson:"b" msg:"b"`
	// 各个区域的赔付情况
	Odd []int32 `protobuf:"varint,4,rep,packed,name=odd,proto3" json:"odd" bson:"odd" msg:"odd"`
	// 各个区域的投注情况
	Bet []int64 `protobuf:"varint,5,rep,packed,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 富豪玩家的输赢
	Rich []int64 `protobuf:"varint,6,rep,packed,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
}

func (m *FolksGameResult) Reset()         { *m = FolksGameResult{} }
func (m *FolksGameResult) String() string { return proto.CompactTextString(m) }
func (*FolksGameResult) ProtoMessage()    {}
func (*FolksGameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{8}
}
func (m *FolksGameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FolksGameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FolksGameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FolksGameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FolksGameResult.Merge(m, src)
}
func (m *FolksGameResult) XXX_Size() int {
	return m.Size()
}
func (m *FolksGameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_FolksGameResult.DiscardUnknown(m)
}

var xxx_messageInfo_FolksGameResult proto.InternalMessageInfo

func (m *FolksGameResult) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FolksGameResult) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *FolksGameResult) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *FolksGameResult) GetOdd() []int32 {
	if m != nil {
		return m.Odd
	}
	return nil
}

func (m *FolksGameResult) GetBet() []int64 {
	if m != nil {
		return m.Bet
	}
	return nil
}

func (m *FolksGameResult) GetRich() []int64 {
	if m != nil {
		return m.Rich
	}
	return nil
}

// 关闭下注
type CloseBetAck struct {
	// 多人游戏开奖结果
	R *FolksGameResult `protobuf:"bytes,1,opt,name=r,proto3" json:"r" bson:"r" msg:"r"`
	// 我的输赢情况
	Win int64 `protobuf:"varint,2,opt,name=win,proto3" json:"win" bson:"win" msg:"win"`
	// 我的金币数
	Coin int64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
}

func (m *CloseBetAck) Reset()         { *m = CloseBetAck{} }
func (m *CloseBetAck) String() string { return proto.CompactTextString(m) }
func (*CloseBetAck) ProtoMessage()    {}
func (*CloseBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_eab1e8fd8f2d43bd, []int{9}
}
func (m *CloseBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CloseBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CloseBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CloseBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CloseBetAck.Merge(m, src)
}
func (m *CloseBetAck) XXX_Size() int {
	return m.Size()
}
func (m *CloseBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CloseBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_CloseBetAck proto.InternalMessageInfo

func (m *CloseBetAck) GetR() *FolksGameResult {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *CloseBetAck) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *CloseBetAck) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func init() {
	proto.RegisterType((*FolksUserLog)(nil), "msg.FolksUserLog")
	proto.RegisterType((*GameBill)(nil), "msg.GameBill")
	proto.RegisterType((*FolksGameRound)(nil), "msg.FolksGameRound")
	proto.RegisterType((*FolksGameInitAck)(nil), "msg.FolksGameInitAck")
	proto.RegisterType((*BetReq)(nil), "msg.BetReq")
	proto.RegisterType((*BetAck)(nil), "msg.BetAck")
	proto.RegisterType((*UserBetAck)(nil), "msg.UserBetAck")
	proto.RegisterType((*OpenBetAck)(nil), "msg.OpenBetAck")
	proto.RegisterType((*FolksGameResult)(nil), "msg.FolksGameResult")
	proto.RegisterType((*CloseBetAck)(nil), "msg.CloseBetAck")
}

func init() { proto.RegisterFile("gameround_folks.proto", fileDescriptor_eab1e8fd8f2d43bd) }

var fileDescriptor_eab1e8fd8f2d43bd = []byte{
	// 1064 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xbf, 0x6f, 0xdb, 0x46,
	0x14, 0xc7, 0x7d, 0xa2, 0xa4, 0xd8, 0x67, 0xe7, 0x47, 0x09, 0x37, 0x60, 0x8d, 0x40, 0x14, 0x0e,
	0x45, 0x21, 0x24, 0xb1, 0x8c, 0xba, 0x40, 0x7f, 0x04, 0x5d, 0xaa, 0x02, 0x0d, 0x82, 0x16, 0x28,
	0x70, 0x45, 0x67, 0x43, 0x14, 0x4f, 0x14, 0x6d, 0x92, 0xa7, 0x92, 0x47, 0x48, 0xfd, 0x13, 0xba,
	0x75, 0xec, 0x1e, 0x74, 0xec, 0xff, 0xd1, 0xd1, 0x63, 0x27, 0x22, 0xb0, 0x37, 0x8f, 0x5a, 0xba,
	0x16, 0xef, 0xdd, 0x51, 0x47, 0xc7, 0x42, 0xe2, 0xa0, 0x4b, 0x26, 0x1f, 0xe9, 0xcf, 0x7d, 0xf9,
	0xee, 0xbd, 0xef, 0xbb, 0x27, 0xfa, 0x61, 0x34, 0x4e, 0x45, 0x2e, 0xcb, 0x2c, 0x3c, 0x99, 0xca,
	0xe4, 0xac, 0x18, 0xce, 0x73, 0xa9, 0xa4, 0xeb, 0xa4, 0x45, 0x74, 0x70, 0x18, 0xc5, 0x6a, 0x56,
	0x06, 0xc3, 0x89, 0x4c, 0x8f, 0x22, 0x19, 0xc9, 0x23, 0xfc, 0x5f, 0x50, 0x4e, 0xf1, 0x09, 0x1f,
	0x70, 0xa5, 0xf7, 0x1c, 0x50, 0x90, 0xd2, 0x6b, 0xf6, 0x2f, 0xa1, 0x7b, 0xdf, 0x81, 0xde, 0xcf,
	0x85, 0xc8, 0x7f, 0x90, 0x91, 0xfb, 0x84, 0x3a, 0x89, 0x8c, 0x3c, 0xd2, 0x27, 0x03, 0x67, 0xf4,
	0xd1, 0x55, 0xe5, 0x93, 0x64, 0x55, 0xf9, 0x0f, 0x82, 0x42, 0x66, 0xcf, 0x58, 0xc2, 0xfa, 0x69,
	0x11, 0xc1, 0x5f, 0x0e, 0x14, 0xc0, 0x6a, 0x1c, 0x78, 0xad, 0x3e, 0x19, 0x74, 0x34, 0xac, 0x2c,
	0xac, 0x0c, 0xac, 0x18, 0x07, 0x0a, 0xe0, 0x40, 0x28, 0xcf, 0xb1, 0xca, 0x81, 0x85, 0x03, 0x03,
	0x07, 0x8c, 0x03, 0xe5, 0x1e, 0xd1, 0xce, 0x5c, 0x9e, 0x89, 0xdc, 0x6b, 0xf7, 0xc9, 0x60, 0x4f,
	0xe3, 0x73, 0x8b, 0xcf, 0x0d, 0x3e, 0x67, 0x5c, 0x73, 0xb0, 0x21, 0xca, 0x65, 0x39, 0xf7, 0x3a,
	0x7d, 0xa7, 0xd6, 0x8f, 0xec, 0x86, 0xc8, 0x6c, 0x88, 0x18, 0xd7, 0x1c, 0xfb, 0xd3, 0xa1, 0xdb,
	0xcf, 0xc7, 0xa9, 0x18, 0xc5, 0x49, 0x02, 0xb1, 0x95, 0x71, 0x88, 0xa7, 0x36, 0x07, 0x29, 0xed,
	0xde, 0xd2, 0xec, 0x2d, 0x19, 0x07, 0xca, 0x3d, 0xa4, 0xed, 0x89, 0x8c, 0x33, 0x3c, 0xb6, 0xf9,
	0xd2, 0xc4, 0xd2, 0x13, 0x43, 0x4f, 0x18, 0x47, 0xec, 0x9d, 0xcf, 0xad, 0x8f, 0xd1, 0xbe, 0xdd,
	0x31, 0xdc, 0x17, 0xd4, 0x59, 0xc4, 0x99, 0xd7, 0xe9, 0x93, 0x81, 0x3b, 0xfa, 0xe2, 0xaa, 0xf2,
	0x77, 0x17, 0x4f, 0x65, 0x1a, 0x2b, 0x91, 0xce, 0xd5, 0xaf, 0xab, 0xca, 0xff, 0x58, 0x6f, 0x6c,
	0xbc, 0x34, 0x12, 0xcd, 0x37, 0x1c, 0x34, 0x40, 0x4a, 0x8d, 0x97, 0x5e, 0x17, 0x03, 0x45, 0x29,
	0xb5, 0x49, 0x4a, 0xdd, 0x90, 0x52, 0xd7, 0xa4, 0xd4, 0x78, 0x09, 0x52, 0xa7, 0x32, 0xf0, 0xee,
	0x60, 0x3e, 0x51, 0xea, 0x74, 0x93, 0xd4, 0xe9, 0x0d, 0xa9, 0xd3, 0x6b, 0x52, 0xa7, 0x32, 0x60,
	0xaf, 0xba, 0xf4, 0x1e, 0x3a, 0x14, 0x8a, 0xc5, 0xa1, 0x01, 0xdc, 0x23, 0xda, 0x32, 0xc5, 0x72,
	0x46, 0xfe, 0x55, 0xe5, 0x3b, 0x27, 0x71, 0xb8, 0xaa, 0xfc, 0x7d, 0x2d, 0x7a, 0x12, 0x87, 0x46,
	0x0c, 0x56, 0xbc, 0x15, 0xc3, 0x86, 0x4e, 0xa1, 0xc6, 0xb9, 0x6a, 0x96, 0xac, 0xb0, 0x59, 0x2d,
	0x0c, 0x5f, 0x30, 0xae, 0x39, 0xa8, 0x99, 0xc8, 0xc2, 0x66, 0xcd, 0x84, 0xc5, 0x85, 0xc1, 0x05,
	0xe3, 0x40, 0x81, 0x1f, 0x72, 0x29, 0x53, 0xb4, 0xaa, 0x71, 0x4f, 0x6e, 0xe9, 0xdc, 0xd0, 0x39,
	0xe3, 0x88, 0xe9, 0x34, 0x07, 0x58, 0xb1, 0xce, 0xff, 0x4a, 0x73, 0xe0, 0x7e, 0x4d, 0xdb, 0x41,
	0x9c, 0x24, 0x5e, 0xb7, 0xef, 0x0c, 0x76, 0x8f, 0xef, 0x0e, 0xd3, 0x22, 0x1a, 0xd6, 0x9e, 0x7e,
	0x93, 0xd5, 0x70, 0x17, 0xc4, 0x3d, 0x4d, 0xe4, 0xc2, 0xbb, 0xd3, 0x77, 0xea, 0xb8, 0xa7, 0x16,
	0x9f, 0x1a, 0x7c, 0xca, 0x38, 0x62, 0xd6, 0x9a, 0xdb, 0xb7, 0xb4, 0xe6, 0xba, 0x87, 0x77, 0x6e,
	0xd9, 0xc3, 0x87, 0xb4, 0x2d, 0xc3, 0xb0, 0xf0, 0x68, 0xdf, 0x19, 0x7c, 0xa0, 0x79, 0x69, 0x79,
	0x69, 0x78, 0xc9, 0x38, 0x62, 0xfa, 0xf6, 0x59, 0x7a, 0xbb, 0xb6, 0x48, 0x4b, 0x4b, 0x2f, 0x0d,
	0xbd, 0x34, 0x8e, 0x7c, 0xa2, 0xfb, 0x64, 0x0f, 0xfb, 0x04, 0xe1, 0x85, 0x85, 0x17, 0x75, 0x4f,
	0x98, 0x4e, 0xf8, 0x9e, 0xb6, 0x33, 0xa9, 0x84, 0x77, 0xb7, 0x4f, 0x06, 0x3b, 0xba, 0x46, 0xd9,
	0xa6, 0x1a, 0x65, 0x37, 0x6a, 0xd4, 0x7c, 0xc3, 0x51, 0x04, 0xc4, 0xf2, 0x78, 0x32, 0xf3, 0xee,
	0x61, 0x9a, 0x51, 0x6c, 0xb6, 0x49, 0x6c, 0x76, 0x43, 0x6c, 0x76, 0x4d, 0x0c, 0x44, 0xdc, 0x9f,
	0xe8, 0x76, 0x20, 0xd4, 0x73, 0xac, 0xc3, 0x7d, 0xac, 0x03, 0x0a, 0x96, 0x9b, 0x04, 0xcb, 0x1b,
	0x82, 0xcd, 0x37, 0x7c, 0x2d, 0xc4, 0xfe, 0x6a, 0xd1, 0x07, 0xeb, 0x16, 0x7b, 0x91, 0xc5, 0xea,
	0x9b, 0xc9, 0x99, 0xfb, 0x49, 0xa3, 0xc9, 0x1e, 0xae, 0x2a, 0xdf, 0xd5, 0xa2, 0xeb, 0xe6, 0xaa,
	0x7b, 0xeb, 0x18, 0x7b, 0x4b, 0x09, 0x33, 0x05, 0x1e, 0xad, 0x2a, 0xdf, 0x33, 0x6d, 0x05, 0xaf,
	0xeb, 0xd6, 0xc2, 0x35, 0xd7, 0xa8, 0xfb, 0x95, 0x49, 0x89, 0x83, 0xbe, 0xdd, 0x41, 0xdf, 0xc2,
	0x00, 0x1a, 0x1d, 0xac, 0x2a, 0xff, 0xa1, 0xe9, 0x9b, 0x78, 0x32, 0xab, 0x5b, 0x07, 0x96, 0x26,
	0x01, 0x8f, 0xa9, 0x53, 0x94, 0xa9, 0xb9, 0x1e, 0x3d, 0xdb, 0xf5, 0x45, 0x99, 0xd6, 0x9f, 0x2a,
	0x53, 0xc6, 0x01, 0x02, 0x16, 0x6e, 0xde, 0xce, 0xeb, 0x6c, 0x20, 0xea, 0xd9, 0x04, 0x2b, 0x7d,
	0xf1, 0x3e, 0xd6, 0x73, 0xaf, 0x8b, 0x56, 0x6d, 0xb0, 0x89, 0xac, 0x8d, 0x0d, 0x2b, 0x1c, 0x7b,
	0xec, 0x0f, 0x42, 0xbb, 0x23, 0xa1, 0xb8, 0xf8, 0xc5, 0x7d, 0x4a, 0x5b, 0x45, 0x66, 0xe6, 0xc6,
	0xa3, 0xab, 0xca, 0x6f, 0x15, 0x99, 0xcd, 0x55, 0x91, 0xd5, 0x21, 0x65, 0x8c, 0xb7, 0x8a, 0x0c,
	0x0c, 0x0e, 0xe9, 0x6f, 0x0e, 0xcc, 0xd8, 0xba, 0x30, 0xae, 0x33, 0xcb, 0x38, 0x62, 0xee, 0xa7,
	0x76, 0x72, 0x74, 0xf4, 0x45, 0x17, 0x08, 0xf5, 0xc6, 0x63, 0xb0, 0x73, 0x1d, 0x1a, 0x14, 0xf0,
	0x3d, 0x0b, 0xcd, 0xfd, 0xdc, 0x8c, 0xcd, 0x36, 0x5a, 0x8a, 0x5d, 0x55, 0x3e, 0x3e, 0xdb, 0x8a,
	0xc3, 0x53, 0x3d, 0x3c, 0x61, 0xa9, 0xe7, 0x27, 0x7b, 0x46, 0x29, 0x7a, 0xa3, 0x3e, 0x15, 0x7e,
	0x98, 0x60, 0x33, 0x35, 0xec, 0x02, 0x51, 0xd5, 0x41, 0xc2, 0x52, 0xa7, 0xe3, 0x25, 0xa1, 0xf4,
	0xc7, 0xb9, 0xc8, 0xcc, 0xe6, 0xf7, 0xd3, 0xd3, 0xec, 0xb7, 0x16, 0xbd, 0x6f, 0x47, 0x9c, 0x28,
	0xca, 0x44, 0xdd, 0x3a, 0x54, 0x46, 0xc9, 0x18, 0xc3, 0xdc, 0x1b, 0xed, 0xdb, 0x7a, 0x8d, 0x0d,
	0x35, 0x66, 0x9c, 0x8c, 0x81, 0x09, 0xb0, 0x54, 0xd7, 0x98, 0xc6, 0x3c, 0x20, 0x01, 0xf8, 0x5f,
	0x86, 0x21, 0xf6, 0x55, 0xa7, 0xe9, 0x7f, 0x19, 0xd6, 0x5f, 0x84, 0x15, 0x07, 0xe8, 0x9d, 0xfa,
	0x6a, 0x68, 0xd2, 0xd2, 0x45, 0xf8, 0xed, 0xb9, 0x78, 0x49, 0xe8, 0xee, 0xb7, 0x89, 0x2c, 0x84,
	0x29, 0xd9, 0x97, 0x94, 0xe4, 0x98, 0x86, 0xdd, 0xe3, 0x7d, 0xcc, 0xe9, 0x6b, 0x89, 0x6a, 0x9e,
	0xa8, 0x31, 0x6a, 0x49, 0x0e, 0x51, 0x2e, 0xd6, 0xbf, 0xd2, 0x1a, 0x51, 0x2e, 0xd6, 0x2e, 0x83,
	0x95, 0xbe, 0xf0, 0x87, 0xc6, 0x9b, 0x7a, 0xe0, 0x1f, 0xbc, 0xcd, 0x93, 0x23, 0xef, 0xef, 0x8b,
	0x1e, 0x39, 0xbf, 0xe8, 0x91, 0x57, 0x17, 0x3d, 0xf2, 0xfb, 0x65, 0x6f, 0xeb, 0xfc, 0xb2, 0xb7,
	0xf5, 0xcf, 0x65, 0x6f, 0x2b, 0xe8, 0xe2, 0xef, 0xea, 0xcf, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0xc4, 0xac, 0xa9, 0x64, 0xb0, 0x0b, 0x00, 0x00,
}

func (m *FolksUserLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FolksUserLog) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Log != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Log))
	}
	if m.Tab != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Tab))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Bet))
	}
	if len(m.Poker) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.Poker)))
		i += copy(dAtA[i:], m.Poker)
	}
	if len(m.Group) > 0 {
		dAtA2 := make([]byte, len(m.Group)*10)
		var j1 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *GameBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Uid))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Coin))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Bet))
	}
	if len(m.Group) > 0 {
		dAtA4 := make([]byte, len(m.Group)*10)
		var j3 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if m.Win != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
	}
	if m.Tax != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Tax))
	}
	if m.Job != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *FolksGameRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FolksGameRound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Id))
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.End))
	}
	if m.Room != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Room))
	}
	if m.Tab != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, msg := range m.Bill {
			dAtA[i] = 0x32
			i++
			i = encodeVarintGameroundFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Flow) > 0 {
		dAtA6 := make([]byte, len(m.Flow)*10)
		var j5 int
		for _, num1 := range m.Flow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Group) > 0 {
		dAtA8 := make([]byte, len(m.Group)*10)
		var j7 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j7))
		i += copy(dAtA[i:], dAtA8[:j7])
	}
	if len(m.Poker) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.Poker)))
		i += copy(dAtA[i:], m.Poker)
	}
	if len(m.Odds) > 0 {
		dAtA9 := make([]byte, len(m.Odds)*5)
		var j10 int
		for _, num := range m.Odds {
			x11 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x11 >= 1<<7 {
				dAtA9[j10] = uint8(uint64(x11)&0x7f | 0x80)
				j10++
				x11 >>= 7
			}
			dAtA9[j10] = uint8(x11)
			j10++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA9[:j10])
	}
	if m.Tax != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Tax))
	}
	if m.Win != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if len(m.Rich) > 0 {
		dAtA13 := make([]byte, len(m.Rich)*10)
		var j12 int
		for _, num1 := range m.Rich {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if len(m.BetGroup) > 0 {
		dAtA15 := make([]byte, len(m.BetGroup)*10)
		var j14 int
		for _, num1 := range m.BetGroup {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	return i, nil
}

func (m *FolksGameInitAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FolksGameInitAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.State))
	}
	if len(m.Rich) > 0 {
		for _, msg := range m.Rich {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameroundFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sum) > 0 {
		dAtA17 := make([]byte, len(m.Sum)*10)
		var j16 int
		for _, num1 := range m.Sum {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if len(m.Bet) > 0 {
		dAtA19 := make([]byte, len(m.Bet)*10)
		var j18 int
		for _, num1 := range m.Bet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA19[j18] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j18++
			}
			dAtA19[j18] = uint8(num)
			j18++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j18))
		i += copy(dAtA[i:], dAtA19[:j18])
	}
	if len(m.Log) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.Log)))
		i += copy(dAtA[i:], m.Log)
	}
	return i, nil
}

func (m *BetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Sn))
	}
	if m.Item != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Item))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Bet))
	}
	return i, nil
}

func (m *BetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Sn))
	}
	if m.Item != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Item))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Bet))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *UserBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Bet) > 0 {
		dAtA21 := make([]byte, len(m.Bet)*10)
		var j20 int
		for _, num1 := range m.Bet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA21[j20] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j20++
			}
			dAtA21[j20] = uint8(num)
			j20++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j20))
		i += copy(dAtA[i:], dAtA21[:j20])
	}
	return i, nil
}

func (m *OpenBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.State))
	}
	if len(m.Rich) > 0 {
		for _, msg := range m.Rich {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintGameroundFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *FolksGameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FolksGameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Id))
	}
	if len(m.A) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.A)))
		i += copy(dAtA[i:], m.A)
	}
	if len(m.B) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(len(m.B)))
		i += copy(dAtA[i:], m.B)
	}
	if len(m.Odd) > 0 {
		dAtA23 := make([]byte, len(m.Odd)*10)
		var j22 int
		for _, num1 := range m.Odd {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if len(m.Bet) > 0 {
		dAtA25 := make([]byte, len(m.Bet)*10)
		var j24 int
		for _, num1 := range m.Bet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	if len(m.Rich) > 0 {
		dAtA27 := make([]byte, len(m.Rich)*10)
		var j26 int
		for _, num1 := range m.Rich {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA27[j26] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j26++
			}
			dAtA27[j26] = uint8(num)
			j26++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA27[:j26])
	}
	return i, nil
}

func (m *CloseBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CloseBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.R != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.R.Size()))
		n28, err := m.R.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	if m.Win != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Win))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGameroundFolks(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func encodeVarintGameroundFolks(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FolksUserLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Log != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Log))
	}
	if m.Tab != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Tab))
	}
	if m.Bet != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Bet))
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	return n
}

func (m *GameBill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Uid))
	}
	if m.Coin != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Coin))
	}
	if m.Bet != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Bet))
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if m.Win != 0 {
		n += 1 + sozGameroundFolks(uint64(m.Win))
	}
	if m.Tax != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Tax))
	}
	if m.Job != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Job))
	}
	return n
}

func (m *FolksGameRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Id))
	}
	if m.Start != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovGameroundFolks(uint64(m.End))
	}
	if m.Room != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Room))
	}
	if m.Tab != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, e := range m.Bill {
			l = e.Size()
			n += 1 + l + sovGameroundFolks(uint64(l))
		}
	}
	if len(m.Flow) > 0 {
		l = 0
		for _, e := range m.Flow {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	if len(m.Odds) > 0 {
		l = 0
		for _, e := range m.Odds {
			l += sozGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if m.Tax != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Tax))
	}
	if m.Win != 0 {
		n += 1 + sozGameroundFolks(uint64(m.Win))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	if len(m.Rich) > 0 {
		l = 0
		for _, e := range m.Rich {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if len(m.BetGroup) > 0 {
		l = 0
		for _, e := range m.BetGroup {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	return n
}

func (m *FolksGameInitAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovGameroundFolks(uint64(m.State))
	}
	if len(m.Rich) > 0 {
		for _, e := range m.Rich {
			l = e.Size()
			n += 1 + l + sovGameroundFolks(uint64(l))
		}
	}
	if len(m.Sum) > 0 {
		l = 0
		for _, e := range m.Sum {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if len(m.Bet) > 0 {
		l = 0
		for _, e := range m.Bet {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	return n
}

func (m *BetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sn != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Sn))
	}
	if m.Item != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Item))
	}
	if m.Bet != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Bet))
	}
	return n
}

func (m *BetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sn != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Sn))
	}
	if m.Item != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Item))
	}
	if m.Bet != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Bet))
	}
	if m.Coin != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Coin))
	}
	return n
}

func (m *UserBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Bet) > 0 {
		l = 0
		for _, e := range m.Bet {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	return n
}

func (m *OpenBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovGameroundFolks(uint64(m.State))
	}
	if len(m.Rich) > 0 {
		for _, e := range m.Rich {
			l = e.Size()
			n += 1 + l + sovGameroundFolks(uint64(l))
		}
	}
	return n
}

func (m *FolksGameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Id))
	}
	l = len(m.A)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	l = len(m.B)
	if l > 0 {
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	if len(m.Odd) > 0 {
		l = 0
		for _, e := range m.Odd {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if len(m.Bet) > 0 {
		l = 0
		for _, e := range m.Bet {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	if len(m.Rich) > 0 {
		l = 0
		for _, e := range m.Rich {
			l += sovGameroundFolks(uint64(e))
		}
		n += 1 + sovGameroundFolks(uint64(l)) + l
	}
	return n
}

func (m *CloseBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.R != nil {
		l = m.R.Size()
		n += 1 + l + sovGameroundFolks(uint64(l))
	}
	if m.Win != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Win))
	}
	if m.Coin != 0 {
		n += 1 + sovGameroundFolks(uint64(m.Coin))
	}
	return n
}

func sovGameroundFolks(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGameroundFolks(x uint64) (n int) {
	return sovGameroundFolks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FolksUserLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FolksUserLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FolksUserLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			m.Log = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Log |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FolksGameRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FolksGameRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FolksGameRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bill = append(m.Bill, &GameBill{})
			if err := m.Bill[len(m.Bill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flow = append(m.Flow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flow) == 0 {
					m.Flow = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flow = append(m.Flow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Odds = append(m.Odds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Odds) == 0 {
					m.Odds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Odds = append(m.Odds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rich = append(m.Rich, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rich) == 0 {
					m.Rich = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rich = append(m.Rich, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BetGroup = append(m.BetGroup, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BetGroup) == 0 {
					m.BetGroup = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BetGroup = append(m.BetGroup, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BetGroup", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FolksGameInitAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FolksGameInitAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FolksGameInitAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rich = append(m.Rich, &User{})
			if err := m.Rich[len(m.Rich)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sum = append(m.Sum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sum) == 0 {
					m.Sum = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sum = append(m.Sum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bet = append(m.Bet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bet) == 0 {
					m.Bet = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bet = append(m.Bet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log[:0], dAtA[iNdEx:postIndex]...)
			if m.Log == nil {
				m.Log = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bet = append(m.Bet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bet) == 0 {
					m.Bet = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bet = append(m.Bet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rich = append(m.Rich, &User{})
			if err := m.Rich[len(m.Rich)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FolksGameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FolksGameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FolksGameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field A", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.A = append(m.A[:0], dAtA[iNdEx:postIndex]...)
			if m.A == nil {
				m.A = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field B", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.B = append(m.B[:0], dAtA[iNdEx:postIndex]...)
			if m.B == nil {
				m.B = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Odd = append(m.Odd, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Odd) == 0 {
					m.Odd = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Odd = append(m.Odd, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bet = append(m.Bet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bet) == 0 {
					m.Bet = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bet = append(m.Bet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rich = append(m.Rich, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGameroundFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rich) == 0 {
					m.Rich = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGameroundFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rich = append(m.Rich, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CloseBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CloseBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CloseBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.R == nil {
				m.R = &FolksGameResult{}
			}
			if err := m.R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			m.Win = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Win |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGameroundFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGameroundFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGameroundFolks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGameroundFolks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGameroundFolks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGameroundFolks
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGameroundFolks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGameroundFolks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGameroundFolks(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGameroundFolks
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGameroundFolks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGameroundFolks   = fmt.Errorf("proto: integer overflow")
)
