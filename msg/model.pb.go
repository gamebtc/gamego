// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: model.proto

package msg

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GameFrame struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data"`
}

func (m *GameFrame) Reset()         { *m = GameFrame{} }
func (m *GameFrame) String() string { return proto.CompactTextString(m) }
func (*GameFrame) ProtoMessage()    {}
func (*GameFrame) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c16552f9fdb66d8, []int{0}
}
func (m *GameFrame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameFrame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameFrame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameFrame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameFrame.Merge(m, src)
}
func (m *GameFrame) XXX_Size() int {
	return m.Size()
}
func (m *GameFrame) XXX_DiscardUnknown() {
	xxx_messageInfo_GameFrame.DiscardUnknown(m)
}

var xxx_messageInfo_GameFrame proto.InternalMessageInfo

func (m *GameFrame) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*GameFrame)(nil), "msg.GameFrame")
}

func init() { proto.RegisterFile("model.proto", fileDescriptor_4c16552f9fdb66d8) }

var fileDescriptor_4c16552f9fdb66d8 = []byte{
	// 145 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x4f, 0x49,
	0xcd, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0x2d, 0x4e, 0x57, 0x92, 0xe7, 0xe2,
	0x74, 0x4f, 0xcc, 0x4d, 0x75, 0x2b, 0x4a, 0xcc, 0x4d, 0x15, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c,
	0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x8d, 0xa2, 0xb8, 0x58, 0x40, 0x0a,
	0x84, 0xb4, 0xb8, 0x58, 0x82, 0x53, 0xf3, 0x52, 0x84, 0xf8, 0xf4, 0x72, 0x8b, 0xd3, 0xf5, 0xe0,
	0x7a, 0xa4, 0xd0, 0xf8, 0x1a, 0x8c, 0x06, 0x8c, 0x42, 0x6a, 0x5c, 0x2c, 0xce, 0x89, 0x39, 0x39,
	0x84, 0xd4, 0x3a, 0x49, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72,
	0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b,
	0xd8, 0x89, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xfb, 0xfd, 0x0b, 0xb1, 0x00, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GameClient is the client API for Game service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GameClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Game_SendClient, error)
	Call(ctx context.Context, in *GameFrame, opts ...grpc.CallOption) (*GameFrame, error)
}

type gameClient struct {
	cc *grpc.ClientConn
}

func NewGameClient(cc *grpc.ClientConn) GameClient {
	return &gameClient{cc}
}

func (c *gameClient) Send(ctx context.Context, opts ...grpc.CallOption) (Game_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Game_serviceDesc.Streams[0], "/msg.Game/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameSendClient{stream}
	return x, nil
}

type Game_SendClient interface {
	Send(*GameFrame) error
	Recv() (*GameFrame, error)
	grpc.ClientStream
}

type gameSendClient struct {
	grpc.ClientStream
}

func (x *gameSendClient) Send(m *GameFrame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gameSendClient) Recv() (*GameFrame, error) {
	m := new(GameFrame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameClient) Call(ctx context.Context, in *GameFrame, opts ...grpc.CallOption) (*GameFrame, error) {
	out := new(GameFrame)
	err := c.cc.Invoke(ctx, "/msg.Game/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameServer is the server API for Game service.
type GameServer interface {
	Send(Game_SendServer) error
	Call(context.Context, *GameFrame) (*GameFrame, error)
}

func RegisterGameServer(s *grpc.Server, srv GameServer) {
	s.RegisterService(&_Game_serviceDesc, srv)
}

func _Game_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GameServer).Send(&gameSendServer{stream})
}

type Game_SendServer interface {
	Send(*GameFrame) error
	Recv() (*GameFrame, error)
	grpc.ServerStream
}

type gameSendServer struct {
	grpc.ServerStream
}

func (x *gameSendServer) Send(m *GameFrame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gameSendServer) Recv() (*GameFrame, error) {
	m := new(GameFrame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Game_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/msg.Game/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameServer).Call(ctx, req.(*GameFrame))
	}
	return interceptor(ctx, in, info, handler)
}

var _Game_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msg.Game",
	HandlerType: (*GameServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _Game_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Game_Send_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "model.proto",
}

var (
	ErrInvalidLengthModel = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModel   = fmt.Errorf("proto: integer overflow")
)
