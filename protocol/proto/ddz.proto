syntax = "proto3";
option go_package = "ddz";
package ddz;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

enum Code {
	// 8400-8499(斗地主)
	CodeNone = 0;
	CodeActionReq = 8400;
	CodeActionAck = 8401;
	CodeGameInitAck = 8403;
	CodeGameStartAck = 8405;
	CodeGameResultAck = 8407;
}

enum ActionType {
	ActionNone = 0;
	// 准备
	ActionReady = 1;
	// 叫地主
	ActionCall = 2;
	// 不抢
	ActionNoRob = 3;
	// 抢地主
	ActionRob = 4;
	// 不加倍
	ActionOne = 5;
	// 加倍
	ActionDouble = 6;
	// 定地主,显示底牌
	ActionBottom = 7;
	// 过
	ActionPass = 8;
	// 出牌
	ActionPlay = 9;
	// 无人叫牌,重新开始
	ActionAbortion = 10;
	// 换桌玩
	ActionRenew = 11;
	// 离开
	ActionLeave = 12;
}

// 玩家信息
message Player {
	enum State {
		// 没有准备
		None = 0;
		// 已准备
		Ready = 1;
		// 游戏中
		Playing = 2;
		// 托管
		Trust = 3;
		// 离开
		Leave = 7;
	};
	// 玩家ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 玩家头像
	int32 icon = 2 [(gogoproto.moretags) = 'bson:"icon" msg:"icon"'];
	// VIP等级
	int32 vip = 3 [(gogoproto.moretags) = 'bson:"vip" msg:"vip"'];
	// 椅子号(从0开始)
	int32 chair = 4 [(gogoproto.moretags) = 'bson:"chair" msg:"chair"'];
	// 玩家带的分
	int64 coin = 5 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 玩家的下注
	int64 bet = 6 [(gogoproto.moretags) = 'bson:"bet" msg:"bet"'];
	// 玩家名称
	string name = 7 [(gogoproto.moretags) = 'bson:"name" msg:"name"'];
	// 游戏状态
	State state = 8 [(gogoproto.moretags) = 'bson:"state" msg:"state"'];
	// 手上剩余牌的张数
	int32 hand = 9 [(gogoproto.moretags) = 'bson:"hand" msg:"hand"'];
	// 倒计时(等待玩家命令倒计时)
	sint32 down = 10 [(gogoproto.moretags) = 'bson:"down" msg:"down"'];
}

// 打牌请求
message ActionReq{
	// 动作类型
	ActionType type = 1 [(gogoproto.jsontag) = 'type', (gogoproto.moretags) = 'bson:"type" msg:"type"'];
	// 牌
	bytes poker = 2 [(gogoproto.jsontag) = 'poker,omitempty', (gogoproto.moretags) = 'bson:"poker,omitempty" msg:"poker,omitempty"'];
}

message ActionAck{
	// 动作类型
	ActionType type = 1 [(gogoproto.jsontag) = 'type', (gogoproto.moretags) = 'bson:"type" msg:"type"'];
	// 牌
	bytes poker = 2 [(gogoproto.jsontag) = 'poker,omitempty', (gogoproto.moretags) = 'bson:"poker,omitempty" msg:"poker,omitempty"'];
	// 玩家ID
	int32 uid = 3 [(gogoproto.jsontag) = 'uid,omitempty', (gogoproto.moretags) = 'bson:"uid,omitempty" msg:"uid,omitempty"'];
}

message GameInitAck {
	// 当前游戏ID
	int32 table = 1 [(gogoproto.moretags) = 'bson:"table" msg:"table"'];
	// 当前游戏ID
	int32 id = 2 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 当前游戏状态
	int32 state = 4 [(gogoproto.moretags) = 'bson:"state" msg:"state"'];
	// 第几轮
	int32 ring = 5 [(gogoproto.moretags) = 'bson:"ring" msg:"ring"'];
	// 玩家(第1个位置为先)
	repeated Player players = 6 [(gogoproto.moretags) = 'bson:"play" msg:"play"'];
	// 我的牌,如果已看牌
	bytes poker = 7 [(gogoproto.jsontag) = 'poker,omitempty', (gogoproto.moretags) = 'bson:"poker,omitempty" msg:"poker,omitempty"'];
	// 已出的牌
	bytes use = 8 [(gogoproto.jsontag) = 'use,omitempty', (gogoproto.moretags) = 'bson:"use,omitempty" msg:"use,omitempty"'];
}

// 游戏开始
message GameStartAck {
	// 当前游戏ID
	int32 id = 1 [(gogoproto.jsontag) = 'id', (gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 彩池的钱
	int64 pool = 2 [(gogoproto.jsontag) = 'pool', (gogoproto.moretags) = 'bson:"pool" msg:"pool"'];
	// 玩家(第1个位置为先)
	repeated Player players = 3 [(gogoproto.jsontag) = 'play', (gogoproto.moretags) = 'bson:"play" msg:"play"'];
}

// 游戏结束
message GameResultAck {
	// 当前游戏ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 赢家
	repeated int32 winner = 2 [(gogoproto.moretags) = 'bson:"winner" msg:"winner"'];
	// 每个人的赢钱数
	repeated int64 prize = 3 [(gogoproto.moretags) = 'bson:"prize" msg:"prize"'];
	// 我的金币数
	int64 coin = 4 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 所有牌,不能看的为0
	bytes poker = 5 [(gogoproto.jsontag) = 'poker', (gogoproto.moretags) = 'bson:"poker" msg:"poker"'];
	// 喜钱，从彩池单独出
	int64 lucky = 6 [(gogoproto.jsontag) = 'lucky,omitempty', (gogoproto.moretags) = 'bson:"lucky,omitempty" msg:"lucky,omitempty"'];
}
