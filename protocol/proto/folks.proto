syntax = "proto3";

option go_package = "folks";
package protocol;
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message Folks {
	enum Code {
		None = 0;
		// 百人游戏(百家乐/龙虎/红黑/色宝/百人牛)8193-8299
		ReadyGameReq 	= 8193; // 准备游戏
		ReadyGameAck 	= 8194; // 准备游戏
		BetReq 			= 8201; // 下注
		BetAck 			= 8202; // 下注返回
		GameInitAck 	= 8203; // 初始化游戏
		UserBetAck 		= 8204; // 用户下注
		OpenBetAck 		= 8205; // 开启下注
		StopBetAck 		= 8206; // 停止下注
		GameDealAck     = 8207; // 开启下注
		LeaveReq        = 8208; // 离开游戏
		LeaveAck        = 8209; // 离开游戏
	}
}

// 玩家信息
message Player {
	// 玩家ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 玩家头像
	int32 icon = 2 [(gogoproto.moretags) = 'bson:"icon" msg:"icon"'];
	// VIP等级
	int32 vip = 3 [(gogoproto.moretags) = 'bson:"vip" msg:"vip"'];
	// 玩家带的分
	int64 coin = 4 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 玩家名称
	string name = 5 [(gogoproto.moretags) = 'bson:"name" msg:"name"'];
}

message GameInitAck {
	// 当前游戏ID
	int32 table = 1 [(gogoproto.moretags) = 'bson:"table" msg:"table"'];
	// 当前游戏ID
	int32 id = 2 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 当前游戏状态
	int32 state = 3 [(gogoproto.moretags) = 'bson:"state" msg:"state"'];
	// 本状态剩余时间
	int32 time = 4 [(gogoproto.moretags) = 'bson:"time" msg:"time"'];
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	repeated Player rich = 5 [(gogoproto.moretags) = 'bson:"rich" msg:"rich"'];
	// 各个区域的投注情况
	repeated int64 sum = 6 [(gogoproto.moretags) = 'bson:"sum" msg:"sum"'];
	// 我的投注情况
	repeated int64 bet = 7 [(gogoproto.moretags) = 'bson:"bet" msg:"bet"'];
	// 最近的发牌的日志
	bytes log = 8 [(gogoproto.moretags) = 'bson:"log" msg:"log"'];
	// 庄家
	Player bank = 9 [(gogoproto.jsontag) = 'bank,omitempty', (gogoproto.moretags) = 'bson:"bank,omitempty" msg:"bank,omitempty"'];
}

// 请求下注(红黑/龙虎/百家乐/色宝)
message BetReq{
	// 序列号
	int32 sn = 1 [(gogoproto.jsontag) = 'sn',(gogoproto.moretags) = 'bson:"sn" msg:"sn"'];
	// 投注项,根据游戏定义
	int32 item = 2 [(gogoproto.jsontag) = 'i',(gogoproto.moretags) = 'bson:"i" msg:"i"'];
	// 投注金币
	int32 bet = 3 [(gogoproto.jsontag) = 'bet',(gogoproto.moretags) = 'bson:"bet" msg:"bet"'];
}

// 下注返回(红黑/龙虎/百家乐/色宝)
message BetAck{
	// 序列号
	int32 sn = 1 [(gogoproto.jsontag) = 'sn', (gogoproto.moretags) = 'bson:"sn" msg:"sn"'];
	// 投注项,根据游戏定义
	int32 item = 2 [(gogoproto.jsontag) = 'i', (gogoproto.moretags) = 'bson:"i" msg:"i"'];
	// 投注金币
	int32 bet = 3 [(gogoproto.jsontag) = 'bet', (gogoproto.moretags) = 'bson:"bet" msg:"bet"'];
	// 剩余金币
	int64 coin = 4 [(gogoproto.jsontag) = 'coin', (gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 我的投注情况
	//repeated int64 group = 4 [(gogoproto.jsontag) = 'g', (gogoproto.moretags) = 'bson:"g" msg:"g"'];
}

// 玩家下注信息
message UserBetAck{
	// 剩余下注时间
	int32 time = 1 [(gogoproto.moretags) = 'bson:"time" msg:"time"'];
	// 每三个项表示一条记录Bet(依次为玩家ID，投注项，投注额）
	repeated int32 bet = 2 [(gogoproto.moretags) = 'bson:"item" msg:"item"'];
}

// 开放下注
message OpenBetAck {
	// 当前游戏ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 剩余下注时间
	int32 time = 2 [(gogoproto.moretags) = 'bson:"time" msg:"time"'];
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	repeated Player rich = 3 [(gogoproto.moretags) = 'bson:"rich" msg:"rich"'];
	// 庄家
	Player bank = 4 [(gogoproto.jsontag) = 'bank,omitempty', (gogoproto.moretags) = 'bson:"bank,omitempty" msg:"bank,omitempty"'];
}

// 开放下注
message StopBetAck {
	// 当前游戏ID
	int64 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
}

// 开奖结果(红黑/龙虎/百家乐/色宝)
message GameResult{
	// 当前游戏ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 发牌情况
	bytes poker = 2 [(gogoproto.moretags) = 'bson:"p" msg:"p"'];
	// 各个区域的赔付情况
	repeated int32 odd = 4 [(gogoproto.moretags) = 'bson:"odd" msg:"odd"'];
	// 各个区域的投注情况
	repeated int64 sum = 5 [(gogoproto.moretags) = 'bson:"sum" msg:"sum"'];
	// 富豪玩家的输赢
	repeated sint64 rich = 6 [(gogoproto.moretags) = 'bson:"rich" msg:"rich"'];
}

// 关闭下注
message GameDealAck {
	// 多人游戏开奖结果
	GameResult r = 1 [(gogoproto.moretags) = 'bson:"r" msg:"r"'];
	// 我的输赢情况
	sint64 win = 2 [(gogoproto.moretags) = 'bson:"win" msg:"win"'];
	// 我的金币数
	int64 coin = 3 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
}

message LeaveReq{
	// 玩家ID
	int32 uid = 1 [(gogoproto.jsontag) = 'u', (gogoproto.moretags) = 'bson:"u" msg:"u"'];
}

message LeaveAck {
	// 玩家ID
	int32 uid = 1 [(gogoproto.jsontag) = 'u', (gogoproto.moretags) = 'bson:"u" msg:"u"'];
}