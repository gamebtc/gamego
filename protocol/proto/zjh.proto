syntax = "proto3";
option go_package = "zjh";
package zjh;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

enum Code {
	// 8300-8399(炸金花)
	CodeNone = 0;
	CodeActionReq = 8300;
	CodeActionAck = 8301;
	CodeGameInitAck = 8303;
	CodeGameStartAck = 8305;
	CodeGameEndAck = 8307;
}

enum ActionType {
	ActionNone = 0;
	// 准备
	ActionReady = 1;
	// 看牌
	ActionLook = 2;
	// 主动弃牌
	ActionDiscard = 3;
	// 超时弃牌
	ActionOvertime = 4;
	// 比牌
	ActionCompare = 5;
	// 下注(跟注+加注)
	ActionAddBet = 6;
	// 全压
	ActionAllin = 7;
	// 自动比牌
	ActionAutoCompare = 8;
	// 换桌玩
	ActionRenew = 9;
	// 离开
	ActionLeave = 10;
}

// 玩家信息
message Player {
	enum State {
		// 没有准备
		None = 0;
		// 已准备
		Ready = 1;
		// 游戏中
		Playing = 2;
		// 全押
		Allin = 3;
		// 已弃牌
		Discard = 4;
		// PK失败
		Lose = 5;
		// 赢得最终胜利
		Win = 6;
		// 离开
		Leave = 7;
	};
	// 玩家ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 玩家头像
	int32 icon = 2 [(gogoproto.moretags) = 'bson:"icon" msg:"icon"'];
	// VIP等级
	int32 vip = 3 [(gogoproto.moretags) = 'bson:"vip" msg:"vip"'];
	// 椅子号
	int32 chair = 4 [(gogoproto.moretags) = 'bson:"chair" msg:"chair"'];
	// 玩家带的分
	int64 coin = 5 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 玩家的下注
	int64 bet = 6 [(gogoproto.moretags) = 'bson:"bet" msg:"bet"'];
	// 玩家名称
	string name = 7 [(gogoproto.moretags) = 'bson:"name" msg:"name"'];
	// 游戏状态
	State state = 8 [(gogoproto.moretags) = 'bson:"state" msg:"state"'];
	// 是否已看牌
	bool look = 9 [(gogoproto.moretags) = 'bson:"look" msg:"look"'];
	// 倒计时(等待玩家命令倒计时)
	int32 down = 10 [(gogoproto.moretags) = 'bson:"down" msg:"down"'];
}

// 玩家结算信息
message GameBill {
	// 玩家ID(u有建立索引，不要更改名称)
	int32 uid = 1 [(gogoproto.jsontag) = 'u', (gogoproto.moretags) = 'bson:"u" msg:"u"'];
	// 玩家类型
	int32 job = 2 [(gogoproto.jsontag) = 'j,omitempty', (gogoproto.moretags) = 'bson:"j,omitempty" msg:"j,omitempty"'];
	// 开始游戏时带的钱
	int64 coin = 3 [(gogoproto.jsontag) = 'c', (gogoproto.moretags) = 'bson:"c" msg:"c"'];
	// 投注总额
	int64 bet = 4 [(gogoproto.jsontag) = 'b', (gogoproto.moretags) = 'bson:"b" msg:"b"'];
	// 发牌情况
	bytes poker = 5 [(gogoproto.jsontag) = 'p', (gogoproto.moretags) = 'bson:"p" msg:"p"'];
	// 输赢情况
	sint64 win = 6 [(gogoproto.jsontag) = 'w', (gogoproto.moretags) = 'bson:"w" msg:"w"'];
	// 税收
	int64 tax = 7 [(gogoproto.jsontag) = 'x,omitempty', (gogoproto.moretags) = 'bson:"x,omitempty" msg:"x,omitempty"'];
	// 进入彩池的税收
	int64 water = 8 [(gogoproto.jsontag) = 'o,omitempty', (gogoproto.moretags) = 'bson:"o,omitempty" msg:"o,omitempty"'];
	// 喜钱，从彩池单独出
	int64 lucky = 9 [(gogoproto.jsontag) = 'y,omitempty', (gogoproto.moretags) = 'bson:"y,omitempty" msg:"y,omitempty"'];
	// 和机器人之间的输赢
	sint64 robot = 10 [(gogoproto.jsontag) = 't,omitempty', (gogoproto.moretags) = 'bson:"t,omitempty" msg:"t,omitempty"'];
	// PK过的玩家ID
	repeated int32 pk = 11 [(gogoproto.jsontag) = 'k,omitempty', (gogoproto.moretags) = 'bson:"-,omitempty" msg:"k,omitempty"'];
}

// 炸金花日志
message GameRound {
	// 全局唯一游戏ID(i有建立索引，不要更改名称)
	int64 id = 1 [(gogoproto.jsontag) = 'i', (gogoproto.moretags) = 'bson:"i" msg:"i"'];
	// 游戏开始时间(s有建立索引，不要更改名称)
	int64 start = 2 [(gogoproto.jsontag) = 's', (gogoproto.moretags) = 'bson:"s" msg:"s"'];
	// 游戏结束时间
	int64 end = 3 [(gogoproto.jsontag) = 'e', (gogoproto.moretags) = 'bson:"e" msg:"e"'];
	// 房间ID
	int32 room = 4 [(gogoproto.jsontag) = 'r', (gogoproto.moretags) = 'bson:"r" msg:"r"'];
	// 桌子ID
	int32 tab = 5 [(gogoproto.jsontag) = 't', (gogoproto.moretags) = 'bson:"t" msg:"t"'];
	// 所有玩家结算汇总(b.u有建立索引，不要更改名称)
	repeated GameBill bill = 6 [(gogoproto.jsontag) = 'b', (gogoproto.moretags) = 'bson:"b" msg:"b"'];
	// 底注
	int64 ante = 7 [(gogoproto.jsontag) = 'a', (gogoproto.moretags) = 'bson:"a" msg:"a"'];
	// 下注轮数
	int32 ring = 8 [(gogoproto.jsontag) = 'g', (gogoproto.moretags) = 'bson:"g" msg:"g"'];
	// 下注总金币
	int64 sum = 9 [(gogoproto.jsontag) = 'm', (gogoproto.moretags) = 'bson:"m" msg:"m"'];
	// 真实玩家系统输赢
	sint64 win = 10 [(gogoproto.jsontag) = 'w', (gogoproto.moretags) = 'bson:"w" msg:"w"'];
	// 真实玩家总税收
	int64 tax = 11 [(gogoproto.jsontag) = 'x', (gogoproto.moretags) = 'bson:"x" msg:"x"'];
	// 真实玩家进入彩池的税收
	int64 water = 12 [(gogoproto.jsontag) = 'o', (gogoproto.moretags) = 'bson:"o" msg:"o"'];
	// 动作日志
	repeated ActionLog log = 13 [(gogoproto.jsontag) = 'l', (gogoproto.moretags) = 'bson:"l" msg:"l"'];
	// 当前池子的钱
	int64 pool = 14 [(gogoproto.jsontag) = 'p', (gogoproto.moretags) = 'bson:"p" msg:"p"'];
	// 真实玩家获得的喜钱，从彩池单独出
	int64 lucky = 15 [(gogoproto.jsontag) = 'y,omitempty', (gogoproto.moretags) = 'bson:"y,omitempty" msg:"y,omitempty"'];
	// 备注
	string note = 16 [(gogoproto.jsontag) = 'n,omitempty', (gogoproto.moretags) = 'bson:"n,omitempty" msg:"n,omitempty"'];
	// 系统必赢
	bool cheat = 17 [(gogoproto.jsontag) = 'v,omitempty', (gogoproto.moretags) = 'bson:"v,omitempty" msg:"v,omitempty"'];
}

// 打牌请求
message ActionReq{
	// 动作类型
	ActionType type = 1 [(gogoproto.jsontag) = 't', (gogoproto.moretags) = 'bson:"t" msg:"t"'];
	// 下注
	int32 bet = 2 [(gogoproto.jsontag) = 'b,omitempty', (gogoproto.moretags) = 'bson:"b,omitempty" msg:"b,omitempty"'];
	// 对手ID
	int32 opponent = 3 [(gogoproto.jsontag) = 'o,omitempty', (gogoproto.moretags) = 'bson:"o,omitempty" msg:"o,omitempty"'];
}

message ActionAck{
	// 玩家ID
	int32 uid = 1 [(gogoproto.jsontag) = 'u', (gogoproto.moretags) = 'bson:"u" msg:"u"'];
	// 动作类型
	ActionType type = 2 [(gogoproto.jsontag) = 't', (gogoproto.moretags) = 'bson:"t" msg:"t"'];
	// 下注
	int32 bet = 3 [(gogoproto.jsontag) = 'b,omitempty', (gogoproto.moretags) = 'bson:"b,omitempty" msg:"b,omitempty"'];
	// 对手ID
	int32 opponent = 4 [(gogoproto.jsontag) = 'o,omitempty', (gogoproto.moretags) = 'bson:"o,omitempty" msg:"o,omitempty"'];
	// 牌
	bytes poker = 5 [(gogoproto.jsontag) = 'p,omitempty', (gogoproto.moretags) = 'bson:"p,omitempty" msg:"p,omitempty"'];
	// 比牌结果
	bool win = 6 [(gogoproto.jsontag) = 'w,omitempty', (gogoproto.moretags) = 'bson:"w,omitempty" msg:"w,omitempty"'];
	// 当前金币
	int64 coin = 7 [(gogoproto.jsontag) = 'c,omitempty', (gogoproto.moretags) = 'bson:"c,omitempty" msg:"c,omitempty"'];
}

message ActionLog{
	// 时间
	int64 start = 1 [(gogoproto.jsontag) = 's', (gogoproto.moretags) = 'bson:"s" msg:"s"'];
	// 玩家ID
	int32 uid = 2 [(gogoproto.jsontag) = 'u', (gogoproto.moretags) = 'bson:"u" msg:"u"'];
	// 动作类型
	ActionType type = 3 [(gogoproto.jsontag) = 't', (gogoproto.moretags) = 'bson:"t" msg:"t"'];
	// 下注
	int32 bet = 4 [(gogoproto.jsontag) = 'c,omitempty', (gogoproto.moretags) = 'bson:"c,omitempty" msg:"c,omitempty"'];
	// 对手ID
	int32 opponent = 5 [(gogoproto.jsontag) = 'o,omitempty', (gogoproto.moretags) = 'bson:"o,omitempty" msg:"o,omitempty"'];
	// 比牌结果
	bool win = 6 [(gogoproto.jsontag) = 'w,omitempty', (gogoproto.moretags) = 'bson:"w,omitempty" msg:"w,omitempty"'];
}

message GameInitAck {
	// 当前游戏ID
	int32 table = 1 [(gogoproto.moretags) = 'bson:"table" msg:"table"'];
	// 当前游戏ID
	int32 id = 2 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 彩池的钱
	int64 pool = 3 [(gogoproto.jsontag) = 'pool', (gogoproto.moretags) = 'bson:"pool" msg:"pool"'];
	// 当前游戏状态
	int32 state = 4 [(gogoproto.moretags) = 'bson:"state" msg:"state"'];
	// 第几轮
	int32 ring = 5 [(gogoproto.moretags) = 'bson:"ring" msg:"ring"'];
	// 第一个出牌的人
	int32 first = 6 [(gogoproto.moretags) = 'bson:"first" msg:"first"'];
	// 玩家(第1个位置为先)
	repeated Player player = 7 [(gogoproto.moretags) = 'bson:"play" msg:"play"'];
	// 我的牌,如果已看牌
	bytes poker = 8 [(gogoproto.jsontag) = 'p,omitempty', (gogoproto.moretags) = 'bson:"p,omitempty" msg:"p,omitempty"'];
}

// 游戏开始
message GameStartAck {
	// 当前游戏ID
	int32 id = 1 [(gogoproto.jsontag) = 'id', (gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 彩池的钱
	int64 pool = 2 [(gogoproto.jsontag) = 'pool', (gogoproto.moretags) = 'bson:"pool" msg:"pool"'];
	// 玩家(第1个位置为先)
	repeated Player player = 3 [(gogoproto.jsontag) = 'play', (gogoproto.moretags) = 'bson:"play" msg:"play"'];
}

// 游戏结束
message GameEndAck {
	// 当前游戏ID
	int32 id = 1 [(gogoproto.moretags) = 'bson:"id" msg:"id"'];
	// 赢钱数
	int64 win = 2 [(gogoproto.moretags) = 'bson:"win" msg:"win"'];
	// 赢家
	int32 winner = 3 [(gogoproto.moretags) = 'bson:"winner" msg:"winner"'];
	// 我的金币数
	int64 coin = 4 [(gogoproto.moretags) = 'bson:"coin" msg:"coin"'];
	// 所有牌,不能看的为0
	bytes poker = 5 [(gogoproto.jsontag) = 'poker', (gogoproto.moretags) = 'bson:"poker" msg:"poker"'];
	// 喜钱，从彩池单独出
	int64 lucky = 6 [(gogoproto.jsontag) = 'lucky,omitempty', (gogoproto.moretags) = 'bson:"lucky,omitempty" msg:"lucky,omitempty"'];
}
