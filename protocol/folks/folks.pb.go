// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: folks.proto

package folks

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Folks_Code int32

const (
	Folks_None Folks_Code = 0
	// 百人游戏(百家乐/龙虎/红黑/色宝/百人牛)8193-8299
	Folks_ReadyGameReq Folks_Code = 8193
	Folks_ReadyGameAck Folks_Code = 8194
	Folks_BetReq       Folks_Code = 8201
	Folks_BetAck       Folks_Code = 8202
	Folks_GameInitAck  Folks_Code = 8203
	Folks_UserBetAck   Folks_Code = 8204
	Folks_OpenBetAck   Folks_Code = 8205
	Folks_StopBetAck   Folks_Code = 8206
	Folks_GameDealAck  Folks_Code = 8207
	Folks_LeaveReq     Folks_Code = 8208
	Folks_LeaveAck     Folks_Code = 8209
)

var Folks_Code_name = map[int32]string{
	0:    "None",
	8193: "ReadyGameReq",
	8194: "ReadyGameAck",
	8201: "BetReq",
	8202: "BetAck",
	8203: "GameInitAck",
	8204: "UserBetAck",
	8205: "OpenBetAck",
	8206: "StopBetAck",
	8207: "GameDealAck",
	8208: "LeaveReq",
	8209: "LeaveAck",
}

var Folks_Code_value = map[string]int32{
	"None":         0,
	"ReadyGameReq": 8193,
	"ReadyGameAck": 8194,
	"BetReq":       8201,
	"BetAck":       8202,
	"GameInitAck":  8203,
	"UserBetAck":   8204,
	"OpenBetAck":   8205,
	"StopBetAck":   8206,
	"GameDealAck":  8207,
	"LeaveReq":     8208,
	"LeaveAck":     8209,
}

func (x Folks_Code) String() string {
	return proto.EnumName(Folks_Code_name, int32(x))
}

func (Folks_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{0, 0}
}

type Folks struct {
}

func (m *Folks) Reset()         { *m = Folks{} }
func (m *Folks) String() string { return proto.CompactTextString(m) }
func (*Folks) ProtoMessage()    {}
func (*Folks) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{0}
}
func (m *Folks) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Folks) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Folks.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Folks) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Folks.Merge(m, src)
}
func (m *Folks) XXX_Size() int {
	return m.Size()
}
func (m *Folks) XXX_DiscardUnknown() {
	xxx_messageInfo_Folks.DiscardUnknown(m)
}

var xxx_messageInfo_Folks proto.InternalMessageInfo

// 玩家信息
type Player struct {
	// 玩家ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 玩家头像
	Icon int32 `protobuf:"varint,2,opt,name=icon,proto3" json:"icon" bson:"icon" msg:"icon"`
	// VIP等级
	Vip int32 `protobuf:"varint,3,opt,name=vip,proto3" json:"vip" bson:"vip" msg:"vip"`
	// 玩家带的分
	Coin int64 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
	// 玩家名称
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name" bson:"name" msg:"name"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{1}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *Player) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *Player) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 用户日志(龙虎/红黑/百家乐/骰宝)
type GameBill struct {
	// 玩家ID(u有建立索引，不要更改名称)
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
	// 开始游戏时带的钱
	Coin int64 `protobuf:"varint,2,opt,name=coin,proto3" json:"c" bson:"c" msg:"c"`
	// 投注总额
	Bet int64 `protobuf:"varint,3,opt,name=bet,proto3" json:"b" bson:"b" msg:"b"`
	// 玩家投注分组(0:龙赢,1:虎赢,2:和)
	Group []int64 `protobuf:"varint,4,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 输赢情况
	Win int64 `protobuf:"zigzag64,5,opt,name=win,proto3" json:"w,omitempty" bson:"w,omitempty" msg:"w,omitempty"`
	// 税收
	Tax int64 `protobuf:"varint,6,opt,name=tax,proto3" json:"x,omitempty" bson:"x,omitempty" msg:"x,omitempty"`
	// 玩家类型
	Job int32 `protobuf:"varint,7,opt,name=job,proto3" json:"j,omitempty" bson:"j,omitempty" msg:"j,omitempty"`
}

func (m *GameBill) Reset()         { *m = GameBill{} }
func (m *GameBill) String() string { return proto.CompactTextString(m) }
func (*GameBill) ProtoMessage()    {}
func (*GameBill) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{2}
}
func (m *GameBill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBill.Merge(m, src)
}
func (m *GameBill) XXX_Size() int {
	return m.Size()
}
func (m *GameBill) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBill.DiscardUnknown(m)
}

var xxx_messageInfo_GameBill proto.InternalMessageInfo

func (m *GameBill) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GameBill) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *GameBill) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *GameBill) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GameBill) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameBill) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameBill) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

// 百人游戏日志(龙虎/红黑/百家乐/骰宝)
type GameRound struct {
	// 全局唯一游戏ID(i有建立索引，不要更改名称)
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"i" bson:"i" msg:"i"`
	// 游戏开始时间(s有建立索引，不要更改名称)
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"s" bson:"s" msg:"s"`
	// 游戏结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"e" bson:"e" msg:"e"`
	// 房间ID
	Room int32 `protobuf:"varint,4,opt,name=room,proto3" json:"r" bson:"r" msg:"r"`
	// 桌子ID
	Tab int32 `protobuf:"varint,5,opt,name=tab,proto3" json:"t,omitempty" bson:"t,omitempty" msg:"t,omitempty"`
	// 所有玩家下注汇总(b.u有建立索引，不要更改名称)
	Bill []*GameBill `protobuf:"bytes,6,rep,name=bill,proto3" json:"b" bson:"b" msg:"b"`
	// 下注情况(protocol.Bet三个字段顺序压入)
	Flow []int32 `protobuf:"varint,7,rep,packed,name=flow,proto3" json:"f" bson:"f" msg:"f"`
	// 所有玩家投注分组
	Group []int64 `protobuf:"varint,8,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 发牌情况
	Poker []byte `protobuf:"bytes,9,opt,name=poker,proto3" json:"p" bson:"p" msg:"p"`
	// 赔付情况
	Odds []int32 `protobuf:"zigzag32,10,rep,packed,name=odds,proto3" json:"o" bson:"o" msg:"o"`
	// 系统税收
	Tax int64 `protobuf:"varint,11,opt,name=tax,proto3" json:"x" bson:"x" msg:"x"`
	// 本局所有真实玩家的输赢
	Win int64 `protobuf:"zigzag64,12,opt,name=win,proto3" json:"w" bson:"w" msg:"w"`
	// 备注
	Note string `protobuf:"bytes,13,opt,name=note,proto3" json:"n,omitempty" bson:"n,omitempty" msg:"n,omitempty"`
	// 富豪(第1个位置为赌神后面5个为富豪ID)
	Rich []int32 `protobuf:"varint,14,rep,packed,name=rich,proto3" json:"h,omitempty" bson:"h,omitempty" msg:"h,omitempty"`
	// 真实玩家下注分组
	UserBet []int64 `protobuf:"varint,15,rep,packed,name=userBet,proto3" json:"u,omitempty" bson:"u,omitempty" msg:"u,omitempty"`
	// 庄家ID，0为系统
	Bank int32 `protobuf:"varint,16,opt,name=bank,proto3" json:"k,omitempty" bson:"k,omitempty" msg:"k,omitempty"`
	// 系统必赢
	Cheat bool `protobuf:"varint,17,opt,name=cheat,proto3" json:"v,omitempty" bson:"v,omitempty" msg:"v,omitempty"`
}

func (m *GameRound) Reset()         { *m = GameRound{} }
func (m *GameRound) String() string { return proto.CompactTextString(m) }
func (*GameRound) ProtoMessage()    {}
func (*GameRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{3}
}
func (m *GameRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRound.Merge(m, src)
}
func (m *GameRound) XXX_Size() int {
	return m.Size()
}
func (m *GameRound) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRound.DiscardUnknown(m)
}

var xxx_messageInfo_GameRound proto.InternalMessageInfo

func (m *GameRound) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRound) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GameRound) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GameRound) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *GameRound) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *GameRound) GetBill() []*GameBill {
	if m != nil {
		return m.Bill
	}
	return nil
}

func (m *GameRound) GetFlow() []int32 {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *GameRound) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GameRound) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *GameRound) GetOdds() []int32 {
	if m != nil {
		return m.Odds
	}
	return nil
}

func (m *GameRound) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameRound) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameRound) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *GameRound) GetRich() []int32 {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *GameRound) GetUserBet() []int64 {
	if m != nil {
		return m.UserBet
	}
	return nil
}

func (m *GameRound) GetBank() int32 {
	if m != nil {
		return m.Bank
	}
	return 0
}

func (m *GameRound) GetCheat() bool {
	if m != nil {
		return m.Cheat
	}
	return false
}

type GameInitAck struct {
	// 当前游戏ID
	Table int32 `protobuf:"varint,1,opt,name=table,proto3" json:"table" bson:"table" msg:"table"`
	// 当前游戏ID
	Id int32 `protobuf:"varint,2,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 当前游戏状态
	State int32 `protobuf:"varint,3,opt,name=state,proto3" json:"state" bson:"state" msg:"state"`
	// 本状态剩余时间
	Time int32 `protobuf:"varint,4,opt,name=time,proto3" json:"time" bson:"time" msg:"time"`
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	Rich []*Player `protobuf:"bytes,5,rep,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
	// 各个区域的投注情况
	Sum []int64 `protobuf:"varint,6,rep,packed,name=sum,proto3" json:"sum" bson:"sum" msg:"sum"`
	// 我的投注情况
	Bet []int64 `protobuf:"varint,7,rep,packed,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 最近的发牌的日志
	Log []byte `protobuf:"bytes,8,opt,name=log,proto3" json:"log" bson:"log" msg:"log"`
	// 庄家
	Bank *Player `protobuf:"bytes,9,opt,name=bank,proto3" json:"bank,omitempty" bson:"bank,omitempty" msg:"bank,omitempty"`
}

func (m *GameInitAck) Reset()         { *m = GameInitAck{} }
func (m *GameInitAck) String() string { return proto.CompactTextString(m) }
func (*GameInitAck) ProtoMessage()    {}
func (*GameInitAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{4}
}
func (m *GameInitAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInitAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInitAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInitAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInitAck.Merge(m, src)
}
func (m *GameInitAck) XXX_Size() int {
	return m.Size()
}
func (m *GameInitAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInitAck.DiscardUnknown(m)
}

var xxx_messageInfo_GameInitAck proto.InternalMessageInfo

func (m *GameInitAck) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return 0
}

func (m *GameInitAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameInitAck) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *GameInitAck) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GameInitAck) GetRich() []*Player {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *GameInitAck) GetSum() []int64 {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *GameInitAck) GetBet() []int64 {
	if m != nil {
		return m.Bet
	}
	return nil
}

func (m *GameInitAck) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *GameInitAck) GetBank() *Player {
	if m != nil {
		return m.Bank
	}
	return nil
}

// 请求下注(红黑/龙虎/百家乐/色宝)
type BetReq struct {
	// 序列号
	Sn int32 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn" bson:"sn" msg:"sn"`
	// 投注项,根据游戏定义
	Item int32 `protobuf:"varint,2,opt,name=item,proto3" json:"i" bson:"i" msg:"i"`
	// 投注金币
	Bet int32 `protobuf:"varint,3,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
}

func (m *BetReq) Reset()         { *m = BetReq{} }
func (m *BetReq) String() string { return proto.CompactTextString(m) }
func (*BetReq) ProtoMessage()    {}
func (*BetReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{5}
}
func (m *BetReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetReq.Merge(m, src)
}
func (m *BetReq) XXX_Size() int {
	return m.Size()
}
func (m *BetReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BetReq.DiscardUnknown(m)
}

var xxx_messageInfo_BetReq proto.InternalMessageInfo

func (m *BetReq) GetSn() int32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *BetReq) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *BetReq) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

// 下注返回(红黑/龙虎/百家乐/色宝)
type BetAck struct {
	// 序列号
	Sn int32 `protobuf:"varint,1,opt,name=sn,proto3" json:"sn" bson:"sn" msg:"sn"`
	// 投注项,根据游戏定义
	Item int32 `protobuf:"varint,2,opt,name=item,proto3" json:"i" bson:"i" msg:"i"`
	// 投注金币
	Bet int32 `protobuf:"varint,3,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 剩余金币
	Coin int64 `protobuf:"varint,4,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
}

func (m *BetAck) Reset()         { *m = BetAck{} }
func (m *BetAck) String() string { return proto.CompactTextString(m) }
func (*BetAck) ProtoMessage()    {}
func (*BetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{6}
}
func (m *BetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BetAck.Merge(m, src)
}
func (m *BetAck) XXX_Size() int {
	return m.Size()
}
func (m *BetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_BetAck.DiscardUnknown(m)
}

var xxx_messageInfo_BetAck proto.InternalMessageInfo

func (m *BetAck) GetSn() int32 {
	if m != nil {
		return m.Sn
	}
	return 0
}

func (m *BetAck) GetItem() int32 {
	if m != nil {
		return m.Item
	}
	return 0
}

func (m *BetAck) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *BetAck) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

// 玩家下注信息
type UserBetAck struct {
	// 剩余下注时间
	Time int32 `protobuf:"varint,1,opt,name=time,proto3" json:"time" bson:"time" msg:"time"`
	// 每三个项表示一条记录Bet(依次为玩家ID，投注项，投注额）
	Bet []int32 `protobuf:"varint,2,rep,packed,name=bet,proto3" json:"bet" bson:"item" msg:"item"`
}

func (m *UserBetAck) Reset()         { *m = UserBetAck{} }
func (m *UserBetAck) String() string { return proto.CompactTextString(m) }
func (*UserBetAck) ProtoMessage()    {}
func (*UserBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{7}
}
func (m *UserBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserBetAck.Merge(m, src)
}
func (m *UserBetAck) XXX_Size() int {
	return m.Size()
}
func (m *UserBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UserBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_UserBetAck proto.InternalMessageInfo

func (m *UserBetAck) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UserBetAck) GetBet() []int32 {
	if m != nil {
		return m.Bet
	}
	return nil
}

// 开放下注
type OpenBetAck struct {
	// 当前游戏ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 剩余下注时间
	Time int32 `protobuf:"varint,2,opt,name=time,proto3" json:"time" bson:"time" msg:"time"`
	// 富豪玩家(第1个位置为赌神后面5个为富豪)
	Rich []*Player `protobuf:"bytes,3,rep,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
	// 庄家
	Bank *Player `protobuf:"bytes,4,opt,name=bank,proto3" json:"bank,omitempty" bson:"bank,omitempty" msg:"bank,omitempty"`
}

func (m *OpenBetAck) Reset()         { *m = OpenBetAck{} }
func (m *OpenBetAck) String() string { return proto.CompactTextString(m) }
func (*OpenBetAck) ProtoMessage()    {}
func (*OpenBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{8}
}
func (m *OpenBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OpenBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OpenBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OpenBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenBetAck.Merge(m, src)
}
func (m *OpenBetAck) XXX_Size() int {
	return m.Size()
}
func (m *OpenBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_OpenBetAck proto.InternalMessageInfo

func (m *OpenBetAck) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OpenBetAck) GetTime() int32 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *OpenBetAck) GetRich() []*Player {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *OpenBetAck) GetBank() *Player {
	if m != nil {
		return m.Bank
	}
	return nil
}

// 开放下注
type StopBetAck struct {
	// 当前游戏ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
}

func (m *StopBetAck) Reset()         { *m = StopBetAck{} }
func (m *StopBetAck) String() string { return proto.CompactTextString(m) }
func (*StopBetAck) ProtoMessage()    {}
func (*StopBetAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{9}
}
func (m *StopBetAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StopBetAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StopBetAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StopBetAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StopBetAck.Merge(m, src)
}
func (m *StopBetAck) XXX_Size() int {
	return m.Size()
}
func (m *StopBetAck) XXX_DiscardUnknown() {
	xxx_messageInfo_StopBetAck.DiscardUnknown(m)
}

var xxx_messageInfo_StopBetAck proto.InternalMessageInfo

func (m *StopBetAck) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 开奖结果(红黑/龙虎/百家乐/色宝)
type GameResult struct {
	// 当前游戏ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 发牌情况
	Poker []byte `protobuf:"bytes,2,opt,name=poker,proto3" json:"poker" bson:"p" msg:"p"`
	// 各个区域的赔付情况
	Odd []int32 `protobuf:"varint,4,rep,packed,name=odd,proto3" json:"odd" bson:"odd" msg:"odd"`
	// 各个区域的投注情况
	Sum []int64 `protobuf:"varint,5,rep,packed,name=sum,proto3" json:"sum" bson:"sum" msg:"sum"`
	// 富豪玩家的输赢
	Rich []int64 `protobuf:"zigzag64,6,rep,packed,name=rich,proto3" json:"rich" bson:"rich" msg:"rich"`
}

func (m *GameResult) Reset()         { *m = GameResult{} }
func (m *GameResult) String() string { return proto.CompactTextString(m) }
func (*GameResult) ProtoMessage()    {}
func (*GameResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{10}
}
func (m *GameResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameResult.Merge(m, src)
}
func (m *GameResult) XXX_Size() int {
	return m.Size()
}
func (m *GameResult) XXX_DiscardUnknown() {
	xxx_messageInfo_GameResult.DiscardUnknown(m)
}

var xxx_messageInfo_GameResult proto.InternalMessageInfo

func (m *GameResult) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameResult) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *GameResult) GetOdd() []int32 {
	if m != nil {
		return m.Odd
	}
	return nil
}

func (m *GameResult) GetSum() []int64 {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (m *GameResult) GetRich() []int64 {
	if m != nil {
		return m.Rich
	}
	return nil
}

// 关闭下注
type GameDealAck struct {
	// 多人游戏开奖结果
	R *GameResult `protobuf:"bytes,1,opt,name=r,proto3" json:"r" bson:"r" msg:"r"`
	// 我的输赢情况
	Win int64 `protobuf:"zigzag64,2,opt,name=win,proto3" json:"win" bson:"win" msg:"win"`
	// 我的金币数
	Coin int64 `protobuf:"varint,3,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
}

func (m *GameDealAck) Reset()         { *m = GameDealAck{} }
func (m *GameDealAck) String() string { return proto.CompactTextString(m) }
func (*GameDealAck) ProtoMessage()    {}
func (*GameDealAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{11}
}
func (m *GameDealAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameDealAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameDealAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameDealAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameDealAck.Merge(m, src)
}
func (m *GameDealAck) XXX_Size() int {
	return m.Size()
}
func (m *GameDealAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GameDealAck.DiscardUnknown(m)
}

var xxx_messageInfo_GameDealAck proto.InternalMessageInfo

func (m *GameDealAck) GetR() *GameResult {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *GameDealAck) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameDealAck) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

type LeaveReq struct {
	// 玩家ID
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
}

func (m *LeaveReq) Reset()         { *m = LeaveReq{} }
func (m *LeaveReq) String() string { return proto.CompactTextString(m) }
func (*LeaveReq) ProtoMessage()    {}
func (*LeaveReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{12}
}
func (m *LeaveReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveReq.Merge(m, src)
}
func (m *LeaveReq) XXX_Size() int {
	return m.Size()
}
func (m *LeaveReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveReq.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveReq proto.InternalMessageInfo

func (m *LeaveReq) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

type LeaveAck struct {
	// 玩家ID
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
}

func (m *LeaveAck) Reset()         { *m = LeaveAck{} }
func (m *LeaveAck) String() string { return proto.CompactTextString(m) }
func (*LeaveAck) ProtoMessage()    {}
func (*LeaveAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_ce9fde347a341b29, []int{13}
}
func (m *LeaveAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaveAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaveAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaveAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaveAck.Merge(m, src)
}
func (m *LeaveAck) XXX_Size() int {
	return m.Size()
}
func (m *LeaveAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaveAck.DiscardUnknown(m)
}

var xxx_messageInfo_LeaveAck proto.InternalMessageInfo

func (m *LeaveAck) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterEnum("protocol.Folks_Code", Folks_Code_name, Folks_Code_value)
	proto.RegisterType((*Folks)(nil), "protocol.Folks")
	proto.RegisterType((*Player)(nil), "protocol.Player")
	proto.RegisterType((*GameBill)(nil), "protocol.GameBill")
	proto.RegisterType((*GameRound)(nil), "protocol.GameRound")
	proto.RegisterType((*GameInitAck)(nil), "protocol.GameInitAck")
	proto.RegisterType((*BetReq)(nil), "protocol.BetReq")
	proto.RegisterType((*BetAck)(nil), "protocol.BetAck")
	proto.RegisterType((*UserBetAck)(nil), "protocol.UserBetAck")
	proto.RegisterType((*OpenBetAck)(nil), "protocol.OpenBetAck")
	proto.RegisterType((*StopBetAck)(nil), "protocol.StopBetAck")
	proto.RegisterType((*GameResult)(nil), "protocol.GameResult")
	proto.RegisterType((*GameDealAck)(nil), "protocol.GameDealAck")
	proto.RegisterType((*LeaveReq)(nil), "protocol.LeaveReq")
	proto.RegisterType((*LeaveAck)(nil), "protocol.LeaveAck")
}

func init() { proto.RegisterFile("folks.proto", fileDescriptor_ce9fde347a341b29) }

var fileDescriptor_ce9fde347a341b29 = []byte{
	// 1314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0xcb, 0x6f, 0x1c, 0xc5,
	0x13, 0xc7, 0x3d, 0x3b, 0xbb, 0xf6, 0xa6, 0x37, 0x8f, 0x4d, 0x2b, 0x8a, 0xe6, 0x17, 0xfd, 0xe4,
	0x59, 0xb5, 0x10, 0x5a, 0x9c, 0xc4, 0x16, 0x06, 0x11, 0xc4, 0x69, 0x63, 0x10, 0x28, 0xe2, 0xdd,
	0x88, 0x0b, 0xb7, 0x99, 0x9d, 0xde, 0xf5, 0x78, 0x67, 0xa7, 0x97, 0x79, 0x78, 0x37, 0x47, 0xb8,
	0xf1, 0x0a, 0xe1, 0xc6, 0x1d, 0xf1, 0xa7, 0x20, 0x71, 0x23, 0x47, 0x4e, 0x23, 0x94, 0x5c, 0x90,
	0xc5, 0xc9, 0xe2, 0xc6, 0x05, 0x55, 0x75, 0xb7, 0x67, 0x26, 0xbb, 0x72, 0x6c, 0x24, 0x24, 0x4e,
	0xee, 0xa9, 0xfd, 0xcc, 0xd7, 0xd5, 0xd5, 0x55, 0x5d, 0x35, 0xa4, 0x33, 0x92, 0xd1, 0x24, 0xdd,
	0x9e, 0x25, 0x32, 0x93, 0xb4, 0x8d, 0x7f, 0x86, 0x32, 0xba, 0x71, 0x7b, 0x1c, 0x66, 0xfb, 0xb9,
	0xbf, 0x3d, 0x94, 0xd3, 0x9d, 0xb1, 0x1c, 0xcb, 0x1d, 0xfc, 0xc5, 0xcf, 0x47, 0xf8, 0x84, 0x0f,
	0xb8, 0x52, 0x2f, 0xb2, 0x5f, 0x2c, 0xd2, 0x7a, 0x13, 0x84, 0xd8, 0x4f, 0x16, 0x69, 0xbe, 0x2e,
	0x03, 0x41, 0xdb, 0xa4, 0xf9, 0x9e, 0x8c, 0x45, 0x77, 0x8d, 0x5e, 0x25, 0x17, 0xb9, 0xf0, 0x82,
	0xfb, 0x6f, 0x79, 0x53, 0xc1, 0xc5, 0xa7, 0xdd, 0xcf, 0x06, 0x35, 0xd3, 0xdd, 0xe1, 0xa4, 0xfb,
	0xf9, 0x80, 0x76, 0xc8, 0xfa, 0x9e, 0xc8, 0xe0, 0xf7, 0x2f, 0xcc, 0x03, 0xfc, 0xf2, 0xe5, 0x80,
	0x76, 0x49, 0x07, 0xb8, 0x7b, 0x71, 0x88, 0x96, 0xaf, 0x06, 0xf4, 0x0a, 0x21, 0x1f, 0xa7, 0x22,
	0xd1, 0xc8, 0xd7, 0x68, 0x78, 0x7f, 0x26, 0x62, 0x6d, 0xf8, 0x06, 0x0d, 0x1f, 0x65, 0x72, 0xa6,
	0x0d, 0x0f, 0x4e, 0x44, 0xde, 0x10, 0x5e, 0x04, 0x96, 0x6f, 0x07, 0xf4, 0x12, 0x69, 0xbf, 0x23,
	0xbc, 0x43, 0x74, 0xe9, 0x61, 0xf9, 0x08, 0xbf, 0x7e, 0x37, 0x60, 0x7f, 0x58, 0x64, 0xfd, 0x83,
	0xc8, 0xbb, 0x2f, 0x12, 0xfa, 0x3c, 0x69, 0x84, 0x81, 0x63, 0xf5, 0xac, 0x7e, 0x6b, 0xef, 0xfa,
	0x71, 0xe1, 0x52, 0x3f, 0x95, 0xf1, 0x6b, 0x2c, 0x0c, 0x58, 0x6f, 0x9a, 0x8e, 0x71, 0xc1, 0x1b,
	0x61, 0x40, 0xb7, 0x49, 0x33, 0x1c, 0xca, 0xd8, 0x69, 0x20, 0x79, 0xe3, 0xb8, 0x70, 0xaf, 0x6b,
	0x72, 0x28, 0x63, 0xc3, 0xc2, 0x92, 0x23, 0x47, 0xb7, 0x88, 0x7d, 0x18, 0xce, 0x1c, 0x1b, 0x71,
	0xe7, 0xb8, 0x70, 0xaf, 0x29, 0xfc, 0x30, 0x9c, 0x69, 0x1a, 0x56, 0x1c, 0x20, 0xd0, 0x1e, 0xca,
	0x30, 0x76, 0x9a, 0x3d, 0xab, 0x6f, 0x57, 0xb5, 0xc1, 0xaa, 0x69, 0x5c, 0x72, 0xe4, 0x80, 0x8f,
	0xbd, 0xa9, 0x70, 0x5a, 0x3d, 0xab, 0x7f, 0xa1, 0xca, 0x83, 0x55, 0xf3, 0xb8, 0xe4, 0xc8, 0xb1,
	0x1f, 0x6d, 0xd2, 0x86, 0xf8, 0xec, 0x85, 0x51, 0x44, 0x6f, 0x12, 0x3b, 0x3f, 0xd9, 0xf1, 0xff,
	0x8e, 0x0a, 0xd7, 0xca, 0x8f, 0x0b, 0xb7, 0xab, 0x04, 0x72, 0xfd, 0x76, 0xce, 0x38, 0x50, 0xf4,
	0xb6, 0xf6, 0xac, 0x81, 0x9e, 0x21, 0x3d, 0x2c, 0xe9, 0xa1, 0xf1, 0xcd, 0x38, 0x76, 0x93, 0xd8,
	0xbe, 0xc8, 0x70, 0xd3, 0x9a, 0xf6, 0x4b, 0xda, 0xd7, 0xb4, 0xcf, 0x38, 0x50, 0x74, 0x87, 0xb4,
	0xc6, 0x89, 0xcc, 0x67, 0x4e, 0xb3, 0x67, 0x1b, 0x7c, 0x5c, 0xe2, 0x63, 0x8d, 0x8f, 0x19, 0x57,
	0x1c, 0xbd, 0x47, 0xec, 0x79, 0x18, 0xe3, 0xae, 0xe9, 0xde, 0x9d, 0xa3, 0xc2, 0xed, 0xcc, 0x6f,
	0xc9, 0x69, 0x98, 0x89, 0xe9, 0x2c, 0xbb, 0x7f, 0x5c, 0xb8, 0xcf, 0xa9, 0x17, 0x2b, 0x46, 0x2d,
	0x51, 0xb5, 0x70, 0xd0, 0x00, 0xa9, 0xcc, 0x5b, 0x38, 0xeb, 0xe8, 0x28, 0x4a, 0x2d, 0x56, 0x49,
	0x2d, 0x96, 0xa4, 0x16, 0x35, 0xa9, 0xcc, 0x5b, 0x80, 0xd4, 0x81, 0xf4, 0x9d, 0x0d, 0x8c, 0x27,
	0x4a, 0x1d, 0xac, 0x92, 0x3a, 0x58, 0x92, 0x3a, 0xa8, 0x49, 0x1d, 0x48, 0x9f, 0xfd, 0xb9, 0x41,
	0x2e, 0x60, 0x1d, 0xc9, 0x3c, 0x0e, 0xe8, 0x0b, 0x27, 0x99, 0xa9, 0x83, 0x13, 0x96, 0xc1, 0x09,
	0x4d, 0xc6, 0xa9, 0xe4, 0xdc, 0x21, 0xad, 0x34, 0xf3, 0x92, 0xac, 0x7a, 0x4e, 0x69, 0x49, 0xa7,
	0x9a, 0x4e, 0x19, 0x57, 0x1c, 0x1c, 0x94, 0x88, 0x83, 0xea, 0x41, 0x89, 0x12, 0x37, 0x29, 0x24,
	0x18, 0x07, 0x0a, 0x92, 0x20, 0x91, 0x72, 0x8a, 0xe9, 0xa9, 0x53, 0x26, 0x29, 0xe9, 0x44, 0xd3,
	0x09, 0xe3, 0x88, 0xa9, 0xd8, 0xfa, 0x78, 0x4c, 0x3a, 0x20, 0xd9, 0xaa, 0x80, 0x64, 0x4b, 0x01,
	0xc9, 0x9e, 0x8a, 0xad, 0x4f, 0xef, 0x92, 0xa6, 0x1f, 0x46, 0x91, 0xb3, 0xde, 0xb3, 0xfb, 0x9d,
	0x5d, 0xba, 0x6d, 0x6e, 0xb0, 0x6d, 0x93, 0xcd, 0xa7, 0x25, 0x19, 0xbe, 0x0a, 0xce, 0x8f, 0x22,
	0x39, 0x77, 0x36, 0x7a, 0xb6, 0x71, 0x7e, 0x54, 0xe2, 0x23, 0x8d, 0x8f, 0x18, 0x47, 0xac, 0x4c,
	0xca, 0xf6, 0x19, 0x93, 0x72, 0x87, 0xb4, 0x66, 0x72, 0x22, 0x12, 0xe7, 0x42, 0xcf, 0xea, 0x5f,
	0x54, 0x2f, 0xcc, 0xca, 0x17, 0x4c, 0xb1, 0xcf, 0x18, 0x57, 0x1c, 0x38, 0x24, 0x83, 0x20, 0x75,
	0x48, 0xcf, 0xee, 0x5f, 0x55, 0xbc, 0x2c, 0x79, 0xa9, 0x79, 0xc9, 0x38, 0x62, 0x70, 0x52, 0x90,
	0xa9, 0x9d, 0xf2, 0xa4, 0x16, 0x25, 0xbd, 0x30, 0x59, 0xa9, 0x73, 0xf1, 0xa6, 0xaa, 0x90, 0x8b,
	0x58, 0x21, 0x08, 0xcf, 0x4b, 0x78, 0x6e, 0xaa, 0x41, 0xd7, 0xc0, 0xdb, 0xa4, 0x19, 0xcb, 0x4c,
	0x38, 0x97, 0xf0, 0x16, 0xc1, 0x83, 0x8a, 0x57, 0x1d, 0x54, 0xbc, 0x74, 0x50, 0x55, 0x0b, 0x47,
	0x11, 0x10, 0x4b, 0xc2, 0xe1, 0xbe, 0x73, 0x19, 0xc3, 0x8c, 0x62, 0xfb, 0xab, 0xc4, 0xf6, 0x97,
	0xc4, 0xf6, 0x6b, 0x62, 0x20, 0x42, 0x3f, 0x24, 0x1b, 0xb9, 0xea, 0x00, 0xce, 0x15, 0x3c, 0x06,
	0xd4, 0xcb, 0x57, 0xe9, 0xe5, 0x4b, 0x7a, 0x55, 0x0b, 0x37, 0x3a, 0xe0, 0x9f, 0xef, 0xc5, 0x13,
	0xa7, 0x5b, 0x66, 0xe5, 0x64, 0x95, 0xde, 0x64, 0x49, 0x6f, 0x52, 0xf3, 0x0f, 0x44, 0xe8, 0xbb,
	0xa4, 0x35, 0xdc, 0x17, 0x5e, 0xe6, 0x5c, 0xed, 0x59, 0xfd, 0xb6, 0x52, 0x3b, 0x5c, 0xa5, 0x76,
	0xb8, 0xa4, 0x56, 0xb5, 0x70, 0xa5, 0xc2, 0xfe, 0xb2, 0x6b, 0x3d, 0x90, 0xee, 0x92, 0x56, 0xe6,
	0xf9, 0x91, 0xd0, 0x77, 0xf4, 0xff, 0x8f, 0x0b, 0xd7, 0xd1, 0x35, 0x03, 0x66, 0x53, 0x2d, 0xb8,
	0xe6, 0x0a, 0xd5, 0x6d, 0xac, 0xf1, 0xcc, 0x36, 0xb6, 0x8b, 0x37, 0x45, 0x26, 0x74, 0x63, 0xaa,
	0x68, 0xa3, 0xd9, 0x5c, 0x14, 0xb8, 0xe6, 0x0a, 0x85, 0x76, 0x93, 0x85, 0x53, 0xa1, 0xeb, 0xbf,
	0xd2, 0x6e, 0xc0, 0x6a, 0xbc, 0x09, 0xb1, 0xdd, 0xc0, 0x1f, 0x3a, 0xd0, 0xb9, 0xd0, 0xc2, 0xaa,
	0xed, 0x96, 0x55, 0xab, 0x5a, 0x6e, 0x55, 0x01, 0x38, 0x73, 0x7f, 0xc0, 0x52, 0x27, 0xc0, 0x16,
	0xb1, 0xd3, 0x7c, 0x8a, 0x65, 0x6f, 0x57, 0x9b, 0x67, 0x9a, 0x4f, 0x8d, 0x87, 0xf9, 0x94, 0x71,
	0x80, 0x80, 0x85, 0x9e, 0xb3, 0xf1, 0x34, 0xeb, 0x8b, 0xcc, 0xdc, 0x05, 0x22, 0xd3, 0x2d, 0x67,
	0x8b, 0xd8, 0x91, 0x1c, 0x3b, 0x6d, 0x2c, 0xd5, 0x0a, 0x1b, 0x49, 0x53, 0xd8, 0xb0, 0xe2, 0x00,
	0xd1, 0x91, 0xce, 0x18, 0xa8, 0xeb, 0x55, 0xbb, 0x18, 0x1c, 0x15, 0xee, 0x65, 0x20, 0x6a, 0x07,
	0xbf, 0xa5, 0xff, 0x79, 0xcd, 0x6e, 0xfc, 0xa8, 0x1b, 0x55, 0x32, 0xb1, 0xef, 0x2d, 0x33, 0x1b,
	0xd1, 0x5b, 0xa4, 0x91, 0xc6, 0xe6, 0xd4, 0x8f, 0x0a, 0xb7, 0x91, 0xc6, 0xe5, 0x51, 0xa6, 0x66,
	0x12, 0x48, 0x63, 0xc6, 0x1b, 0x69, 0x0c, 0x17, 0x09, 0x48, 0xe9, 0x43, 0x3f, 0xa5, 0x43, 0x20,
	0x46, 0x5f, 0x2c, 0x7b, 0x73, 0x6b, 0xcf, 0x3d, 0x2a, 0x5c, 0x78, 0x3c, 0x35, 0x5c, 0xec, 0x91,
	0x65, 0x26, 0xb5, 0xff, 0x9a, 0x6b, 0xf4, 0x95, 0xda, 0xc8, 0xc4, 0x8e, 0x0a, 0x17, 0x9f, 0x9f,
	0x35, 0x3a, 0xb1, 0x83, 0xea, 0x70, 0x79, 0x92, 0xd9, 0xd6, 0x19, 0x33, 0xfb, 0x96, 0x72, 0xb4,
	0x81, 0x97, 0x5c, 0x75, 0x06, 0xcc, 0x84, 0x49, 0x4c, 0x5c, 0xaa, 0xf0, 0x3d, 0x68, 0x54, 0x07,
	0xd7, 0xf3, 0x4c, 0x9a, 0xe8, 0x54, 0xe3, 0x9c, 0xe5, 0x66, 0xff, 0xe3, 0x72, 0x33, 0xa9, 0xde,
	0xfc, 0x97, 0x53, 0xfd, 0xe5, 0xea, 0xdc, 0x5e, 0x89, 0x87, 0x7d, 0x5a, 0x3c, 0xd8, 0xef, 0x16,
	0x21, 0xea, 0xeb, 0x22, 0xcd, 0xa3, 0xec, 0xcc, 0x61, 0xdc, 0x32, 0x8d, 0xb9, 0x81, 0xd5, 0x7e,
	0xed, 0xb4, 0x9e, 0xbc, 0x45, 0x6c, 0x19, 0x04, 0x38, 0x88, 0xd6, 0x86, 0x75, 0x19, 0x18, 0x55,
	0x58, 0x71, 0x80, 0xcc, 0xdd, 0xd4, 0x3a, 0xcb, 0xdd, 0xb4, 0xad, 0x8f, 0x06, 0x2e, 0x32, 0xfa,
	0xec, 0x83, 0x60, 0x3f, 0x58, 0xb5, 0x0f, 0x19, 0xfa, 0x2a, 0xb1, 0x12, 0xdc, 0x6a, 0x67, 0xf7,
	0x5a, 0x7d, 0xf8, 0x51, 0xc1, 0xa8, 0xee, 0xaa, 0x32, 0x87, 0x59, 0xb8, 0xa3, 0xb9, 0x9e, 0xdb,
	0x69, 0xd5, 0xcb, 0xf9, 0x49, 0x55, 0xc0, 0x4a, 0x0d, 0x02, 0xe6, 0xf3, 0xc3, 0x3e, 0xdb, 0xe7,
	0x07, 0xbb, 0x53, 0x7e, 0x5b, 0x9d, 0xeb, 0x6b, 0xe2, 0xe4, 0x45, 0xd8, 0xda, 0x79, 0x5e, 0xdc,
	0x73, 0x7f, 0x7e, 0xbc, 0x69, 0x3d, 0x7a, 0xbc, 0x69, 0xfd, 0xf6, 0x78, 0xd3, 0x7a, 0xf8, 0x64,
	0x73, 0xed, 0xd1, 0x93, 0xcd, 0xb5, 0x5f, 0x9f, 0x6c, 0xae, 0x7d, 0xd2, 0xc2, 0x2f, 0x5c, 0x7f,
	0x1d, 0x83, 0xf3, 0xd2, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7b, 0x73, 0x38, 0x4b, 0xf1, 0x0e,
	0x00, 0x00,
}

func (m *Folks) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Folks) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	if m.Icon != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Icon))
	}
	if m.Vip != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Vip))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Coin))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *GameBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBill) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Uid))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Coin))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bet))
	}
	if len(m.Group) > 0 {
		dAtA2 := make([]byte, len(m.Group)*10)
		var j1 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Win != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFolks(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
	}
	if m.Tax != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Tax))
	}
	if m.Job != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Job))
	}
	return i, nil
}

func (m *GameRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.End))
	}
	if m.Room != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Room))
	}
	if m.Tab != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, msg := range m.Bill {
			dAtA[i] = 0x32
			i++
			i = encodeVarintFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Flow) > 0 {
		dAtA4 := make([]byte, len(m.Flow)*10)
		var j3 int
		for _, num1 := range m.Flow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j3))
		i += copy(dAtA[i:], dAtA4[:j3])
	}
	if len(m.Group) > 0 {
		dAtA6 := make([]byte, len(m.Group)*10)
		var j5 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		dAtA[i] = 0x42
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j5))
		i += copy(dAtA[i:], dAtA6[:j5])
	}
	if len(m.Poker) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(len(m.Poker)))
		i += copy(dAtA[i:], m.Poker)
	}
	if len(m.Odds) > 0 {
		dAtA7 := make([]byte, len(m.Odds)*5)
		var j8 int
		for _, num := range m.Odds {
			x9 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x9 >= 1<<7 {
				dAtA7[j8] = uint8(uint64(x9)&0x7f | 0x80)
				j8++
				x9 >>= 7
			}
			dAtA7[j8] = uint8(x9)
			j8++
		}
		dAtA[i] = 0x52
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA7[:j8])
	}
	if m.Tax != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Tax))
	}
	if m.Win != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintFolks(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
	}
	if len(m.Note) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(len(m.Note)))
		i += copy(dAtA[i:], m.Note)
	}
	if len(m.Rich) > 0 {
		dAtA11 := make([]byte, len(m.Rich)*10)
		var j10 int
		for _, num1 := range m.Rich {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		dAtA[i] = 0x72
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j10))
		i += copy(dAtA[i:], dAtA11[:j10])
	}
	if len(m.UserBet) > 0 {
		dAtA13 := make([]byte, len(m.UserBet)*10)
		var j12 int
		for _, num1 := range m.UserBet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		dAtA[i] = 0x7a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j12))
		i += copy(dAtA[i:], dAtA13[:j12])
	}
	if m.Bank != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bank))
	}
	if m.Cheat {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.Cheat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *GameInitAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInitAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Table != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Table))
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	if m.State != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.State))
	}
	if m.Time != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Time))
	}
	if len(m.Rich) > 0 {
		for _, msg := range m.Rich {
			dAtA[i] = 0x2a
			i++
			i = encodeVarintFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sum) > 0 {
		dAtA15 := make([]byte, len(m.Sum)*10)
		var j14 int
		for _, num1 := range m.Sum {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA15[j14] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j14++
			}
			dAtA15[j14] = uint8(num)
			j14++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j14))
		i += copy(dAtA[i:], dAtA15[:j14])
	}
	if len(m.Bet) > 0 {
		dAtA17 := make([]byte, len(m.Bet)*10)
		var j16 int
		for _, num1 := range m.Bet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA17[j16] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j16++
			}
			dAtA17[j16] = uint8(num)
			j16++
		}
		dAtA[i] = 0x3a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j16))
		i += copy(dAtA[i:], dAtA17[:j16])
	}
	if len(m.Log) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintFolks(dAtA, i, uint64(len(m.Log)))
		i += copy(dAtA[i:], m.Log)
	}
	if m.Bank != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bank.Size()))
		n18, err18 := m.Bank.MarshalTo(dAtA[i:])
		if err18 != nil {
			return 0, err18
		}
		i += n18
	}
	return i, nil
}

func (m *BetReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Sn))
	}
	if m.Item != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Item))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bet))
	}
	return i, nil
}

func (m *BetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sn != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Sn))
	}
	if m.Item != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Item))
	}
	if m.Bet != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bet))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *UserBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Time))
	}
	if len(m.Bet) > 0 {
		dAtA20 := make([]byte, len(m.Bet)*10)
		var j19 int
		for _, num1 := range m.Bet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *OpenBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OpenBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	if m.Time != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Time))
	}
	if len(m.Rich) > 0 {
		for _, msg := range m.Rich {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintFolks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Bank != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Bank.Size()))
		n21, err21 := m.Bank.MarshalTo(dAtA[i:])
		if err21 != nil {
			return 0, err21
		}
		i += n21
	}
	return i, nil
}

func (m *StopBetAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StopBetAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *GameResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Id))
	}
	if len(m.Poker) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFolks(dAtA, i, uint64(len(m.Poker)))
		i += copy(dAtA[i:], m.Poker)
	}
	if len(m.Odd) > 0 {
		dAtA23 := make([]byte, len(m.Odd)*10)
		var j22 int
		for _, num1 := range m.Odd {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA23[j22] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j22++
			}
			dAtA23[j22] = uint8(num)
			j22++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j22))
		i += copy(dAtA[i:], dAtA23[:j22])
	}
	if len(m.Sum) > 0 {
		dAtA25 := make([]byte, len(m.Sum)*10)
		var j24 int
		for _, num1 := range m.Sum {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA25[j24] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j24++
			}
			dAtA25[j24] = uint8(num)
			j24++
		}
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j24))
		i += copy(dAtA[i:], dAtA25[:j24])
	}
	if len(m.Rich) > 0 {
		var j26 int
		dAtA28 := make([]byte, len(m.Rich)*10)
		for _, num := range m.Rich {
			x27 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x27 >= 1<<7 {
				dAtA28[j26] = uint8(uint64(x27)&0x7f | 0x80)
				j26++
				x27 >>= 7
			}
			dAtA28[j26] = uint8(x27)
			j26++
		}
		dAtA[i] = 0x32
		i++
		i = encodeVarintFolks(dAtA, i, uint64(j26))
		i += copy(dAtA[i:], dAtA28[:j26])
	}
	return i, nil
}

func (m *GameDealAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameDealAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.R != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.R.Size()))
		n29, err29 := m.R.MarshalTo(dAtA[i:])
		if err29 != nil {
			return 0, err29
		}
		i += n29
	}
	if m.Win != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFolks(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
	}
	if m.Coin != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Coin))
	}
	return i, nil
}

func (m *LeaveReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func (m *LeaveAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaveAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFolks(dAtA, i, uint64(m.Uid))
	}
	return i, nil
}

func encodeVarintFolks(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Folks) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	if m.Icon != 0 {
		n += 1 + sovFolks(uint64(m.Icon))
	}
	if m.Vip != 0 {
		n += 1 + sovFolks(uint64(m.Vip))
	}
	if m.Coin != 0 {
		n += 1 + sovFolks(uint64(m.Coin))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFolks(uint64(l))
	}
	return n
}

func (m *GameBill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFolks(uint64(m.Uid))
	}
	if m.Coin != 0 {
		n += 1 + sovFolks(uint64(m.Coin))
	}
	if m.Bet != 0 {
		n += 1 + sovFolks(uint64(m.Bet))
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if m.Win != 0 {
		n += 1 + sozFolks(uint64(m.Win))
	}
	if m.Tax != 0 {
		n += 1 + sovFolks(uint64(m.Tax))
	}
	if m.Job != 0 {
		n += 1 + sovFolks(uint64(m.Job))
	}
	return n
}

func (m *GameRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	if m.Start != 0 {
		n += 1 + sovFolks(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovFolks(uint64(m.End))
	}
	if m.Room != 0 {
		n += 1 + sovFolks(uint64(m.Room))
	}
	if m.Tab != 0 {
		n += 1 + sovFolks(uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, e := range m.Bill {
			l = e.Size()
			n += 1 + l + sovFolks(uint64(l))
		}
	}
	if len(m.Flow) > 0 {
		l = 0
		for _, e := range m.Flow {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovFolks(uint64(l))
	}
	if len(m.Odds) > 0 {
		l = 0
		for _, e := range m.Odds {
			l += sozFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if m.Tax != 0 {
		n += 1 + sovFolks(uint64(m.Tax))
	}
	if m.Win != 0 {
		n += 1 + sozFolks(uint64(m.Win))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovFolks(uint64(l))
	}
	if len(m.Rich) > 0 {
		l = 0
		for _, e := range m.Rich {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if len(m.UserBet) > 0 {
		l = 0
		for _, e := range m.UserBet {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if m.Bank != 0 {
		n += 2 + sovFolks(uint64(m.Bank))
	}
	if m.Cheat {
		n += 3
	}
	return n
}

func (m *GameInitAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Table != 0 {
		n += 1 + sovFolks(uint64(m.Table))
	}
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	if m.State != 0 {
		n += 1 + sovFolks(uint64(m.State))
	}
	if m.Time != 0 {
		n += 1 + sovFolks(uint64(m.Time))
	}
	if len(m.Rich) > 0 {
		for _, e := range m.Rich {
			l = e.Size()
			n += 1 + l + sovFolks(uint64(l))
		}
	}
	if len(m.Sum) > 0 {
		l = 0
		for _, e := range m.Sum {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if len(m.Bet) > 0 {
		l = 0
		for _, e := range m.Bet {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovFolks(uint64(l))
	}
	if m.Bank != nil {
		l = m.Bank.Size()
		n += 1 + l + sovFolks(uint64(l))
	}
	return n
}

func (m *BetReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sn != 0 {
		n += 1 + sovFolks(uint64(m.Sn))
	}
	if m.Item != 0 {
		n += 1 + sovFolks(uint64(m.Item))
	}
	if m.Bet != 0 {
		n += 1 + sovFolks(uint64(m.Bet))
	}
	return n
}

func (m *BetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sn != 0 {
		n += 1 + sovFolks(uint64(m.Sn))
	}
	if m.Item != 0 {
		n += 1 + sovFolks(uint64(m.Item))
	}
	if m.Bet != 0 {
		n += 1 + sovFolks(uint64(m.Bet))
	}
	if m.Coin != 0 {
		n += 1 + sovFolks(uint64(m.Coin))
	}
	return n
}

func (m *UserBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovFolks(uint64(m.Time))
	}
	if len(m.Bet) > 0 {
		l = 0
		for _, e := range m.Bet {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	return n
}

func (m *OpenBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	if m.Time != 0 {
		n += 1 + sovFolks(uint64(m.Time))
	}
	if len(m.Rich) > 0 {
		for _, e := range m.Rich {
			l = e.Size()
			n += 1 + l + sovFolks(uint64(l))
		}
	}
	if m.Bank != nil {
		l = m.Bank.Size()
		n += 1 + l + sovFolks(uint64(l))
	}
	return n
}

func (m *StopBetAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	return n
}

func (m *GameResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolks(uint64(m.Id))
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovFolks(uint64(l))
	}
	if len(m.Odd) > 0 {
		l = 0
		for _, e := range m.Odd {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if len(m.Sum) > 0 {
		l = 0
		for _, e := range m.Sum {
			l += sovFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	if len(m.Rich) > 0 {
		l = 0
		for _, e := range m.Rich {
			l += sozFolks(uint64(e))
		}
		n += 1 + sovFolks(uint64(l)) + l
	}
	return n
}

func (m *GameDealAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.R != nil {
		l = m.R.Size()
		n += 1 + l + sovFolks(uint64(l))
	}
	if m.Win != 0 {
		n += 1 + sozFolks(uint64(m.Win))
	}
	if m.Coin != 0 {
		n += 1 + sovFolks(uint64(m.Coin))
	}
	return n
}

func (m *LeaveReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFolks(uint64(m.Uid))
	}
	return n
}

func (m *LeaveAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFolks(uint64(m.Uid))
	}
	return n
}

func sovFolks(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFolks(x uint64) (n int) {
	return sovFolks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Folks) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Folks: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Folks: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bill = append(m.Bill, &GameBill{})
			if err := m.Bill[len(m.Bill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flow = append(m.Flow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flow) == 0 {
					m.Flow = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flow = append(m.Flow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Odds = append(m.Odds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Odds) == 0 {
					m.Odds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Odds = append(m.Odds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rich = append(m.Rich, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rich) == 0 {
					m.Rich = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rich = append(m.Rich, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserBet = append(m.UserBet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserBet) == 0 {
					m.UserBet = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserBet = append(m.UserBet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBet", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			m.Bank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cheat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cheat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInitAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInitAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInitAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			m.Table = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Table |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rich = append(m.Rich, &Player{})
			if err := m.Rich[len(m.Rich)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sum = append(m.Sum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sum) == 0 {
					m.Sum = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sum = append(m.Sum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
		case 7:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bet = append(m.Bet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bet) == 0 {
					m.Bet = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bet = append(m.Bet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log[:0], dAtA[iNdEx:postIndex]...)
			if m.Log == nil {
				m.Log = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bank == nil {
				m.Bank = &Player{}
			}
			if err := m.Bank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			m.Sn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Item", wireType)
			}
			m.Item = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Item |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bet = append(m.Bet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bet) == 0 {
					m.Bet = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bet = append(m.Bet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OpenBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OpenBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OpenBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rich = append(m.Rich, &Player{})
			if err := m.Rich[len(m.Rich)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bank == nil {
				m.Bank = &Player{}
			}
			if err := m.Bank.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StopBetAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StopBetAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StopBetAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Odd = append(m.Odd, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Odd) == 0 {
					m.Odd = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Odd = append(m.Odd, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odd", wireType)
			}
		case 5:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Sum = append(m.Sum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Sum) == 0 {
					m.Sum = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Sum = append(m.Sum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Rich = append(m.Rich, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolks
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolks
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rich) == 0 {
					m.Rich = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolks
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Rich = append(m.Rich, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameDealAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameDealAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameDealAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field R", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolks
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolks
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.R == nil {
				m.R = &GameResult{}
			}
			if err := m.R.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaveAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaveAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaveAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFolks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFolks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFolks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFolks
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFolks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFolks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFolks(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFolks
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFolks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFolks   = fmt.Errorf("proto: integer overflow")
)
