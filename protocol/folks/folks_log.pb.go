// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: folks_log.proto

package folks

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 用户日志(龙虎/红黑/百家乐/骰宝)
type GameBill struct {
	// 玩家ID(u有建立索引，不要更改名称)
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
	// 开始游戏时带的钱
	Coin int64 `protobuf:"varint,2,opt,name=coin,proto3" json:"c" bson:"c" msg:"c"`
	// 投注总额
	Bet int64 `protobuf:"varint,3,opt,name=bet,proto3" json:"b" bson:"b" msg:"b"`
	// 玩家投注分组(0:龙赢,1:虎赢,2:和)
	Group []int64 `protobuf:"varint,4,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 输赢情况
	Win int64 `protobuf:"zigzag64,5,opt,name=win,proto3" json:"w,omitempty" bson:"w,omitempty" msg:"w,omitempty"`
	// 税收
	Tax int64 `protobuf:"varint,6,opt,name=tax,proto3" json:"x,omitempty" bson:"x,omitempty" msg:"x,omitempty"`
	// 玩家类型
	Job int32 `protobuf:"varint,7,opt,name=job,proto3" json:"j,omitempty" bson:"j,omitempty" msg:"j,omitempty"`
}

func (m *GameBill) Reset()         { *m = GameBill{} }
func (m *GameBill) String() string { return proto.CompactTextString(m) }
func (*GameBill) ProtoMessage()    {}
func (*GameBill) Descriptor() ([]byte, []int) {
	return fileDescriptor_63d07aad1698a57b, []int{0}
}
func (m *GameBill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBill.Merge(m, src)
}
func (m *GameBill) XXX_Size() int {
	return m.Size()
}
func (m *GameBill) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBill.DiscardUnknown(m)
}

var xxx_messageInfo_GameBill proto.InternalMessageInfo

func (m *GameBill) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GameBill) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *GameBill) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *GameBill) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GameBill) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameBill) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameBill) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

// 百人游戏日志(龙虎/红黑/百家乐/骰宝)
type GameRound struct {
	// 全局唯一游戏ID(i有建立索引，不要更改名称)
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"i" bson:"i" msg:"i"`
	// 游戏开始时间(s有建立索引，不要更改名称)
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"s" bson:"s" msg:"s"`
	// 游戏结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"e" bson:"e" msg:"e"`
	// 房间ID
	Room int32 `protobuf:"varint,4,opt,name=room,proto3" json:"r" bson:"r" msg:"r"`
	// 桌子ID
	Tab int32 `protobuf:"varint,5,opt,name=tab,proto3" json:"t,omitempty" bson:"t,omitempty" msg:"t,omitempty"`
	// 所有玩家下注汇总(b.u有建立索引，不要更改名称)
	Bill []*GameBill `protobuf:"bytes,6,rep,name=bill,proto3" json:"b" bson:"b" msg:"b"`
	// 下注情况(protocol.Bet三个字段顺序压入)
	Flow []int32 `protobuf:"varint,7,rep,packed,name=flow,proto3" json:"f" bson:"f" msg:"f"`
	// 所有玩家投注分组
	Group []int64 `protobuf:"varint,8,rep,packed,name=group,proto3" json:"g" bson:"g" msg:"g"`
	// 发牌情况
	Poker []byte `protobuf:"bytes,9,opt,name=poker,proto3" json:"p" bson:"p" msg:"p"`
	// 赔付情况
	Odds []int32 `protobuf:"zigzag32,10,rep,packed,name=odds,proto3" json:"o" bson:"o" msg:"o"`
	// 系统税收
	Tax int64 `protobuf:"varint,11,opt,name=tax,proto3" json:"x" bson:"x" msg:"x"`
	// 本局所有真实玩家的输赢
	Win int64 `protobuf:"zigzag64,12,opt,name=win,proto3" json:"w" bson:"w" msg:"w"`
	// 备注
	Note string `protobuf:"bytes,13,opt,name=note,proto3" json:"n,omitempty" bson:"n,omitempty" msg:"n,omitempty"`
	// 富豪(第1个位置为赌神后面5个为富豪ID)
	Rich []int32 `protobuf:"varint,14,rep,packed,name=rich,proto3" json:"h,omitempty" bson:"h,omitempty" msg:"h,omitempty"`
	// 真实玩家下注分组
	UserBet []int64 `protobuf:"varint,15,rep,packed,name=userBet,proto3" json:"u,omitempty" bson:"u,omitempty" msg:"u,omitempty"`
	// 庄家ID，0为系统
	Bank int32 `protobuf:"varint,16,opt,name=bank,proto3" json:"k,omitempty" bson:"k,omitempty" msg:"k,omitempty"`
	// 系统必赢
	Cheat bool `protobuf:"varint,17,opt,name=cheat,proto3" json:"v,omitempty" bson:"v,omitempty" msg:"v,omitempty"`
}

func (m *GameRound) Reset()         { *m = GameRound{} }
func (m *GameRound) String() string { return proto.CompactTextString(m) }
func (*GameRound) ProtoMessage()    {}
func (*GameRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_63d07aad1698a57b, []int{1}
}
func (m *GameRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRound.Merge(m, src)
}
func (m *GameRound) XXX_Size() int {
	return m.Size()
}
func (m *GameRound) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRound.DiscardUnknown(m)
}

var xxx_messageInfo_GameRound proto.InternalMessageInfo

func (m *GameRound) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRound) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GameRound) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GameRound) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *GameRound) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *GameRound) GetBill() []*GameBill {
	if m != nil {
		return m.Bill
	}
	return nil
}

func (m *GameRound) GetFlow() []int32 {
	if m != nil {
		return m.Flow
	}
	return nil
}

func (m *GameRound) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *GameRound) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *GameRound) GetOdds() []int32 {
	if m != nil {
		return m.Odds
	}
	return nil
}

func (m *GameRound) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameRound) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameRound) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *GameRound) GetRich() []int32 {
	if m != nil {
		return m.Rich
	}
	return nil
}

func (m *GameRound) GetUserBet() []int64 {
	if m != nil {
		return m.UserBet
	}
	return nil
}

func (m *GameRound) GetBank() int32 {
	if m != nil {
		return m.Bank
	}
	return 0
}

func (m *GameRound) GetCheat() bool {
	if m != nil {
		return m.Cheat
	}
	return false
}

func init() {
	proto.RegisterType((*GameBill)(nil), "protocol.GameBill")
	proto.RegisterType((*GameRound)(nil), "protocol.GameRound")
}

func init() { proto.RegisterFile("folks_log.proto", fileDescriptor_63d07aad1698a57b) }

var fileDescriptor_63d07aad1698a57b = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0xeb, 0x3a, 0x69, 0xd2, 0x6b, 0xa1, 0xad, 0xa7, 0x83, 0x21, 0xb1, 0x4e, 0x0c, 0x46,
	0xa5, 0x89, 0x04, 0x03, 0x12, 0x1b, 0x59, 0x10, 0x42, 0x0c, 0xdc, 0xc8, 0x82, 0x72, 0x8e, 0xe3,
	0x38, 0xb1, 0x7d, 0x96, 0x7d, 0x6e, 0xcc, 0xb7, 0xe0, 0x4b, 0xf0, 0x5d, 0x18, 0x3b, 0x32, 0x45,
	0xa8, 0xdd, 0x3a, 0x56, 0x7c, 0x00, 0x74, 0xef, 0xce, 0x3a, 0x07, 0x5b, 0x88, 0xc9, 0xf1, 0xe5,
	0xf7, 0x7e, 0x7a, 0x7a, 0xff, 0x77, 0x32, 0x3a, 0x5b, 0xf2, 0x78, 0x53, 0x7c, 0x89, 0x79, 0x38,
	0xc9, 0x72, 0x2e, 0xb8, 0x33, 0x84, 0x87, 0xcf, 0xe3, 0xa7, 0x57, 0x61, 0x24, 0x56, 0x25, 0x9b,
	0xf8, 0x3c, 0x99, 0x86, 0x3c, 0xe4, 0x53, 0xf8, 0x87, 0x95, 0x4b, 0x78, 0x83, 0x17, 0xf8, 0xa5,
	0x0a, 0xc9, 0x77, 0x1b, 0x0d, 0xdf, 0xcd, 0x93, 0x60, 0x16, 0xc5, 0xb1, 0x73, 0x89, 0xec, 0x32,
	0x5a, 0x60, 0xcb, 0xb5, 0xbc, 0xfe, 0xec, 0xc9, 0xfd, 0x6e, 0x6c, 0x95, 0x0f, 0xbb, 0xf1, 0x39,
	0x2b, 0x78, 0xfa, 0x86, 0x94, 0xc4, 0x4d, 0x8a, 0x50, 0x3e, 0xa9, 0xa4, 0x9c, 0x2b, 0xd4, 0xf3,
	0x79, 0x94, 0xe2, 0x43, 0xd7, 0xf2, 0x6c, 0x45, 0xfb, 0x86, 0xf6, 0x35, 0xed, 0x13, 0x0a, 0x98,
	0x74, 0xb3, 0x40, 0x60, 0xdb, 0xd0, 0xcc, 0xd0, 0x4c, 0xd3, 0x8c, 0x50, 0x49, 0x39, 0x53, 0xd4,
	0x0f, 0x73, 0x5e, 0x66, 0xb8, 0xe7, 0xda, 0x35, 0x1e, 0x1a, 0x3c, 0xd4, 0x78, 0x48, 0xa8, 0xe2,
	0x9c, 0xf7, 0xc8, 0xde, 0x46, 0x29, 0xee, 0xbb, 0x96, 0xe7, 0xcc, 0x5e, 0xdf, 0xef, 0xc6, 0x27,
	0xdb, 0x17, 0x3c, 0x89, 0x44, 0x90, 0x64, 0xe2, 0xeb, 0xc3, 0x6e, 0xfc, 0x4c, 0x15, 0x36, 0x0e,
	0xb5, 0xa2, 0x79, 0x42, 0xa5, 0x43, 0xaa, 0xc4, 0xbc, 0xc2, 0x47, 0xd0, 0x28, 0xa8, 0xaa, 0x2e,
	0x55, 0xd5, 0x52, 0x55, 0x7b, 0x2a, 0x31, 0xaf, 0xa4, 0x6a, 0xcd, 0x19, 0x1e, 0xc0, 0x3c, 0x41,
	0xb5, 0xee, 0x52, 0xad, 0x5b, 0xaa, 0xf5, 0x9e, 0x6a, 0xcd, 0x19, 0xf9, 0x3d, 0x40, 0xc7, 0x32,
	0x27, 0xca, 0xcb, 0x74, 0xe1, 0x3c, 0x47, 0x87, 0x3a, 0x27, 0x3d, 0x9c, 0xc8, 0x0c, 0x27, 0xd2,
	0x8e, 0x88, 0xd0, 0xc3, 0x68, 0x21, 0x47, 0x59, 0x88, 0x79, 0x2e, 0x9a, 0x39, 0x15, 0x86, 0x2e,
	0x34, 0x5d, 0x10, 0xaa, 0x38, 0x19, 0x54, 0x90, 0x2e, 0x9a, 0x41, 0x05, 0x06, 0x0f, 0x34, 0x1e,
	0x10, 0x2a, 0x29, 0xb9, 0x04, 0x39, 0xe7, 0x09, 0xee, 0x99, 0x95, 0xc9, 0x0d, 0x9d, 0x6b, 0x3a,
	0x27, 0x14, 0x30, 0x35, 0x5b, 0x06, 0x31, 0xe9, 0x81, 0x88, 0xae, 0x81, 0x88, 0xd6, 0x40, 0xc4,
	0x5f, 0xb3, 0x65, 0xce, 0x5b, 0xd4, 0x63, 0x51, 0x1c, 0xe3, 0x23, 0xd7, 0xf6, 0x4e, 0x5e, 0x3a,
	0x93, 0xfa, 0x02, 0x4c, 0xea, 0x6d, 0xfe, 0xd7, 0x92, 0x41, 0xa9, 0x6c, 0x7e, 0x19, 0xf3, 0x2d,
	0x1e, 0xb8, 0x76, 0xdd, 0xfc, 0xd2, 0xe0, 0x4b, 0x8d, 0x2f, 0x09, 0x05, 0xcc, 0x2c, 0xe5, 0xf0,
	0x3f, 0x97, 0x72, 0x8a, 0xfa, 0x19, 0xdf, 0x04, 0x39, 0x3e, 0x76, 0x2d, 0xef, 0x54, 0x15, 0x64,
	0xa6, 0x20, 0xd3, 0x05, 0x19, 0xa1, 0x8a, 0x93, 0x0d, 0xf1, 0xc5, 0xa2, 0xc0, 0xc8, 0xb5, 0xbd,
	0x0b, 0xc5, 0x73, 0xc3, 0x73, 0xcd, 0x73, 0x42, 0x01, 0x93, 0x49, 0xc9, 0x4d, 0x3d, 0x31, 0x49,
	0x55, 0x86, 0xae, 0xea, 0xad, 0xd4, 0xbb, 0x78, 0xa9, 0x6e, 0xc8, 0x29, 0xdc, 0x10, 0x80, 0xb7,
	0x06, 0xde, 0xd6, 0xb7, 0x41, 0xdf, 0x81, 0x0f, 0xa8, 0x97, 0x72, 0x11, 0xe0, 0x47, 0xae, 0xe5,
	0x1d, 0xab, 0xa0, 0xd2, 0xae, 0xa0, 0xd2, 0x56, 0x50, 0xcd, 0x13, 0x0a, 0x12, 0x29, 0xcb, 0x23,
	0x7f, 0x85, 0x1f, 0xc3, 0x98, 0x41, 0xb6, 0xea, 0x92, 0xad, 0x5a, 0xb2, 0xd5, 0x9e, 0x4c, 0x4a,
	0x9c, 0x4f, 0x68, 0x50, 0x16, 0x41, 0x3e, 0x0b, 0x04, 0x3e, 0x83, 0x18, 0xc0, 0x57, 0x76, 0xf9,
	0xca, 0x96, 0xaf, 0x79, 0x42, 0x6b, 0x8f, 0xec, 0x8f, 0xcd, 0xd3, 0x0d, 0x3e, 0x37, 0x5b, 0xb9,
	0xe9, 0xf2, 0x6d, 0x5a, 0xbe, 0xcd, 0x5e, 0x7f, 0x52, 0xe2, 0x7c, 0x44, 0x7d, 0x7f, 0x15, 0xcc,
	0x05, 0xbe, 0x70, 0x2d, 0x6f, 0xa8, 0x6c, 0xd7, 0x5d, 0xb6, 0xeb, 0x96, 0xad, 0x79, 0x42, 0x95,
	0x65, 0x36, 0xfe, 0x71, 0x3b, 0xb2, 0x6e, 0x6e, 0x47, 0xd6, 0xaf, 0xdb, 0x91, 0xf5, 0xed, 0x6e,
	0x74, 0x70, 0x73, 0x37, 0x3a, 0xf8, 0x79, 0x37, 0x3a, 0xf8, 0xdc, 0x87, 0x4f, 0x00, 0x3b, 0x82,
	0xbd, 0x7f, 0xf5, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xd3, 0xf3, 0x65, 0x12, 0x06, 0x00, 0x00,
}

func (m *GameBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Job != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Job))
		i--
		dAtA[i] = 0x38
	}
	if m.Tax != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Tax))
		i--
		dAtA[i] = 0x30
	}
	if m.Win != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Group) > 0 {
		dAtA2 := make([]byte, len(m.Group)*10)
		var j1 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintFolksLog(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if m.Bet != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Bet))
		i--
		dAtA[i] = 0x18
	}
	if m.Coin != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cheat {
		i--
		if m.Cheat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.Bank != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Bank))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.UserBet) > 0 {
		dAtA4 := make([]byte, len(m.UserBet)*10)
		var j3 int
		for _, num1 := range m.UserBet {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintFolksLog(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Rich) > 0 {
		dAtA6 := make([]byte, len(m.Rich)*10)
		var j5 int
		for _, num1 := range m.Rich {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintFolksLog(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintFolksLog(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Win != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
		i--
		dAtA[i] = 0x60
	}
	if m.Tax != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Tax))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Odds) > 0 {
		dAtA7 := make([]byte, len(m.Odds)*5)
		var j8 int
		for _, num := range m.Odds {
			x9 := (uint32(num) << 1) ^ uint32((num >> 31))
			for x9 >= 1<<7 {
				dAtA7[j8] = uint8(uint64(x9)&0x7f | 0x80)
				j8++
				x9 >>= 7
			}
			dAtA7[j8] = uint8(x9)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA7[:j8])
		i = encodeVarintFolksLog(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Poker) > 0 {
		i -= len(m.Poker)
		copy(dAtA[i:], m.Poker)
		i = encodeVarintFolksLog(dAtA, i, uint64(len(m.Poker)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Group) > 0 {
		dAtA11 := make([]byte, len(m.Group)*10)
		var j10 int
		for _, num1 := range m.Group {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintFolksLog(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Flow) > 0 {
		dAtA13 := make([]byte, len(m.Flow)*10)
		var j12 int
		for _, num1 := range m.Flow {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA13[j12] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j12++
			}
			dAtA13[j12] = uint8(num)
			j12++
		}
		i -= j12
		copy(dAtA[i:], dAtA13[:j12])
		i = encodeVarintFolksLog(dAtA, i, uint64(j12))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bill) > 0 {
		for iNdEx := len(m.Bill) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bill[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFolksLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Tab != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Tab))
		i--
		dAtA[i] = 0x28
	}
	if m.Room != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Room))
		i--
		dAtA[i] = 0x20
	}
	if m.End != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFolksLog(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFolksLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovFolksLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameBill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovFolksLog(uint64(m.Uid))
	}
	if m.Coin != 0 {
		n += 1 + sovFolksLog(uint64(m.Coin))
	}
	if m.Bet != 0 {
		n += 1 + sovFolksLog(uint64(m.Bet))
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	if m.Win != 0 {
		n += 1 + sozFolksLog(uint64(m.Win))
	}
	if m.Tax != 0 {
		n += 1 + sovFolksLog(uint64(m.Tax))
	}
	if m.Job != 0 {
		n += 1 + sovFolksLog(uint64(m.Job))
	}
	return n
}

func (m *GameRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFolksLog(uint64(m.Id))
	}
	if m.Start != 0 {
		n += 1 + sovFolksLog(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovFolksLog(uint64(m.End))
	}
	if m.Room != 0 {
		n += 1 + sovFolksLog(uint64(m.Room))
	}
	if m.Tab != 0 {
		n += 1 + sovFolksLog(uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, e := range m.Bill {
			l = e.Size()
			n += 1 + l + sovFolksLog(uint64(l))
		}
	}
	if len(m.Flow) > 0 {
		l = 0
		for _, e := range m.Flow {
			l += sovFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	if len(m.Group) > 0 {
		l = 0
		for _, e := range m.Group {
			l += sovFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovFolksLog(uint64(l))
	}
	if len(m.Odds) > 0 {
		l = 0
		for _, e := range m.Odds {
			l += sozFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	if m.Tax != 0 {
		n += 1 + sovFolksLog(uint64(m.Tax))
	}
	if m.Win != 0 {
		n += 1 + sozFolksLog(uint64(m.Win))
	}
	l = len(m.Note)
	if l > 0 {
		n += 1 + l + sovFolksLog(uint64(l))
	}
	if len(m.Rich) > 0 {
		l = 0
		for _, e := range m.Rich {
			l += sovFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	if len(m.UserBet) > 0 {
		l = 0
		for _, e := range m.UserBet {
			l += sovFolksLog(uint64(e))
		}
		n += 1 + sovFolksLog(uint64(l)) + l
	}
	if m.Bank != 0 {
		n += 2 + sovFolksLog(uint64(m.Bank))
	}
	if m.Cheat {
		n += 3
	}
	return n
}

func sovFolksLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFolksLog(x uint64) (n int) {
	return sovFolksLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolksLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFolksLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolksLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolksLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFolksLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFolksLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFolksLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bill = append(m.Bill, &GameBill{})
			if err := m.Bill[len(m.Bill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Flow = append(m.Flow, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Flow) == 0 {
					m.Flow = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Flow = append(m.Flow, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Flow", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Group = append(m.Group, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Group) == 0 {
					m.Group = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Group = append(m.Group, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFolksLog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFolksLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
				m.Odds = append(m.Odds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Odds) == 0 {
					m.Odds = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
					m.Odds = append(m.Odds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Odds", wireType)
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFolksLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFolksLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Rich = append(m.Rich, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Rich) == 0 {
					m.Rich = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Rich = append(m.Rich, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Rich", wireType)
			}
		case 15:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UserBet = append(m.UserBet, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFolksLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFolksLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFolksLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UserBet) == 0 {
					m.UserBet = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFolksLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UserBet = append(m.UserBet, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UserBet", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bank", wireType)
			}
			m.Bank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bank |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cheat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cheat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFolksLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFolksLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFolksLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFolksLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFolksLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFolksLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFolksLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFolksLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFolksLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFolksLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFolksLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFolksLog = fmt.Errorf("proto: unexpected end of group")
)
