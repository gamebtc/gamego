package folks

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *BetAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sn":
			z.Sn, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Sn")
				return
			}
		case "i":
			z.Item, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Item")
				return
			}
		case "bet":
			z.Bet, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "coin":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *BetAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "sn"
	err = en.Append(0x84, 0xa2, 0x73, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Sn)
	if err != nil {
		err = msgp.WrapError(err, "Sn")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Item)
	if err != nil {
		err = msgp.WrapError(err, "Item")
		return
	}
	// write "bet"
	err = en.Append(0xa3, 0x62, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Bet)
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	// write "coin"
	err = en.Append(0xa4, 0x63, 0x6f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *BetAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "sn"
	o = append(o, 0x84, 0xa2, 0x73, 0x6e)
	o = msgp.AppendInt32(o, z.Sn)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendInt32(o, z.Item)
	// string "bet"
	o = append(o, 0xa3, 0x62, 0x65, 0x74)
	o = msgp.AppendInt32(o, z.Bet)
	// string "coin"
	o = append(o, 0xa4, 0x63, 0x6f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Coin)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BetAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sn":
			z.Sn, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sn")
				return
			}
		case "i":
			z.Item, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Item")
				return
			}
		case "bet":
			z.Bet, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "coin":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *BetAck) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 2 + msgp.Int32Size + 4 + msgp.Int32Size + 5 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *BetReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sn":
			z.Sn, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Sn")
				return
			}
		case "i":
			z.Item, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Item")
				return
			}
		case "bet":
			z.Bet, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z BetReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "sn"
	err = en.Append(0x83, 0xa2, 0x73, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Sn)
	if err != nil {
		err = msgp.WrapError(err, "Sn")
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Item)
	if err != nil {
		err = msgp.WrapError(err, "Item")
		return
	}
	// write "bet"
	err = en.Append(0xa3, 0x62, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Bet)
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z BetReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "sn"
	o = append(o, 0x83, 0xa2, 0x73, 0x6e)
	o = msgp.AppendInt32(o, z.Sn)
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendInt32(o, z.Item)
	// string "bet"
	o = append(o, 0xa3, 0x62, 0x65, 0x74)
	o = msgp.AppendInt32(o, z.Bet)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *BetReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "sn":
			z.Sn, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sn")
				return
			}
		case "i":
			z.Item, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Item")
				return
			}
		case "bet":
			z.Bet, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z BetReq) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 2 + msgp.Int32Size + 4 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Folks) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Folks) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Folks) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Folks) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Folks) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Folks_Code) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Folks_Code(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Folks_Code) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Folks_Code) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Folks_Code) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Folks_Code(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Folks_Code) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameBill) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "c":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "b":
			z.Bet, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "g":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
			if cap(z.Group) >= int(zb0002) {
				z.Group = (z.Group)[:zb0002]
			} else {
				z.Group = make([]int64, zb0002)
			}
			for za0001 := range z.Group {
				z.Group[za0001], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Group", za0001)
					return
				}
			}
		case "w":
			z.Win, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "j":
			z.Job, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Job")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameBill) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "u"
	err = en.Append(0x87, 0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Uid)
	if err != nil {
		err = msgp.WrapError(err, "Uid")
		return
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Bet)
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	// write "g"
	err = en.Append(0xa1, 0x67)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Group)))
	if err != nil {
		err = msgp.WrapError(err, "Group")
		return
	}
	for za0001 := range z.Group {
		err = en.WriteInt64(z.Group[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Group", za0001)
			return
		}
	}
	// write "w"
	err = en.Append(0xa1, 0x77)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Win)
	if err != nil {
		err = msgp.WrapError(err, "Win")
		return
	}
	// write "x"
	err = en.Append(0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Tax)
	if err != nil {
		err = msgp.WrapError(err, "Tax")
		return
	}
	// write "j"
	err = en.Append(0xa1, 0x6a)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Job)
	if err != nil {
		err = msgp.WrapError(err, "Job")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameBill) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "u"
	o = append(o, 0x87, 0xa1, 0x75)
	o = msgp.AppendInt32(o, z.Uid)
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendInt64(o, z.Coin)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendInt64(o, z.Bet)
	// string "g"
	o = append(o, 0xa1, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Group)))
	for za0001 := range z.Group {
		o = msgp.AppendInt64(o, z.Group[za0001])
	}
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendInt64(o, z.Win)
	// string "x"
	o = append(o, 0xa1, 0x78)
	o = msgp.AppendInt64(o, z.Tax)
	// string "j"
	o = append(o, 0xa1, 0x6a)
	o = msgp.AppendInt32(o, z.Job)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameBill) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "c":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "b":
			z.Bet, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "g":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
			if cap(z.Group) >= int(zb0002) {
				z.Group = (z.Group)[:zb0002]
			} else {
				z.Group = make([]int64, zb0002)
			}
			for za0001 := range z.Group {
				z.Group[za0001], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Group", za0001)
					return
				}
			}
		case "w":
			z.Win, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "j":
			z.Job, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Job")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameBill) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize + (len(z.Group) * (msgp.Int64Size)) + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameDealAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "r":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "R")
					return
				}
				z.R = nil
			} else {
				if z.R == nil {
					z.R = new(GameResult)
				}
				err = z.R.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "R")
					return
				}
			}
		case "win":
			z.Win, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "coin":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameDealAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "r"
	err = en.Append(0x83, 0xa1, 0x72)
	if err != nil {
		return
	}
	if z.R == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.R.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "R")
			return
		}
	}
	// write "win"
	err = en.Append(0xa3, 0x77, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Win)
	if err != nil {
		err = msgp.WrapError(err, "Win")
		return
	}
	// write "coin"
	err = en.Append(0xa4, 0x63, 0x6f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameDealAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "r"
	o = append(o, 0x83, 0xa1, 0x72)
	if z.R == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.R.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "R")
			return
		}
	}
	// string "win"
	o = append(o, 0xa3, 0x77, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Win)
	// string "coin"
	o = append(o, 0xa4, 0x63, 0x6f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Coin)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameDealAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "r":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.R = nil
			} else {
				if z.R == nil {
					z.R = new(GameResult)
				}
				bts, err = z.R.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "R")
					return
				}
			}
		case "win":
			z.Win, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "coin":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameDealAck) Msgsize() (s int) {
	s = 1 + 2
	if z.R == nil {
		s += msgp.NilSize
	} else {
		s += z.R.Msgsize()
	}
	s += 4 + msgp.Int64Size + 5 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameInitAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "table":
			z.Table, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "state":
			z.State, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "time":
			z.Time, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "rich":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0002) {
				z.Rich = (z.Rich)[:zb0002]
			} else {
				z.Rich = make([]*Player, zb0002)
			}
			for za0001 := range z.Rich {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
					z.Rich[za0001] = nil
				} else {
					if z.Rich[za0001] == nil {
						z.Rich[za0001] = new(Player)
					}
					err = z.Rich[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
				}
			}
		case "sum":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
			if cap(z.Sum) >= int(zb0003) {
				z.Sum = (z.Sum)[:zb0003]
			} else {
				z.Sum = make([]int64, zb0003)
			}
			for za0002 := range z.Sum {
				z.Sum[za0002], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Sum", za0002)
					return
				}
			}
		case "bet":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
			if cap(z.Bet) >= int(zb0004) {
				z.Bet = (z.Bet)[:zb0004]
			} else {
				z.Bet = make([]int64, zb0004)
			}
			for za0003 := range z.Bet {
				z.Bet[za0003], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Bet", za0003)
					return
				}
			}
		case "log":
			z.Log, err = dc.ReadBytes(z.Log)
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
		case "bank":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
				z.Bank = nil
			} else {
				if z.Bank == nil {
					z.Bank = new(Player)
				}
				err = z.Bank.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameInitAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "table"
	err = en.Append(0x89, 0xa5, 0x74, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Table)
	if err != nil {
		err = msgp.WrapError(err, "Table")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "state"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.State)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "time"
	err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "rich"
	err = en.Append(0xa4, 0x72, 0x69, 0x63, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Rich)))
	if err != nil {
		err = msgp.WrapError(err, "Rich")
		return
	}
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Rich[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Rich", za0001)
				return
			}
		}
	}
	// write "sum"
	err = en.Append(0xa3, 0x73, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sum)))
	if err != nil {
		err = msgp.WrapError(err, "Sum")
		return
	}
	for za0002 := range z.Sum {
		err = en.WriteInt64(z.Sum[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Sum", za0002)
			return
		}
	}
	// write "bet"
	err = en.Append(0xa3, 0x62, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bet)))
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	for za0003 := range z.Bet {
		err = en.WriteInt64(z.Bet[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Bet", za0003)
			return
		}
	}
	// write "log"
	err = en.Append(0xa3, 0x6c, 0x6f, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Log)
	if err != nil {
		err = msgp.WrapError(err, "Log")
		return
	}
	// write "bank"
	err = en.Append(0xa4, 0x62, 0x61, 0x6e, 0x6b)
	if err != nil {
		return
	}
	if z.Bank == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Bank.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Bank")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameInitAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "table"
	o = append(o, 0x89, 0xa5, 0x74, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendInt32(o, z.Table)
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "state"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendInt32(o, z.State)
	// string "time"
	o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt32(o, z.Time)
	// string "rich"
	o = append(o, 0xa4, 0x72, 0x69, 0x63, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rich)))
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Rich[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Rich", za0001)
				return
			}
		}
	}
	// string "sum"
	o = append(o, 0xa3, 0x73, 0x75, 0x6d)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sum)))
	for za0002 := range z.Sum {
		o = msgp.AppendInt64(o, z.Sum[za0002])
	}
	// string "bet"
	o = append(o, 0xa3, 0x62, 0x65, 0x74)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bet)))
	for za0003 := range z.Bet {
		o = msgp.AppendInt64(o, z.Bet[za0003])
	}
	// string "log"
	o = append(o, 0xa3, 0x6c, 0x6f, 0x67)
	o = msgp.AppendBytes(o, z.Log)
	// string "bank"
	o = append(o, 0xa4, 0x62, 0x61, 0x6e, 0x6b)
	if z.Bank == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Bank.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Bank")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameInitAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "table":
			z.Table, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "state":
			z.State, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "time":
			z.Time, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "rich":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0002) {
				z.Rich = (z.Rich)[:zb0002]
			} else {
				z.Rich = make([]*Player, zb0002)
			}
			for za0001 := range z.Rich {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Rich[za0001] = nil
				} else {
					if z.Rich[za0001] == nil {
						z.Rich[za0001] = new(Player)
					}
					bts, err = z.Rich[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
				}
			}
		case "sum":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
			if cap(z.Sum) >= int(zb0003) {
				z.Sum = (z.Sum)[:zb0003]
			} else {
				z.Sum = make([]int64, zb0003)
			}
			for za0002 := range z.Sum {
				z.Sum[za0002], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sum", za0002)
					return
				}
			}
		case "bet":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
			if cap(z.Bet) >= int(zb0004) {
				z.Bet = (z.Bet)[:zb0004]
			} else {
				z.Bet = make([]int64, zb0004)
			}
			for za0003 := range z.Bet {
				z.Bet[za0003], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bet", za0003)
					return
				}
			}
		case "log":
			z.Log, bts, err = msgp.ReadBytesBytes(bts, z.Log)
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
		case "bank":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Bank = nil
			} else {
				if z.Bank == nil {
					z.Bank = new(Player)
				}
				bts, err = z.Bank.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameInitAck) Msgsize() (s int) {
	s = 1 + 6 + msgp.Int32Size + 3 + msgp.Int32Size + 6 + msgp.Int32Size + 5 + msgp.Int32Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Rich[za0001].Msgsize()
		}
	}
	s += 4 + msgp.ArrayHeaderSize + (len(z.Sum) * (msgp.Int64Size)) + 4 + msgp.ArrayHeaderSize + (len(z.Bet) * (msgp.Int64Size)) + 4 + msgp.BytesPrefixSize + len(z.Log) + 5
	if z.Bank == nil {
		s += msgp.NilSize
	} else {
		s += z.Bank.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "p":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "odd":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Odd")
				return
			}
			if cap(z.Odd) >= int(zb0002) {
				z.Odd = (z.Odd)[:zb0002]
			} else {
				z.Odd = make([]int32, zb0002)
			}
			for za0001 := range z.Odd {
				z.Odd[za0001], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Odd", za0001)
					return
				}
			}
		case "sum":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
			if cap(z.Sum) >= int(zb0003) {
				z.Sum = (z.Sum)[:zb0003]
			} else {
				z.Sum = make([]int64, zb0003)
			}
			for za0002 := range z.Sum {
				z.Sum[za0002], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Sum", za0002)
					return
				}
			}
		case "rich":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0004) {
				z.Rich = (z.Rich)[:zb0004]
			} else {
				z.Rich = make([]int64, zb0004)
			}
			for za0003 := range z.Rich {
				z.Rich[za0003], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Rich", za0003)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "id"
	err = en.Append(0x85, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Poker)
	if err != nil {
		err = msgp.WrapError(err, "Poker")
		return
	}
	// write "odd"
	err = en.Append(0xa3, 0x6f, 0x64, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Odd)))
	if err != nil {
		err = msgp.WrapError(err, "Odd")
		return
	}
	for za0001 := range z.Odd {
		err = en.WriteInt32(z.Odd[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Odd", za0001)
			return
		}
	}
	// write "sum"
	err = en.Append(0xa3, 0x73, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sum)))
	if err != nil {
		err = msgp.WrapError(err, "Sum")
		return
	}
	for za0002 := range z.Sum {
		err = en.WriteInt64(z.Sum[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Sum", za0002)
			return
		}
	}
	// write "rich"
	err = en.Append(0xa4, 0x72, 0x69, 0x63, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Rich)))
	if err != nil {
		err = msgp.WrapError(err, "Rich")
		return
	}
	for za0003 := range z.Rich {
		err = en.WriteInt64(z.Rich[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Rich", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "id"
	o = append(o, 0x85, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendBytes(o, z.Poker)
	// string "odd"
	o = append(o, 0xa3, 0x6f, 0x64, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Odd)))
	for za0001 := range z.Odd {
		o = msgp.AppendInt32(o, z.Odd[za0001])
	}
	// string "sum"
	o = append(o, 0xa3, 0x73, 0x75, 0x6d)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sum)))
	for za0002 := range z.Sum {
		o = msgp.AppendInt64(o, z.Sum[za0002])
	}
	// string "rich"
	o = append(o, 0xa4, 0x72, 0x69, 0x63, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rich)))
	for za0003 := range z.Rich {
		o = msgp.AppendInt64(o, z.Rich[za0003])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "p":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "odd":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Odd")
				return
			}
			if cap(z.Odd) >= int(zb0002) {
				z.Odd = (z.Odd)[:zb0002]
			} else {
				z.Odd = make([]int32, zb0002)
			}
			for za0001 := range z.Odd {
				z.Odd[za0001], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Odd", za0001)
					return
				}
			}
		case "sum":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
			if cap(z.Sum) >= int(zb0003) {
				z.Sum = (z.Sum)[:zb0003]
			} else {
				z.Sum = make([]int64, zb0003)
			}
			for za0002 := range z.Sum {
				z.Sum[za0002], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sum", za0002)
					return
				}
			}
		case "rich":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0004) {
				z.Rich = (z.Rich)[:zb0004]
			} else {
				z.Rich = make([]int64, zb0004)
			}
			for za0003 := range z.Rich {
				z.Rich[za0003], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rich", za0003)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameResult) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 2 + msgp.BytesPrefixSize + len(z.Poker) + 4 + msgp.ArrayHeaderSize + (len(z.Odd) * (msgp.Int32Size)) + 4 + msgp.ArrayHeaderSize + (len(z.Sum) * (msgp.Int64Size)) + 5 + msgp.ArrayHeaderSize + (len(z.Rich) * (msgp.Int64Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameRound) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Id, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "s":
			z.Start, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "r":
			z.Room, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Room")
				return
			}
		case "t":
			z.Tab, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Tab")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bill")
				return
			}
			if cap(z.Bill) >= int(zb0002) {
				z.Bill = (z.Bill)[:zb0002]
			} else {
				z.Bill = make([]*GameBill, zb0002)
			}
			for za0001 := range z.Bill {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
					z.Bill[za0001] = nil
				} else {
					if z.Bill[za0001] == nil {
						z.Bill[za0001] = new(GameBill)
					}
					err = z.Bill[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
				}
			}
		case "f":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Flow")
				return
			}
			if cap(z.Flow) >= int(zb0003) {
				z.Flow = (z.Flow)[:zb0003]
			} else {
				z.Flow = make([]int32, zb0003)
			}
			for za0002 := range z.Flow {
				z.Flow[za0002], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Flow", za0002)
					return
				}
			}
		case "g":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
			if cap(z.Group) >= int(zb0004) {
				z.Group = (z.Group)[:zb0004]
			} else {
				z.Group = make([]int64, zb0004)
			}
			for za0003 := range z.Group {
				z.Group[za0003], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Group", za0003)
					return
				}
			}
		case "p":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "o":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Odds")
				return
			}
			if cap(z.Odds) >= int(zb0005) {
				z.Odds = (z.Odds)[:zb0005]
			} else {
				z.Odds = make([]int32, zb0005)
			}
			for za0004 := range z.Odds {
				z.Odds[za0004], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Odds", za0004)
					return
				}
			}
		case "x":
			z.Tax, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "w":
			z.Win, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "n":
			z.Note, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Note")
				return
			}
		case "h":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0006) {
				z.Rich = (z.Rich)[:zb0006]
			} else {
				z.Rich = make([]int32, zb0006)
			}
			for za0005 := range z.Rich {
				z.Rich[za0005], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Rich", za0005)
					return
				}
			}
		case "u":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "UserBet")
				return
			}
			if cap(z.UserBet) >= int(zb0007) {
				z.UserBet = (z.UserBet)[:zb0007]
			} else {
				z.UserBet = make([]int64, zb0007)
			}
			for za0006 := range z.UserBet {
				z.UserBet[za0006], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "UserBet", za0006)
					return
				}
			}
		case "k":
			z.Bank, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Bank")
				return
			}
		case "v":
			z.Cheat, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Cheat")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameRound) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 17
	// write "i"
	err = en.Append(0xde, 0x0, 0x11, 0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Room)
	if err != nil {
		err = msgp.WrapError(err, "Room")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Tab)
	if err != nil {
		err = msgp.WrapError(err, "Tab")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bill)))
	if err != nil {
		err = msgp.WrapError(err, "Bill")
		return
	}
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Bill[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Bill", za0001)
				return
			}
		}
	}
	// write "f"
	err = en.Append(0xa1, 0x66)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Flow)))
	if err != nil {
		err = msgp.WrapError(err, "Flow")
		return
	}
	for za0002 := range z.Flow {
		err = en.WriteInt32(z.Flow[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Flow", za0002)
			return
		}
	}
	// write "g"
	err = en.Append(0xa1, 0x67)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Group)))
	if err != nil {
		err = msgp.WrapError(err, "Group")
		return
	}
	for za0003 := range z.Group {
		err = en.WriteInt64(z.Group[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Group", za0003)
			return
		}
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Poker)
	if err != nil {
		err = msgp.WrapError(err, "Poker")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Odds)))
	if err != nil {
		err = msgp.WrapError(err, "Odds")
		return
	}
	for za0004 := range z.Odds {
		err = en.WriteInt32(z.Odds[za0004])
		if err != nil {
			err = msgp.WrapError(err, "Odds", za0004)
			return
		}
	}
	// write "x"
	err = en.Append(0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Tax)
	if err != nil {
		err = msgp.WrapError(err, "Tax")
		return
	}
	// write "w"
	err = en.Append(0xa1, 0x77)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Win)
	if err != nil {
		err = msgp.WrapError(err, "Win")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Note)
	if err != nil {
		err = msgp.WrapError(err, "Note")
		return
	}
	// write "h"
	err = en.Append(0xa1, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Rich)))
	if err != nil {
		err = msgp.WrapError(err, "Rich")
		return
	}
	for za0005 := range z.Rich {
		err = en.WriteInt32(z.Rich[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Rich", za0005)
			return
		}
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.UserBet)))
	if err != nil {
		err = msgp.WrapError(err, "UserBet")
		return
	}
	for za0006 := range z.UserBet {
		err = en.WriteInt64(z.UserBet[za0006])
		if err != nil {
			err = msgp.WrapError(err, "UserBet", za0006)
			return
		}
	}
	// write "k"
	err = en.Append(0xa1, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Bank)
	if err != nil {
		err = msgp.WrapError(err, "Bank")
		return
	}
	// write "v"
	err = en.Append(0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Cheat)
	if err != nil {
		err = msgp.WrapError(err, "Cheat")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameRound) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 17
	// string "i"
	o = append(o, 0xde, 0x0, 0x11, 0xa1, 0x69)
	o = msgp.AppendInt64(o, z.Id)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt64(o, z.Start)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendInt64(o, z.End)
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendInt32(o, z.Room)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt32(o, z.Tab)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bill)))
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Bill[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Bill", za0001)
				return
			}
		}
	}
	// string "f"
	o = append(o, 0xa1, 0x66)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Flow)))
	for za0002 := range z.Flow {
		o = msgp.AppendInt32(o, z.Flow[za0002])
	}
	// string "g"
	o = append(o, 0xa1, 0x67)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Group)))
	for za0003 := range z.Group {
		o = msgp.AppendInt64(o, z.Group[za0003])
	}
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendBytes(o, z.Poker)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Odds)))
	for za0004 := range z.Odds {
		o = msgp.AppendInt32(o, z.Odds[za0004])
	}
	// string "x"
	o = append(o, 0xa1, 0x78)
	o = msgp.AppendInt64(o, z.Tax)
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendInt64(o, z.Win)
	// string "n"
	o = append(o, 0xa1, 0x6e)
	o = msgp.AppendString(o, z.Note)
	// string "h"
	o = append(o, 0xa1, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rich)))
	for za0005 := range z.Rich {
		o = msgp.AppendInt32(o, z.Rich[za0005])
	}
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendArrayHeader(o, uint32(len(z.UserBet)))
	for za0006 := range z.UserBet {
		o = msgp.AppendInt64(o, z.UserBet[za0006])
	}
	// string "k"
	o = append(o, 0xa1, 0x6b)
	o = msgp.AppendInt32(o, z.Bank)
	// string "v"
	o = append(o, 0xa1, 0x76)
	o = msgp.AppendBool(o, z.Cheat)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameRound) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Id, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "s":
			z.Start, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "r":
			z.Room, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Room")
				return
			}
		case "t":
			z.Tab, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tab")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bill")
				return
			}
			if cap(z.Bill) >= int(zb0002) {
				z.Bill = (z.Bill)[:zb0002]
			} else {
				z.Bill = make([]*GameBill, zb0002)
			}
			for za0001 := range z.Bill {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Bill[za0001] = nil
				} else {
					if z.Bill[za0001] == nil {
						z.Bill[za0001] = new(GameBill)
					}
					bts, err = z.Bill[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
				}
			}
		case "f":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Flow")
				return
			}
			if cap(z.Flow) >= int(zb0003) {
				z.Flow = (z.Flow)[:zb0003]
			} else {
				z.Flow = make([]int32, zb0003)
			}
			for za0002 := range z.Flow {
				z.Flow[za0002], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Flow", za0002)
					return
				}
			}
		case "g":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Group")
				return
			}
			if cap(z.Group) >= int(zb0004) {
				z.Group = (z.Group)[:zb0004]
			} else {
				z.Group = make([]int64, zb0004)
			}
			for za0003 := range z.Group {
				z.Group[za0003], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Group", za0003)
					return
				}
			}
		case "p":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "o":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Odds")
				return
			}
			if cap(z.Odds) >= int(zb0005) {
				z.Odds = (z.Odds)[:zb0005]
			} else {
				z.Odds = make([]int32, zb0005)
			}
			for za0004 := range z.Odds {
				z.Odds[za0004], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Odds", za0004)
					return
				}
			}
		case "x":
			z.Tax, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "w":
			z.Win, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "n":
			z.Note, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Note")
				return
			}
		case "h":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0006) {
				z.Rich = (z.Rich)[:zb0006]
			} else {
				z.Rich = make([]int32, zb0006)
			}
			for za0005 := range z.Rich {
				z.Rich[za0005], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Rich", za0005)
					return
				}
			}
		case "u":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserBet")
				return
			}
			if cap(z.UserBet) >= int(zb0007) {
				z.UserBet = (z.UserBet)[:zb0007]
			} else {
				z.UserBet = make([]int64, zb0007)
			}
			for za0006 := range z.UserBet {
				z.UserBet[za0006], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "UserBet", za0006)
					return
				}
			}
		case "k":
			z.Bank, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bank")
				return
			}
		case "v":
			z.Cheat, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cheat")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameRound) Msgsize() (s int) {
	s = 3 + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Bill[za0001].Msgsize()
		}
	}
	s += 2 + msgp.ArrayHeaderSize + (len(z.Flow) * (msgp.Int32Size)) + 2 + msgp.ArrayHeaderSize + (len(z.Group) * (msgp.Int64Size)) + 2 + msgp.BytesPrefixSize + len(z.Poker) + 2 + msgp.ArrayHeaderSize + (len(z.Odds) * (msgp.Int32Size)) + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.Note) + 2 + msgp.ArrayHeaderSize + (len(z.Rich) * (msgp.Int32Size)) + 2 + msgp.ArrayHeaderSize + (len(z.UserBet) * (msgp.Int64Size)) + 2 + msgp.Int32Size + 2 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LeaveAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LeaveAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "u"
	err = en.Append(0x81, 0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Uid)
	if err != nil {
		err = msgp.WrapError(err, "Uid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LeaveAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "u"
	o = append(o, 0x81, 0xa1, 0x75)
	o = msgp.AppendInt32(o, z.Uid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LeaveAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LeaveAck) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *LeaveReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z LeaveReq) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "u"
	err = en.Append(0x81, 0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Uid)
	if err != nil {
		err = msgp.WrapError(err, "Uid")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z LeaveReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "u"
	o = append(o, 0x81, 0xa1, 0x75)
	o = msgp.AppendInt32(o, z.Uid)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *LeaveReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z LeaveReq) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OpenBetAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "time":
			z.Time, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "rich":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0002) {
				z.Rich = (z.Rich)[:zb0002]
			} else {
				z.Rich = make([]*Player, zb0002)
			}
			for za0001 := range z.Rich {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
					z.Rich[za0001] = nil
				} else {
					if z.Rich[za0001] == nil {
						z.Rich[za0001] = new(Player)
					}
					err = z.Rich[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
				}
			}
		case "bank":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
				z.Bank = nil
			} else {
				if z.Bank == nil {
					z.Bank = new(Player)
				}
				err = z.Bank.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *OpenBetAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "id"
	err = en.Append(0x84, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "time"
	err = en.Append(0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "rich"
	err = en.Append(0xa4, 0x72, 0x69, 0x63, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Rich)))
	if err != nil {
		err = msgp.WrapError(err, "Rich")
		return
	}
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Rich[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Rich", za0001)
				return
			}
		}
	}
	// write "bank"
	err = en.Append(0xa4, 0x62, 0x61, 0x6e, 0x6b)
	if err != nil {
		return
	}
	if z.Bank == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Bank.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Bank")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *OpenBetAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "id"
	o = append(o, 0x84, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "time"
	o = append(o, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt32(o, z.Time)
	// string "rich"
	o = append(o, 0xa4, 0x72, 0x69, 0x63, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Rich)))
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Rich[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Rich", za0001)
				return
			}
		}
	}
	// string "bank"
	o = append(o, 0xa4, 0x62, 0x61, 0x6e, 0x6b)
	if z.Bank == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Bank.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Bank")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OpenBetAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "time":
			z.Time, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "rich":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Rich")
				return
			}
			if cap(z.Rich) >= int(zb0002) {
				z.Rich = (z.Rich)[:zb0002]
			} else {
				z.Rich = make([]*Player, zb0002)
			}
			for za0001 := range z.Rich {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Rich[za0001] = nil
				} else {
					if z.Rich[za0001] == nil {
						z.Rich[za0001] = new(Player)
					}
					bts, err = z.Rich[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Rich", za0001)
						return
					}
				}
			}
		case "bank":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Bank = nil
			} else {
				if z.Bank == nil {
					z.Bank = new(Player)
				}
				bts, err = z.Bank.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bank")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *OpenBetAck) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 5 + msgp.Int32Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Rich {
		if z.Rich[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Rich[za0001].Msgsize()
		}
	}
	s += 5
	if z.Bank == nil {
		s += msgp.NilSize
	} else {
		s += z.Bank.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Player) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "icon":
			z.Icon, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Icon")
				return
			}
		case "vip":
			z.Vip, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Vip")
				return
			}
		case "coin":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Player) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "id"
	err = en.Append(0x85, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "icon"
	err = en.Append(0xa4, 0x69, 0x63, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Icon)
	if err != nil {
		err = msgp.WrapError(err, "Icon")
		return
	}
	// write "vip"
	err = en.Append(0xa3, 0x76, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Vip)
	if err != nil {
		err = msgp.WrapError(err, "Vip")
		return
	}
	// write "coin"
	err = en.Append(0xa4, 0x63, 0x6f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Player) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "id"
	o = append(o, 0x85, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "icon"
	o = append(o, 0xa4, 0x69, 0x63, 0x6f, 0x6e)
	o = msgp.AppendInt32(o, z.Icon)
	// string "vip"
	o = append(o, 0xa3, 0x76, 0x69, 0x70)
	o = msgp.AppendInt32(o, z.Vip)
	// string "coin"
	o = append(o, 0xa4, 0x63, 0x6f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Coin)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "icon":
			z.Icon, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Icon")
				return
			}
		case "vip":
			z.Vip, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Vip")
				return
			}
		case "coin":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Player) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 5 + msgp.Int32Size + 4 + msgp.Int32Size + 5 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StopBetAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StopBetAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "id"
	err = en.Append(0x81, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StopBetAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "id"
	o = append(o, 0x81, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt64(o, z.Id)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StopBetAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StopBetAck) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *UserBetAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "time":
			z.Time, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "item":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
			if cap(z.Bet) >= int(zb0002) {
				z.Bet = (z.Bet)[:zb0002]
			} else {
				z.Bet = make([]int32, zb0002)
			}
			for za0001 := range z.Bet {
				z.Bet[za0001], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Bet", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *UserBetAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "time"
	err = en.Append(0x82, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Time)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "item"
	err = en.Append(0xa4, 0x69, 0x74, 0x65, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bet)))
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	for za0001 := range z.Bet {
		err = en.WriteInt32(z.Bet[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Bet", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *UserBetAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "time"
	o = append(o, 0x82, 0xa4, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt32(o, z.Time)
	// string "item"
	o = append(o, 0xa4, 0x69, 0x74, 0x65, 0x6d)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bet)))
	for za0001 := range z.Bet {
		o = msgp.AppendInt32(o, z.Bet[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *UserBetAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "time":
			z.Time, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "item":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
			if cap(z.Bet) >= int(zb0002) {
				z.Bet = (z.Bet)[:zb0002]
			} else {
				z.Bet = make([]int32, zb0002)
			}
			for za0001 := range z.Bet {
				z.Bet[za0001], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Bet", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *UserBetAck) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int32Size + 5 + msgp.ArrayHeaderSize + (len(z.Bet) * (msgp.Int32Size))
	return
}
