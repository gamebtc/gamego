// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fish.proto

package fish

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Code int32

const (
	// 8600-8699(捕鱼)
	Code_CodeNone          Code = 0
	Code_CodeTimeSyncReq   Code = 8600
	Code_CodeTimeSyncAck   Code = 8601
	Code_CodeShootReq      Code = 8602
	Code_CodeHitReq        Code = 8604
	Code_CodeGameInitAck   Code = 8603
	Code_CodeGameUpdateAck Code = 8605
)

var Code_name = map[int32]string{
	0:    "CodeNone",
	8600: "CodeTimeSyncReq",
	8601: "CodeTimeSyncAck",
	8602: "CodeShootReq",
	8604: "CodeHitReq",
	8603: "CodeGameInitAck",
	8605: "CodeGameUpdateAck",
}

var Code_value = map[string]int32{
	"CodeNone":          0,
	"CodeTimeSyncReq":   8600,
	"CodeTimeSyncAck":   8601,
	"CodeShootReq":      8602,
	"CodeHitReq":        8604,
	"CodeGameInitAck":   8603,
	"CodeGameUpdateAck": 8605,
}

func (x Code) String() string {
	return proto.EnumName(Code_name, int32(x))
}

func (Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{0}
}

// 同步tick
type TimeSyncReq struct {
	Tick int64 `protobuf:"varint,1,opt,name=tick,proto3" json:"tick"`
}

func (m *TimeSyncReq) Reset()         { *m = TimeSyncReq{} }
func (m *TimeSyncReq) String() string { return proto.CompactTextString(m) }
func (*TimeSyncReq) ProtoMessage()    {}
func (*TimeSyncReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{0}
}
func (m *TimeSyncReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSyncReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeSyncReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeSyncReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSyncReq.Merge(m, src)
}
func (m *TimeSyncReq) XXX_Size() int {
	return m.Size()
}
func (m *TimeSyncReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSyncReq.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSyncReq proto.InternalMessageInfo

func (m *TimeSyncReq) GetTick() int64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

// 同步时间
type TimeSyncAck struct {
	Client int64 `protobuf:"varint,1,opt,name=client,proto3" json:"client"`
	Server int64 `protobuf:"varint,2,opt,name=server,proto3" json:"server"`
}

func (m *TimeSyncAck) Reset()         { *m = TimeSyncAck{} }
func (m *TimeSyncAck) String() string { return proto.CompactTextString(m) }
func (*TimeSyncAck) ProtoMessage()    {}
func (*TimeSyncAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{1}
}
func (m *TimeSyncAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TimeSyncAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TimeSyncAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TimeSyncAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeSyncAck.Merge(m, src)
}
func (m *TimeSyncAck) XXX_Size() int {
	return m.Size()
}
func (m *TimeSyncAck) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeSyncAck.DiscardUnknown(m)
}

var xxx_messageInfo_TimeSyncAck proto.InternalMessageInfo

func (m *TimeSyncAck) GetClient() int64 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *TimeSyncAck) GetServer() int64 {
	if m != nil {
		return m.Server
	}
	return 0
}

// 玩家信息
type Player struct {
	// 玩家ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 玩家头像
	Icon int32 `protobuf:"varint,2,opt,name=icon,proto3" json:"icon" bson:"icon" msg:"icon"`
	// VIP等级
	Vip int32 `protobuf:"varint,3,opt,name=vip,proto3" json:"vip" bson:"vip" msg:"vip"`
	// 椅子号(从0开始)
	Chair int32 `protobuf:"varint,4,opt,name=chair,proto3" json:"chair" bson:"chair" msg:"chair"`
	// 玩家带的分
	Coin int64 `protobuf:"varint,5,opt,name=coin,proto3" json:"coin" bson:"coin" msg:"coin"`
	// 玩家名称
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name" bson:"name" msg:"name"`
}

func (m *Player) Reset()         { *m = Player{} }
func (m *Player) String() string { return proto.CompactTextString(m) }
func (*Player) ProtoMessage()    {}
func (*Player) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{2}
}
func (m *Player) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Player) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Player.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Player) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Player.Merge(m, src)
}
func (m *Player) XXX_Size() int {
	return m.Size()
}
func (m *Player) XXX_DiscardUnknown() {
	xxx_messageInfo_Player.DiscardUnknown(m)
}

var xxx_messageInfo_Player proto.InternalMessageInfo

func (m *Player) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Player) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *Player) GetVip() int32 {
	if m != nil {
		return m.Vip
	}
	return 0
}

func (m *Player) GetChair() int32 {
	if m != nil {
		return m.Chair
	}
	return 0
}

func (m *Player) GetCoin() int64 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Player) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 子弹
type Bullet struct {
	// 同屏唯一ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 玩家ID
	Uid int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid" bson:"uid" msg:"uid"`
	// 客户端ID
	Client int32 `protobuf:"varint,3,opt,name=client,proto3" json:"client" bson:"client" msg:"client"`
	// 创建时间
	Created int64 `protobuf:"varint,4,opt,name=created,proto3" json:"created" bson:"created" msg:"created"`
	// 炮倍
	Bet int32 `protobuf:"varint,5,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 方向
	Direction float64 `protobuf:"fixed64,6,opt,name=direction,proto3" json:"direction" bson:"direction" msg:"direction"`
	// 子弹位置X
	X float64 `protobuf:"fixed64,7,opt,name=x,proto3" json:"x" bson:"x" msg:"x"`
	// 子弹位置Y
	Y float64 `protobuf:"fixed64,8,opt,name=y,proto3" json:"y" bson:"y" msg:"y"`
	// 锁定的鱼
	Fish int32 `protobuf:"varint,9,opt,name=fish,proto3" json:"fish" bson:"fish" msg:"fish"`
}

func (m *Bullet) Reset()         { *m = Bullet{} }
func (m *Bullet) String() string { return proto.CompactTextString(m) }
func (*Bullet) ProtoMessage()    {}
func (*Bullet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{3}
}
func (m *Bullet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bullet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bullet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bullet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bullet.Merge(m, src)
}
func (m *Bullet) XXX_Size() int {
	return m.Size()
}
func (m *Bullet) XXX_DiscardUnknown() {
	xxx_messageInfo_Bullet.DiscardUnknown(m)
}

var xxx_messageInfo_Bullet proto.InternalMessageInfo

func (m *Bullet) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Bullet) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Bullet) GetClient() int32 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *Bullet) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Bullet) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *Bullet) GetDirection() float64 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *Bullet) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Bullet) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Bullet) GetFish() int32 {
	if m != nil {
		return m.Fish
	}
	return 0
}

// 鱼
type Fish struct {
	// 同屏唯一ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 鱼的模板ID
	TmpId int32 `protobuf:"varint,2,opt,name=tmpId,proto3" json:"tmpId" bson:"tmpId" msg:"tmpId"`
	// path
	PathId int32 `protobuf:"varint,3,opt,name=pathId,proto3" json:"pathId" bson:"pathId" msg:"pathId"`
	// bbxID
	BoxId int32 `protobuf:"varint,4,opt,name=boxId,proto3" json:"boxId" bson:"boxId" msg:"boxId"`
	// 速度
	Speed float64 `protobuf:"fixed64,5,opt,name=speed,proto3" json:"speed" bson:"speed" msg:"speed"`
	// 创建时的Tick
	Created int64 `protobuf:"varint,6,opt,name=created,proto3" json:"created" bson:"created" msg:"created"`
	// 方向
	Direction float64 `protobuf:"fixed64,7,opt,name=direction,proto3" json:"direction" bson:"direction" msg:"direction"`
	// 鱼位置X
	X float64 `protobuf:"fixed64,8,opt,name=x,proto3" json:"x" bson:"x" msg:"x"`
	// 鱼位置Y
	Y float64 `protobuf:"fixed64,9,opt,name=y,proto3" json:"y" bson:"y" msg:"y"`
	// 是否是队伍
	Troop bool `protobuf:"varint,10,opt,name=troop,proto3" json:"troop" bson:"troop" msg:"troop"`
}

func (m *Fish) Reset()         { *m = Fish{} }
func (m *Fish) String() string { return proto.CompactTextString(m) }
func (*Fish) ProtoMessage()    {}
func (*Fish) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{4}
}
func (m *Fish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Fish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Fish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Fish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Fish.Merge(m, src)
}
func (m *Fish) XXX_Size() int {
	return m.Size()
}
func (m *Fish) XXX_DiscardUnknown() {
	xxx_messageInfo_Fish.DiscardUnknown(m)
}

var xxx_messageInfo_Fish proto.InternalMessageInfo

func (m *Fish) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Fish) GetTmpId() int32 {
	if m != nil {
		return m.TmpId
	}
	return 0
}

func (m *Fish) GetPathId() int32 {
	if m != nil {
		return m.PathId
	}
	return 0
}

func (m *Fish) GetBoxId() int32 {
	if m != nil {
		return m.BoxId
	}
	return 0
}

func (m *Fish) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Fish) GetCreated() int64 {
	if m != nil {
		return m.Created
	}
	return 0
}

func (m *Fish) GetDirection() float64 {
	if m != nil {
		return m.Direction
	}
	return 0
}

func (m *Fish) GetX() float64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Fish) GetY() float64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *Fish) GetTroop() bool {
	if m != nil {
		return m.Troop
	}
	return false
}

// 射击
type ShootReq struct {
	// 锁定的鱼
	Fish int32 `protobuf:"varint,1,opt,name=fish,proto3" json:"fish" bson:"fish" msg:"fish"`
	// 子弹客户端ID
	Client int32 `protobuf:"varint,2,opt,name=client,proto3" json:"client" bson:"client" msg:"client"`
	// 炮倍
	Bet int32 `protobuf:"varint,3,opt,name=bet,proto3" json:"bet" bson:"bet" msg:"bet"`
	// 方向
	Direction float64 `protobuf:"fixed64,4,opt,name=direction,proto3" json:"direction" bson:"direction" msg:"direction"`
}

func (m *ShootReq) Reset()         { *m = ShootReq{} }
func (m *ShootReq) String() string { return proto.CompactTextString(m) }
func (*ShootReq) ProtoMessage()    {}
func (*ShootReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{5}
}
func (m *ShootReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShootReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShootReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShootReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShootReq.Merge(m, src)
}
func (m *ShootReq) XXX_Size() int {
	return m.Size()
}
func (m *ShootReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShootReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShootReq proto.InternalMessageInfo

func (m *ShootReq) GetFish() int32 {
	if m != nil {
		return m.Fish
	}
	return 0
}

func (m *ShootReq) GetClient() int32 {
	if m != nil {
		return m.Client
	}
	return 0
}

func (m *ShootReq) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *ShootReq) GetDirection() float64 {
	if m != nil {
		return m.Direction
	}
	return 0
}

// 命中
type HitReq struct {
	// 子弹Id
	BulletId int32 `protobuf:"varint,1,opt,name=bulletId,proto3" json:"bulletId" bson:"bulletId" msg:"bulletId"`
	// 鱼ID
	FishId int32 `protobuf:"varint,2,opt,name=fishId,proto3" json:"fishId" bson:"fishId" msg:"fishId"`
}

func (m *HitReq) Reset()         { *m = HitReq{} }
func (m *HitReq) String() string { return proto.CompactTextString(m) }
func (*HitReq) ProtoMessage()    {}
func (*HitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{6}
}
func (m *HitReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HitReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HitReq.Merge(m, src)
}
func (m *HitReq) XXX_Size() int {
	return m.Size()
}
func (m *HitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HitReq.DiscardUnknown(m)
}

var xxx_messageInfo_HitReq proto.InternalMessageInfo

func (m *HitReq) GetBulletId() int32 {
	if m != nil {
		return m.BulletId
	}
	return 0
}

func (m *HitReq) GetFishId() int32 {
	if m != nil {
		return m.FishId
	}
	return 0
}

type GameInitAck struct {
	// 当前游戏ID
	Table int32 `protobuf:"varint,1,opt,name=table,proto3" json:"table" bson:"table" msg:"table"`
	// 服务器tick时间
	Tick int64 `protobuf:"varint,2,opt,name=tick,proto3" json:"tick" bson:"tick" msg:"tick"`
	// 场景Id
	Scene int32 `protobuf:"varint,3,opt,name=scene,proto3" json:"scene" bson:"scene" msg:"scene"`
	// 玩家
	Players []*Player `protobuf:"bytes,4,rep,name=players,proto3" json:"play" bson:"play" msg:"play"`
	// 鱼
	Fishes []*Fish `protobuf:"bytes,5,rep,name=fishes,proto3" json:"fishes" bson:"fishes" msg:"fishes"`
	// 子弹
	Bullets []*Bullet `protobuf:"bytes,6,rep,name=bullets,proto3" json:"bull" bson:"bull" msg:"bull"`
	// 最大子弹数
	MaxBullet int32 `protobuf:"varint,7,opt,name=maxBullet,proto3" json:"maxBullet" bson:"maxBullet" msg:"maxBullet"`
	// 子弹发射间隔
	FireInterval int32 `protobuf:"varint,8,opt,name=fireInterval,proto3" json:"fireInterval" bson:"fireInterval" msg:"fireInterval"`
	// 停火
	StopFire bool `protobuf:"varint,9,opt,name=stopFire,proto3" json:"stopFire" bson:"stopFire" msg:"stopFire"`
}

func (m *GameInitAck) Reset()         { *m = GameInitAck{} }
func (m *GameInitAck) String() string { return proto.CompactTextString(m) }
func (*GameInitAck) ProtoMessage()    {}
func (*GameInitAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{7}
}
func (m *GameInitAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameInitAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameInitAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameInitAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameInitAck.Merge(m, src)
}
func (m *GameInitAck) XXX_Size() int {
	return m.Size()
}
func (m *GameInitAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GameInitAck.DiscardUnknown(m)
}

var xxx_messageInfo_GameInitAck proto.InternalMessageInfo

func (m *GameInitAck) GetTable() int32 {
	if m != nil {
		return m.Table
	}
	return 0
}

func (m *GameInitAck) GetTick() int64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *GameInitAck) GetScene() int32 {
	if m != nil {
		return m.Scene
	}
	return 0
}

func (m *GameInitAck) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameInitAck) GetFishes() []*Fish {
	if m != nil {
		return m.Fishes
	}
	return nil
}

func (m *GameInitAck) GetBullets() []*Bullet {
	if m != nil {
		return m.Bullets
	}
	return nil
}

func (m *GameInitAck) GetMaxBullet() int32 {
	if m != nil {
		return m.MaxBullet
	}
	return 0
}

func (m *GameInitAck) GetFireInterval() int32 {
	if m != nil {
		return m.FireInterval
	}
	return 0
}

func (m *GameInitAck) GetStopFire() bool {
	if m != nil {
		return m.StopFire
	}
	return false
}

// 击杀鱼
type KillFish struct {
	// 鱼的ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 玩家ID
	Uid int32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid" bson:"uid" msg:"uid"`
	// 获得的金币
	Score int64 `protobuf:"varint,3,opt,name=score,proto3" json:"score" bson:"score" msg:"score"`
}

func (m *KillFish) Reset()         { *m = KillFish{} }
func (m *KillFish) String() string { return proto.CompactTextString(m) }
func (*KillFish) ProtoMessage()    {}
func (*KillFish) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{8}
}
func (m *KillFish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KillFish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KillFish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KillFish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KillFish.Merge(m, src)
}
func (m *KillFish) XXX_Size() int {
	return m.Size()
}
func (m *KillFish) XXX_DiscardUnknown() {
	xxx_messageInfo_KillFish.DiscardUnknown(m)
}

var xxx_messageInfo_KillFish proto.InternalMessageInfo

func (m *KillFish) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *KillFish) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *KillFish) GetScore() int64 {
	if m != nil {
		return m.Score
	}
	return 0
}

// 更改鱼的速度
type FishSeed struct {
	// 鱼的ID
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	// 速度
	Speed float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed" bson:"speed" msg:"speed"`
}

func (m *FishSeed) Reset()         { *m = FishSeed{} }
func (m *FishSeed) String() string { return proto.CompactTextString(m) }
func (*FishSeed) ProtoMessage()    {}
func (*FishSeed) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{9}
}
func (m *FishSeed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FishSeed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FishSeed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FishSeed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FishSeed.Merge(m, src)
}
func (m *FishSeed) XXX_Size() int {
	return m.Size()
}
func (m *FishSeed) XXX_DiscardUnknown() {
	xxx_messageInfo_FishSeed.DiscardUnknown(m)
}

var xxx_messageInfo_FishSeed proto.InternalMessageInfo

func (m *FishSeed) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FishSeed) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

// 游戏更新
type GameUpdateAck struct {
	// 停火
	StopFire bool `protobuf:"varint,1,opt,name=stopFire,proto3" json:"stopFire" bson:"stopFire" msg:"stopFire"`
	// 服务器tick时间
	Tick int64 `protobuf:"varint,2,opt,name=tick,proto3" json:"tick" bson:"tick" msg:"tick"`
	// 切换场景
	SwitchScene int32 `protobuf:"varint,3,opt,name=switchScene,proto3" json:"switchScene" bson:"switchScene" msg:"switchScene"`
	// 新的玩家
	Players []*Player `protobuf:"bytes,4,rep,name=players,proto3" json:"play" bson:"play" msg:"play"`
	// 新的鱼
	Fishes []*Fish `protobuf:"bytes,5,rep,name=fishes,proto3" json:"fishes" bson:"fishes" msg:"fishes"`
	// 新的子弹
	Bullets []*Bullet `protobuf:"bytes,6,rep,name=bullets,proto3" json:"bull" bson:"bull" msg:"bull"`
	// 消失的子弹
	DieBullets []int32 `protobuf:"varint,7,rep,packed,name=dieBullets,proto3" json:"dieBullets" bson:"dieBullets" msg:"dieBullets"`
	// 消失的鱼
	DieFishes []int32 `protobuf:"varint,8,rep,packed,name=dieFishes,proto3" json:"dieFishes" bson:"dieFishes" msg:"dieFishes"`
	// 击杀鱼
	Kills []*KillFish `protobuf:"bytes,9,rep,name=kills,proto3" json:"kills" bson:"kills" msg:"kills"`
	// 更改鱼的速度
	Seed []*FishSeed `protobuf:"bytes,10,rep,name=seed,proto3" json:"seed" bson:"seed" msg:"seed"`
	// 下线的玩家
	Offline []int32 `protobuf:"varint,11,rep,packed,name=offline,proto3" json:"offline" bson:"offline" msg:"offline"`
	// 文字提示
	Describe []string `protobuf:"bytes,12,rep,name=describe,proto3" json:"describe" bson:"describe" msg:"describe"`
}

func (m *GameUpdateAck) Reset()         { *m = GameUpdateAck{} }
func (m *GameUpdateAck) String() string { return proto.CompactTextString(m) }
func (*GameUpdateAck) ProtoMessage()    {}
func (*GameUpdateAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_f6e43ef05c84ed98, []int{10}
}
func (m *GameUpdateAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameUpdateAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameUpdateAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameUpdateAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameUpdateAck.Merge(m, src)
}
func (m *GameUpdateAck) XXX_Size() int {
	return m.Size()
}
func (m *GameUpdateAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GameUpdateAck.DiscardUnknown(m)
}

var xxx_messageInfo_GameUpdateAck proto.InternalMessageInfo

func (m *GameUpdateAck) GetStopFire() bool {
	if m != nil {
		return m.StopFire
	}
	return false
}

func (m *GameUpdateAck) GetTick() int64 {
	if m != nil {
		return m.Tick
	}
	return 0
}

func (m *GameUpdateAck) GetSwitchScene() int32 {
	if m != nil {
		return m.SwitchScene
	}
	return 0
}

func (m *GameUpdateAck) GetPlayers() []*Player {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *GameUpdateAck) GetFishes() []*Fish {
	if m != nil {
		return m.Fishes
	}
	return nil
}

func (m *GameUpdateAck) GetBullets() []*Bullet {
	if m != nil {
		return m.Bullets
	}
	return nil
}

func (m *GameUpdateAck) GetDieBullets() []int32 {
	if m != nil {
		return m.DieBullets
	}
	return nil
}

func (m *GameUpdateAck) GetDieFishes() []int32 {
	if m != nil {
		return m.DieFishes
	}
	return nil
}

func (m *GameUpdateAck) GetKills() []*KillFish {
	if m != nil {
		return m.Kills
	}
	return nil
}

func (m *GameUpdateAck) GetSeed() []*FishSeed {
	if m != nil {
		return m.Seed
	}
	return nil
}

func (m *GameUpdateAck) GetOffline() []int32 {
	if m != nil {
		return m.Offline
	}
	return nil
}

func (m *GameUpdateAck) GetDescribe() []string {
	if m != nil {
		return m.Describe
	}
	return nil
}

func init() {
	proto.RegisterEnum("fish.Code", Code_name, Code_value)
	proto.RegisterType((*TimeSyncReq)(nil), "fish.TimeSyncReq")
	proto.RegisterType((*TimeSyncAck)(nil), "fish.TimeSyncAck")
	proto.RegisterType((*Player)(nil), "fish.Player")
	proto.RegisterType((*Bullet)(nil), "fish.Bullet")
	proto.RegisterType((*Fish)(nil), "fish.Fish")
	proto.RegisterType((*ShootReq)(nil), "fish.ShootReq")
	proto.RegisterType((*HitReq)(nil), "fish.HitReq")
	proto.RegisterType((*GameInitAck)(nil), "fish.GameInitAck")
	proto.RegisterType((*KillFish)(nil), "fish.KillFish")
	proto.RegisterType((*FishSeed)(nil), "fish.FishSeed")
	proto.RegisterType((*GameUpdateAck)(nil), "fish.GameUpdateAck")
}

func init() { proto.RegisterFile("fish.proto", fileDescriptor_f6e43ef05c84ed98) }

var fileDescriptor_f6e43ef05c84ed98 = []byte{
	// 1365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x57, 0x4b, 0x6f, 0x1c, 0xc5,
	0x13, 0xf7, 0xec, 0xcb, 0xeb, 0xb6, 0xff, 0xff, 0x6c, 0x46, 0x51, 0x34, 0x44, 0xd1, 0xf6, 0x32,
	0xe2, 0xb1, 0xe2, 0xe1, 0x28, 0x80, 0x40, 0x4a, 0x84, 0x44, 0xd6, 0xc2, 0xe0, 0x04, 0x01, 0x6a,
	0x87, 0x03, 0x1c, 0x90, 0x76, 0x67, 0xda, 0xde, 0x96, 0x77, 0x67, 0x96, 0x99, 0x59, 0xb3, 0x7b,
	0xe3, 0xc8, 0x11, 0x71, 0x40, 0x3c, 0x2f, 0x70, 0xe1, 0xa3, 0x70, 0x42, 0x39, 0x70, 0xe0, 0x34,
	0x42, 0xc9, 0x6d, 0x8f, 0xfb, 0x09, 0x50, 0x55, 0x75, 0x4f, 0xb7, 0x39, 0xc5, 0x0e, 0x37, 0x4e,
	0xae, 0xdf, 0x6f, 0xaa, 0x6a, 0xab, 0xeb, 0xd1, 0xd5, 0x66, 0xec, 0x48, 0xe5, 0xe3, 0xdd, 0x59,
	0x96, 0x16, 0xa9, 0xdf, 0x00, 0xf9, 0xda, 0xcb, 0xc7, 0xaa, 0x18, 0xcf, 0x47, 0xbb, 0x51, 0x3a,
	0xbd, 0x71, 0x9c, 0x1e, 0xa7, 0x37, 0xf0, 0xe3, 0x68, 0x7e, 0x84, 0x08, 0x01, 0x4a, 0x64, 0x14,
	0x3e, 0xcd, 0xb6, 0xef, 0xab, 0xa9, 0x3c, 0x5c, 0x26, 0x91, 0x90, 0x9f, 0xf9, 0x3e, 0x6b, 0x14,
	0x2a, 0x3a, 0x09, 0xbc, 0x9e, 0xd7, 0xaf, 0x0b, 0x94, 0xc3, 0x37, 0xad, 0xca, 0x9d, 0xe8, 0xc4,
	0xbf, 0xca, 0x5a, 0xd1, 0x44, 0xc9, 0xa4, 0xd0, 0x4a, 0x1a, 0x01, 0x9f, 0xcb, 0xec, 0x54, 0x66,
	0x41, 0x8d, 0x78, 0x42, 0xe1, 0xef, 0x35, 0xd6, 0xfa, 0x70, 0x32, 0x5c, 0xca, 0xcc, 0x7f, 0x89,
	0xd5, 0x54, 0x8c, 0x66, 0xcd, 0xc1, 0xf5, 0x55, 0xc9, 0x6b, 0x2a, 0x5e, 0x97, 0xdc, 0x1f, 0xe5,
	0x69, 0x72, 0x2b, 0x54, 0x71, 0xd8, 0x9b, 0xe6, 0xc7, 0x28, 0x88, 0x9a, 0x8a, 0xfd, 0xd7, 0x59,
	0x43, 0x45, 0x69, 0x82, 0xee, 0x9a, 0x83, 0x70, 0x55, 0x72, 0xc4, 0xeb, 0x92, 0x5f, 0xd5, 0x16,
	0x51, 0x9a, 0x18, 0x1b, 0x10, 0x05, 0x7e, 0xf7, 0x6f, 0xb2, 0xfa, 0xa9, 0x9a, 0x05, 0x75, 0x34,
	0xe3, 0xab, 0x92, 0x03, 0x5c, 0x97, 0xfc, 0x0a, 0x59, 0x9d, 0xaa, 0x99, 0x36, 0x02, 0x49, 0xc0,
	0x47, 0xff, 0x36, 0x6b, 0x46, 0xe3, 0xa1, 0xca, 0x82, 0x06, 0x1a, 0x3d, 0xbb, 0x2a, 0x39, 0x11,
	0xeb, 0x92, 0x07, 0x64, 0x86, 0x50, 0x1b, 0x92, 0x2c, 0x48, 0x05, 0xe2, 0x8c, 0x52, 0x95, 0x04,
	0x4d, 0x38, 0x36, 0xc5, 0x09, 0xd8, 0xc6, 0x09, 0xc8, 0x58, 0x82, 0x28, 0xf0, 0x3b, 0xd8, 0x25,
	0xc3, 0xa9, 0x0c, 0x5a, 0x3d, 0xaf, 0xbf, 0x45, 0x76, 0x80, 0xad, 0x1d, 0x20, 0x6d, 0x87, 0xa2,
	0xc0, 0xef, 0xe1, 0x17, 0x0d, 0xd6, 0x1a, 0xcc, 0x27, 0x13, 0x59, 0x9c, 0x33, 0xa1, 0x37, 0x59,
	0x7d, 0xae, 0x62, 0x9d, 0x4f, 0x4c, 0xcc, 0x1c, 0xf5, 0x75, 0x62, 0xe6, 0x95, 0x01, 0x48, 0x02,
	0x3e, 0xfa, 0x6f, 0x55, 0xc5, 0xa6, 0x74, 0xf6, 0x57, 0x25, 0xd7, 0xcc, 0xba, 0xe4, 0xd7, 0xf4,
	0xf9, 0x10, 0x9b, 0x13, 0x12, 0xa8, 0xda, 0xe2, 0x6d, 0xb6, 0x19, 0x65, 0x72, 0x58, 0xc8, 0x18,
	0x93, 0x5b, 0x1f, 0xbc, 0xb8, 0x2a, 0xb9, 0xa1, 0xd6, 0x25, 0xbf, 0xae, 0x7d, 0x10, 0x61, 0x9c,
	0x68, 0x24, 0x8c, 0x22, 0xc4, 0x3e, 0x92, 0x05, 0xe6, 0x58, 0xc7, 0x3e, 0x92, 0x85, 0x8d, 0x7d,
	0x24, 0xcd, 0xef, 0x83, 0x24, 0xe0, 0xa3, 0xff, 0x01, 0xdb, 0x8a, 0x55, 0x26, 0xa3, 0x42, 0xa5,
	0x09, 0x26, 0xd9, 0x1b, 0xdc, 0x5c, 0x95, 0xdc, 0x92, 0xeb, 0x92, 0xf7, 0xc8, 0xbc, 0xa2, 0xb4,
	0x13, 0x8b, 0x85, 0x55, 0xf7, 0x9f, 0x67, 0xde, 0x22, 0xd8, 0x44, 0x47, 0x4f, 0xad, 0x4a, 0xee,
	0x2d, 0xd6, 0x25, 0xef, 0x90, 0x83, 0x85, 0x36, 0x5c, 0x84, 0xc2, 0x5b, 0x80, 0xe2, 0x32, 0x68,
	0x5b, 0xc5, 0xa5, 0x55, 0x5c, 0x6a, 0xc5, 0x65, 0x28, 0xbc, 0x25, 0xb4, 0x00, 0x0c, 0x6d, 0xb0,
	0x65, 0x5b, 0x1c, 0xb0, 0x6d, 0x01, 0x40, 0xda, 0x02, 0x45, 0x81, 0xdf, 0xc3, 0x3f, 0x1a, 0xac,
	0xb1, 0xaf, 0xf2, 0xf1, 0x39, 0x1b, 0xe0, 0x36, 0x6b, 0x16, 0xd3, 0xd9, 0x81, 0x69, 0x01, 0x6c,
	0x73, 0x24, 0x6c, 0x9b, 0x23, 0xd4, 0x66, 0x24, 0x0b, 0x52, 0x81, 0x56, 0x98, 0x0d, 0x8b, 0xf1,
	0x41, 0xec, 0xb6, 0x02, 0x31, 0xb6, 0x15, 0x08, 0x6b, 0x7b, 0x0d, 0x84, 0xd6, 0x82, 0x9f, 0x1f,
	0xa5, 0x8b, 0x83, 0xd8, 0x9d, 0x32, 0x24, 0xec, 0xcf, 0x23, 0x34, 0x95, 0x44, 0x59, 0x90, 0x0a,
	0x18, 0xe7, 0x33, 0x29, 0x63, 0x6c, 0x01, 0x8f, 0x8c, 0x91, 0xb0, 0xc6, 0x08, 0xb5, 0x31, 0xc9,
	0x82, 0x54, 0xdc, 0x26, 0x6c, 0x3d, 0x41, 0x13, 0x9e, 0xe9, 0xa8, 0xcd, 0x7f, 0xab, 0xa3, 0xda,
	0x8f, 0xdb, 0x51, 0x5b, 0x8f, 0xd1, 0x51, 0x50, 0xe2, 0x2c, 0x4d, 0x67, 0x01, 0xeb, 0x79, 0xfd,
	0xb6, 0x2e, 0x31, 0x10, 0x4e, 0x89, 0x01, 0x9a, 0x12, 0xa3, 0x2c, 0x48, 0x25, 0xfc, 0xb2, 0xc6,
	0xda, 0x87, 0xe3, 0x34, 0x2d, 0x60, 0x15, 0x98, 0xde, 0xf4, 0xce, 0xd7, 0x9b, 0xce, 0x95, 0x51,
	0xbb, 0xe0, 0x95, 0xa1, 0x67, 0xbd, 0x7e, 0xd1, 0x59, 0x6f, 0x3c, 0x79, 0x65, 0xc2, 0x6f, 0x3c,
	0xd6, 0x7a, 0x57, 0x61, 0x22, 0xee, 0xb2, 0xf6, 0x08, 0xaf, 0xdb, 0x03, 0x33, 0x69, 0xbb, 0xab,
	0x92, 0x57, 0xdc, 0xba, 0xe4, 0x5d, 0x1d, 0x98, 0x66, 0x4c, 0x74, 0x06, 0x8a, 0x4a, 0x17, 0x92,
	0x03, 0x49, 0xaa, 0x46, 0x10, 0x93, 0x43, 0x8c, 0x4d, 0x0e, 0x61, 0x27, 0xb5, 0x38, 0x44, 0x5a,
	0xf8, 0xb9, 0xc9, 0xb6, 0xdf, 0x19, 0x4e, 0xe5, 0x41, 0xa2, 0x0a, 0x58, 0xc7, 0x50, 0xf0, 0xe1,
	0x68, 0x22, 0x75, 0x68, 0x54, 0x70, 0x20, 0x9c, 0x82, 0x03, 0x34, 0x05, 0x47, 0x59, 0x90, 0x0a,
	0xd4, 0x18, 0xd7, 0x7d, 0xcd, 0xae, 0x2e, 0xc0, 0xb6, 0xc6, 0xf8, 0x00, 0xd0, 0x96, 0x20, 0xd2,
	0x93, 0x00, 0x87, 0x31, 0x92, 0x89, 0xd4, 0x35, 0xa2, 0x61, 0x04, 0xc2, 0x19, 0x46, 0x80, 0x66,
	0x18, 0x51, 0x16, 0xa4, 0xe2, 0xdf, 0x65, 0x9b, 0x33, 0x7c, 0x0f, 0xe4, 0x41, 0xa3, 0x57, 0xef,
	0x6f, 0xbf, 0xb2, 0xb3, 0x8b, 0xaf, 0x18, 0x7a, 0x24, 0x50, 0x14, 0xa0, 0x60, 0xa3, 0x00, 0x64,
	0xee, 0x14, 0x10, 0x85, 0x71, 0xe0, 0xbf, 0x47, 0xf9, 0x94, 0x79, 0xd0, 0x44, 0x57, 0x8c, 0x5c,
	0xc1, 0xdd, 0x68, 0x73, 0x2b, 0xf3, 0xb3, 0xb9, 0x95, 0xb9, 0x93, 0x5b, 0x99, 0xeb, 0xdc, 0xca,
	0x1c, 0x22, 0xa3, 0x4a, 0xe5, 0x41, 0xcb, 0x8d, 0x8c, 0xb6, 0x2d, 0x45, 0x06, 0x0a, 0x36, 0x32,
	0x40, 0x4e, 0xb9, 0x43, 0x61, 0x1c, 0x40, 0x47, 0x4e, 0x87, 0x0b, 0xb2, 0xc4, 0xbb, 0xa2, 0x49,
	0x1d, 0x59, 0x91, 0xb6, 0x23, 0x2b, 0x4a, 0x7b, 0xb2, 0x58, 0x58, 0x75, 0xff, 0x53, 0xb6, 0x73,
	0xa4, 0x32, 0x79, 0x90, 0x14, 0x32, 0x3b, 0x1d, 0x4e, 0xf0, 0xda, 0x68, 0x0e, 0x6e, 0xad, 0x4a,
	0x7e, 0x86, 0x5f, 0x97, 0xfc, 0x39, 0x73, 0x54, 0xcb, 0x56, 0x07, 0x76, 0x28, 0x71, 0xc6, 0x0e,
	0xda, 0x3c, 0x2f, 0xd2, 0xd9, 0xbe, 0xca, 0x24, 0xde, 0x34, 0x6d, 0x6a, 0x73, 0xc3, 0xd9, 0x36,
	0x37, 0x8c, 0x29, 0xae, 0x81, 0xa2, 0xd2, 0x0d, 0x7f, 0xf5, 0x58, 0xfb, 0x9e, 0x9a, 0x4c, 0x2e,
	0xb0, 0xa3, 0x2e, 0xf0, 0x48, 0xc1, 0x6e, 0x4c, 0x33, 0xea, 0xc6, 0xba, 0xe9, 0xc6, 0x34, 0x3b,
	0xd3, 0x8d, 0xa9, 0x0d, 0x18, 0x65, 0x41, 0x2a, 0xe1, 0x9c, 0xb5, 0x21, 0xca, 0x43, 0x58, 0x13,
	0xe7, 0xde, 0xa6, 0xb4, 0x91, 0x1a, 0xe7, 0xdf, 0x48, 0xe1, 0x2f, 0x9b, 0xec, 0x7f, 0x30, 0xc6,
	0x1f, 0xcd, 0xe2, 0x61, 0x21, 0x61, 0x90, 0xdd, 0xfc, 0x7b, 0x4f, 0x96, 0xff, 0x0b, 0xcf, 0xf5,
	0xc7, 0x6c, 0x3b, 0xff, 0x5c, 0x15, 0xd1, 0xf8, 0xd0, 0x99, 0xee, 0x37, 0x56, 0x25, 0x77, 0xe9,
	0x75, 0xc9, 0x9f, 0xd1, 0x91, 0x58, 0xd2, 0x04, 0xe3, 0x30, 0xc2, 0x35, 0xfa, 0x8f, 0x4c, 0xfd,
	0x7d, 0xc6, 0x62, 0x25, 0x07, 0xda, 0xdd, 0x66, 0xaf, 0xde, 0x6f, 0x0e, 0x5e, 0x5b, 0x95, 0xdc,
	0x61, 0xd7, 0x25, 0x0f, 0xcd, 0x26, 0x32, 0x5c, 0xb5, 0x8a, 0x2a, 0x42, 0x38, 0x16, 0xb4, 0xdd,
	0xe4, 0x3e, 0x1d, 0xb9, 0x8d, 0x4e, 0xf5, 0x76, 0xd3, 0xa4, 0xbb, 0xdd, 0x34, 0x65, 0x5d, 0x6a,
	0x2c, 0xac, 0xba, 0x7f, 0x8f, 0x35, 0x4f, 0xd4, 0x64, 0x92, 0x07, 0x5b, 0x78, 0xe0, 0xff, 0xd3,
	0x81, 0xcd, 0xc4, 0x52, 0x2b, 0xa3, 0x82, 0x6d, 0x65, 0x84, 0xda, 0x29, 0xc9, 0x82, 0x54, 0xfc,
	0x7d, 0xd6, 0xc8, 0x61, 0x0c, 0x98, 0xeb, 0xcb, 0xcc, 0x14, 0xa5, 0x2f, 0xa7, 0xa9, 0xd0, 0xe9,
	0xcb, 0x9d, 0xa1, 0xc0, 0x99, 0xc0, 0xef, 0xf0, 0x48, 0x4b, 0x8f, 0x8e, 0x26, 0x2a, 0x91, 0xc1,
	0x36, 0x9e, 0x11, 0x1f, 0x69, 0x9a, 0xb2, 0x8f, 0x34, 0x4d, 0x68, 0x07, 0x06, 0x09, 0xa3, 0x08,
	0x73, 0x14, 0xcb, 0x3c, 0xca, 0xd4, 0x48, 0x06, 0x3b, 0xbd, 0x7a, 0x7f, 0x8b, 0xe6, 0xc8, 0x70,
	0x76, 0x8e, 0x0c, 0x63, 0x32, 0x65, 0xa0, 0xa8, 0x74, 0x5f, 0xf8, 0xda, 0x63, 0x8d, 0xbd, 0x34,
	0x96, 0xfe, 0x0e, 0x6b, 0xc3, 0xdf, 0xf7, 0xd3, 0x44, 0x76, 0x36, 0xfc, 0x2b, 0xec, 0x12, 0x20,
	0xe7, 0x1f, 0xe7, 0xce, 0xb7, 0x7b, 0xff, 0x64, 0xef, 0x44, 0x27, 0x9d, 0xef, 0xf6, 0xfc, 0xcb,
	0x6c, 0x07, 0x58, 0xf3, 0xac, 0xea, 0x7c, 0xbf, 0xe7, 0x5f, 0x62, 0x0c, 0x28, 0x7a, 0x5e, 0x74,
	0x7e, 0xac, 0x2c, 0x9d, 0xb5, 0xde, 0xf9, 0x61, 0xcf, 0xbf, 0xca, 0x2e, 0x1b, 0xb6, 0xba, 0x25,
	0x3a, 0x3f, 0xed, 0x0d, 0xba, 0xbf, 0x3d, 0xec, 0x7a, 0x0f, 0x1e, 0x76, 0xbd, 0xbf, 0x1e, 0x76,
	0xbd, 0xaf, 0x1e, 0x75, 0x37, 0x1e, 0x3c, 0xea, 0x6e, 0xfc, 0xf9, 0xa8, 0xbb, 0xf1, 0x09, 0x3e,
	0xc0, 0x46, 0x2d, 0xfc, 0xcf, 0xfe, 0xd5, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xab, 0x1a, 0x6f,
	0x0c, 0x1c, 0x10, 0x00, 0x00,
}

func (m *TimeSyncReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSyncReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSyncReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tick != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TimeSyncAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSyncAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TimeSyncAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Server != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Server))
		i--
		dAtA[i] = 0x10
	}
	if m.Client != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Client))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Player) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Player) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Player) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFish(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x32
	}
	if m.Coin != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Coin))
		i--
		dAtA[i] = 0x28
	}
	if m.Chair != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Chair))
		i--
		dAtA[i] = 0x20
	}
	if m.Vip != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Vip))
		i--
		dAtA[i] = 0x18
	}
	if m.Icon != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Icon))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Bullet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bullet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bullet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Fish != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Fish))
		i--
		dAtA[i] = 0x48
	}
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x41
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x39
	}
	if m.Direction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Direction))))
		i--
		dAtA[i] = 0x31
	}
	if m.Bet != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Bet))
		i--
		dAtA[i] = 0x28
	}
	if m.Created != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x20
	}
	if m.Client != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Client))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Fish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Fish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Fish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Troop {
		i--
		if m.Troop {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Y != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Y))))
		i--
		dAtA[i] = 0x49
	}
	if m.X != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.X))))
		i--
		dAtA[i] = 0x41
	}
	if m.Direction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Direction))))
		i--
		dAtA[i] = 0x39
	}
	if m.Created != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Created))
		i--
		dAtA[i] = 0x30
	}
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x29
	}
	if m.BoxId != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.BoxId))
		i--
		dAtA[i] = 0x20
	}
	if m.PathId != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.PathId))
		i--
		dAtA[i] = 0x18
	}
	if m.TmpId != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.TmpId))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ShootReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShootReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShootReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Direction != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Direction))))
		i--
		dAtA[i] = 0x21
	}
	if m.Bet != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Bet))
		i--
		dAtA[i] = 0x18
	}
	if m.Client != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Client))
		i--
		dAtA[i] = 0x10
	}
	if m.Fish != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Fish))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HitReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HitReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HitReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FishId != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.FishId))
		i--
		dAtA[i] = 0x10
	}
	if m.BulletId != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.BulletId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameInitAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameInitAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameInitAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StopFire {
		i--
		if m.StopFire {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.FireInterval != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.FireInterval))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxBullet != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.MaxBullet))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Bullets) > 0 {
		for iNdEx := len(m.Bullets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bullets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fishes) > 0 {
		for iNdEx := len(m.Fishes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fishes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Scene != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Scene))
		i--
		dAtA[i] = 0x18
	}
	if m.Tick != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x10
	}
	if m.Table != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Table))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *KillFish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KillFish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KillFish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Score != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if m.Uid != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FishSeed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FishSeed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FishSeed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Speed != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i--
		dAtA[i] = 0x21
	}
	if m.Id != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameUpdateAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameUpdateAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameUpdateAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Describe) > 0 {
		for iNdEx := len(m.Describe) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Describe[iNdEx])
			copy(dAtA[i:], m.Describe[iNdEx])
			i = encodeVarintFish(dAtA, i, uint64(len(m.Describe[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Offline) > 0 {
		dAtA2 := make([]byte, len(m.Offline)*10)
		var j1 int
		for _, num1 := range m.Offline {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintFish(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Seed) > 0 {
		for iNdEx := len(m.Seed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Seed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Kills) > 0 {
		for iNdEx := len(m.Kills) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Kills[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.DieFishes) > 0 {
		dAtA4 := make([]byte, len(m.DieFishes)*10)
		var j3 int
		for _, num1 := range m.DieFishes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintFish(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DieBullets) > 0 {
		dAtA6 := make([]byte, len(m.DieBullets)*10)
		var j5 int
		for _, num1 := range m.DieBullets {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintFish(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Bullets) > 0 {
		for iNdEx := len(m.Bullets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bullets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Fishes) > 0 {
		for iNdEx := len(m.Fishes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Fishes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Players) > 0 {
		for iNdEx := len(m.Players) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Players[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SwitchScene != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.SwitchScene))
		i--
		dAtA[i] = 0x18
	}
	if m.Tick != 0 {
		i = encodeVarintFish(dAtA, i, uint64(m.Tick))
		i--
		dAtA[i] = 0x10
	}
	if m.StopFire {
		i--
		if m.StopFire {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFish(dAtA []byte, offset int, v uint64) int {
	offset -= sovFish(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TimeSyncReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tick != 0 {
		n += 1 + sovFish(uint64(m.Tick))
	}
	return n
}

func (m *TimeSyncAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != 0 {
		n += 1 + sovFish(uint64(m.Client))
	}
	if m.Server != 0 {
		n += 1 + sovFish(uint64(m.Server))
	}
	return n
}

func (m *Player) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFish(uint64(m.Id))
	}
	if m.Icon != 0 {
		n += 1 + sovFish(uint64(m.Icon))
	}
	if m.Vip != 0 {
		n += 1 + sovFish(uint64(m.Vip))
	}
	if m.Chair != 0 {
		n += 1 + sovFish(uint64(m.Chair))
	}
	if m.Coin != 0 {
		n += 1 + sovFish(uint64(m.Coin))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFish(uint64(l))
	}
	return n
}

func (m *Bullet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFish(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovFish(uint64(m.Uid))
	}
	if m.Client != 0 {
		n += 1 + sovFish(uint64(m.Client))
	}
	if m.Created != 0 {
		n += 1 + sovFish(uint64(m.Created))
	}
	if m.Bet != 0 {
		n += 1 + sovFish(uint64(m.Bet))
	}
	if m.Direction != 0 {
		n += 9
	}
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Fish != 0 {
		n += 1 + sovFish(uint64(m.Fish))
	}
	return n
}

func (m *Fish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFish(uint64(m.Id))
	}
	if m.TmpId != 0 {
		n += 1 + sovFish(uint64(m.TmpId))
	}
	if m.PathId != 0 {
		n += 1 + sovFish(uint64(m.PathId))
	}
	if m.BoxId != 0 {
		n += 1 + sovFish(uint64(m.BoxId))
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Created != 0 {
		n += 1 + sovFish(uint64(m.Created))
	}
	if m.Direction != 0 {
		n += 9
	}
	if m.X != 0 {
		n += 9
	}
	if m.Y != 0 {
		n += 9
	}
	if m.Troop {
		n += 2
	}
	return n
}

func (m *ShootReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Fish != 0 {
		n += 1 + sovFish(uint64(m.Fish))
	}
	if m.Client != 0 {
		n += 1 + sovFish(uint64(m.Client))
	}
	if m.Bet != 0 {
		n += 1 + sovFish(uint64(m.Bet))
	}
	if m.Direction != 0 {
		n += 9
	}
	return n
}

func (m *HitReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BulletId != 0 {
		n += 1 + sovFish(uint64(m.BulletId))
	}
	if m.FishId != 0 {
		n += 1 + sovFish(uint64(m.FishId))
	}
	return n
}

func (m *GameInitAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Table != 0 {
		n += 1 + sovFish(uint64(m.Table))
	}
	if m.Tick != 0 {
		n += 1 + sovFish(uint64(m.Tick))
	}
	if m.Scene != 0 {
		n += 1 + sovFish(uint64(m.Scene))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Fishes) > 0 {
		for _, e := range m.Fishes {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Bullets) > 0 {
		for _, e := range m.Bullets {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if m.MaxBullet != 0 {
		n += 1 + sovFish(uint64(m.MaxBullet))
	}
	if m.FireInterval != 0 {
		n += 1 + sovFish(uint64(m.FireInterval))
	}
	if m.StopFire {
		n += 2
	}
	return n
}

func (m *KillFish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFish(uint64(m.Id))
	}
	if m.Uid != 0 {
		n += 1 + sovFish(uint64(m.Uid))
	}
	if m.Score != 0 {
		n += 1 + sovFish(uint64(m.Score))
	}
	return n
}

func (m *FishSeed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovFish(uint64(m.Id))
	}
	if m.Speed != 0 {
		n += 9
	}
	return n
}

func (m *GameUpdateAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StopFire {
		n += 2
	}
	if m.Tick != 0 {
		n += 1 + sovFish(uint64(m.Tick))
	}
	if m.SwitchScene != 0 {
		n += 1 + sovFish(uint64(m.SwitchScene))
	}
	if len(m.Players) > 0 {
		for _, e := range m.Players {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Fishes) > 0 {
		for _, e := range m.Fishes {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Bullets) > 0 {
		for _, e := range m.Bullets {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.DieBullets) > 0 {
		l = 0
		for _, e := range m.DieBullets {
			l += sovFish(uint64(e))
		}
		n += 1 + sovFish(uint64(l)) + l
	}
	if len(m.DieFishes) > 0 {
		l = 0
		for _, e := range m.DieFishes {
			l += sovFish(uint64(e))
		}
		n += 1 + sovFish(uint64(l)) + l
	}
	if len(m.Kills) > 0 {
		for _, e := range m.Kills {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Seed) > 0 {
		for _, e := range m.Seed {
			l = e.Size()
			n += 1 + l + sovFish(uint64(l))
		}
	}
	if len(m.Offline) > 0 {
		l = 0
		for _, e := range m.Offline {
			l += sovFish(uint64(e))
		}
		n += 1 + sovFish(uint64(l)) + l
	}
	if len(m.Describe) > 0 {
		for _, s := range m.Describe {
			l = len(s)
			n += 1 + l + sovFish(uint64(l))
		}
	}
	return n
}

func sovFish(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFish(x uint64) (n int) {
	return sovFish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TimeSyncReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSyncReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSyncReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeSyncAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSyncAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSyncAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Player) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Player: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Player: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vip", wireType)
			}
			m.Vip = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vip |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chair", wireType)
			}
			m.Chair = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Chair |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			m.Coin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Coin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bullet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bullet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bullet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Direction = float64(math.Float64frombits(v))
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fish", wireType)
			}
			m.Fish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fish |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Fish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Fish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Fish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TmpId", wireType)
			}
			m.TmpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TmpId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathId", wireType)
			}
			m.PathId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PathId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			m.BoxId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			m.Created = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Created |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Direction = float64(math.Float64frombits(v))
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.X = float64(math.Float64frombits(v))
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Y = float64(math.Float64frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Troop", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Troop = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShootReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShootReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShootReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fish", wireType)
			}
			m.Fish = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fish |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Direction = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HitReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HitReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HitReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BulletId", wireType)
			}
			m.BulletId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BulletId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FishId", wireType)
			}
			m.FishId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FishId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameInitAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameInitAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameInitAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			m.Table = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Table |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene", wireType)
			}
			m.Scene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Scene |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fishes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fishes = append(m.Fishes, &Fish{})
			if err := m.Fishes[len(m.Fishes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bullets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bullets = append(m.Bullets, &Bullet{})
			if err := m.Bullets[len(m.Bullets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBullet", wireType)
			}
			m.MaxBullet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxBullet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FireInterval", wireType)
			}
			m.FireInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FireInterval |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopFire", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopFire = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KillFish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KillFish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KillFish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FishSeed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FishSeed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FishSeed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameUpdateAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameUpdateAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameUpdateAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StopFire", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.StopFire = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tick", wireType)
			}
			m.Tick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwitchScene", wireType)
			}
			m.SwitchScene = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SwitchScene |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Players = append(m.Players, &Player{})
			if err := m.Players[len(m.Players)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fishes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fishes = append(m.Fishes, &Fish{})
			if err := m.Fishes[len(m.Fishes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bullets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bullets = append(m.Bullets, &Bullet{})
			if err := m.Bullets[len(m.Bullets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DieBullets = append(m.DieBullets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DieBullets) == 0 {
					m.DieBullets = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DieBullets = append(m.DieBullets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DieBullets", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.DieFishes = append(m.DieFishes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.DieFishes) == 0 {
					m.DieFishes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.DieFishes = append(m.DieFishes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field DieFishes", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kills", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kills = append(m.Kills, &KillFish{})
			if err := m.Kills[len(m.Kills)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = append(m.Seed, &FishSeed{})
			if err := m.Seed[len(m.Seed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offline = append(m.Offline, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFish
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthFish
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthFish
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Offline) == 0 {
					m.Offline = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFish
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offline = append(m.Offline, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Describe = append(m.Describe, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFish
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthFish
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFish
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFish(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthFish
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFish = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFish   = fmt.Errorf("proto: integer overflow")
)
