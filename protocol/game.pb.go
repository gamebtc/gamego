// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

package protocol

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name" bson:"name" msg:"name"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id" bson:"id" msg:"id"`
	Game    int32  `protobuf:"varint,3,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
	Level   int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level" bson:"level" msg:"level"`
	Cap     int32  `protobuf:"varint,5,opt,name=cap,proto3" json:"cap" bson:"cap" msg:"cap"`
	Ante    int64  `protobuf:"varint,6,opt,name=ante,proto3" json:"ante" bson:"ante" msg:"ante"`
	DoorMin int64  `protobuf:"varint,7,opt,name=doorMin,proto3" json:"doorMin" bson:"doorMin" msg:"doorMin"`
	DoorMax int64  `protobuf:"varint,8,opt,name=doorMax,proto3" json:"doorMax" bson:"doorMax" msg:"doorMax"`
	StayMin int64  `protobuf:"varint,9,opt,name=stayMin,proto3" json:"stayMin" bson:"stayMin" msg:"stayMin"`
	StayMax int64  `protobuf:"varint,10,opt,name=stayMax,proto3" json:"stayMax" bson:"stayMax" msg:"stayMax"`
	PlayMin int64  `protobuf:"varint,11,opt,name=playMin,proto3" json:"playMin" bson:"playMin" msg:"playMin"`
	PlayMax int64  `protobuf:"varint,12,opt,name=playMax,proto3" json:"playMax" bson:"playMax" msg:"playMax"`
	CoinKey string `protobuf:"bytes,13,opt,name=coinKey,proto3" json:"coinKey" bson:"coinKey" msg:"coinKey"`
	Icon    int32  `protobuf:"varint,14,opt,name=icon,proto3" json:"icon" bson:"icon" msg:"icon"`
	Online  int32  `protobuf:"varint,15,opt,name=online,proto3" json:"online" bson:"online" msg:"online"`
}

func (m *RoomInfo) Reset()         { *m = RoomInfo{} }
func (m *RoomInfo) String() string { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()    {}
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{0}
}
func (m *RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomInfo.Merge(m, src)
}
func (m *RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomInfo proto.InternalMessageInfo

func (m *RoomInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomInfo) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *RoomInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoomInfo) GetCap() int32 {
	if m != nil {
		return m.Cap
	}
	return 0
}

func (m *RoomInfo) GetAnte() int64 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *RoomInfo) GetDoorMin() int64 {
	if m != nil {
		return m.DoorMin
	}
	return 0
}

func (m *RoomInfo) GetDoorMax() int64 {
	if m != nil {
		return m.DoorMax
	}
	return 0
}

func (m *RoomInfo) GetStayMin() int64 {
	if m != nil {
		return m.StayMin
	}
	return 0
}

func (m *RoomInfo) GetStayMax() int64 {
	if m != nil {
		return m.StayMax
	}
	return 0
}

func (m *RoomInfo) GetPlayMin() int64 {
	if m != nil {
		return m.PlayMin
	}
	return 0
}

func (m *RoomInfo) GetPlayMax() int64 {
	if m != nil {
		return m.PlayMax
	}
	return 0
}

func (m *RoomInfo) GetCoinKey() string {
	if m != nil {
		return m.CoinKey
	}
	return ""
}

func (m *RoomInfo) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RoomInfo) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

// 获取游戏列表
type GameKindReq struct {
	Game int32 `protobuf:"varint,1,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
}

func (m *GameKindReq) Reset()         { *m = GameKindReq{} }
func (m *GameKindReq) String() string { return proto.CompactTextString(m) }
func (*GameKindReq) ProtoMessage()    {}
func (*GameKindReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{1}
}
func (m *GameKindReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameKindReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameKindReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameKindReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameKindReq.Merge(m, src)
}
func (m *GameKindReq) XXX_Size() int {
	return m.Size()
}
func (m *GameKindReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GameKindReq.DiscardUnknown(m)
}

var xxx_messageInfo_GameKindReq proto.InternalMessageInfo

func (m *GameKindReq) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

type GameKindAck struct {
	Rooms []*RoomInfo `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms" bson:"rooms" msg:"rooms"`
}

func (m *GameKindAck) Reset()         { *m = GameKindAck{} }
func (m *GameKindAck) String() string { return proto.CompactTextString(m) }
func (*GameKindAck) ProtoMessage()    {}
func (*GameKindAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{2}
}
func (m *GameKindAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameKindAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameKindAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameKindAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameKindAck.Merge(m, src)
}
func (m *GameKindAck) XXX_Size() int {
	return m.Size()
}
func (m *GameKindAck) XXX_DiscardUnknown() {
	xxx_messageInfo_GameKindAck.DiscardUnknown(m)
}

var xxx_messageInfo_GameKindAck proto.InternalMessageInfo

func (m *GameKindAck) GetRooms() []*RoomInfo {
	if m != nil {
		return m.Rooms
	}
	return nil
}

// 用户连接房间
type LoginGameReq struct {
	Game  int32  `protobuf:"varint,1,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level" bson:"level" msg:"level"`
	Room  int32  `protobuf:"varint,3,opt,name=room,proto3" json:"room" bson:"room" msg:"room"`
	Args  string `protobuf:"bytes,4,opt,name=args,proto3" json:"args" bson:"args" msg:"args"`
}

func (m *LoginGameReq) Reset()         { *m = LoginGameReq{} }
func (m *LoginGameReq) String() string { return proto.CompactTextString(m) }
func (*LoginGameReq) ProtoMessage()    {}
func (*LoginGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{3}
}
func (m *LoginGameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginGameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginGameReq.Merge(m, src)
}
func (m *LoginGameReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginGameReq proto.InternalMessageInfo

func (m *LoginGameReq) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *LoginGameReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LoginGameReq) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *LoginGameReq) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// 用户连接房间
type LoginGameAck struct {
	Game int32  `protobuf:"varint,1,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
	Room int32  `protobuf:"varint,2,opt,name=room,proto3" json:"room" bson:"room" msg:"room"`
	Code int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg" bson:"msg" msg:"msg"`
}

func (m *LoginGameAck) Reset()         { *m = LoginGameAck{} }
func (m *LoginGameAck) String() string { return proto.CompactTextString(m) }
func (*LoginGameAck) ProtoMessage()    {}
func (*LoginGameAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{4}
}
func (m *LoginGameAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginGameAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginGameAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoginGameAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginGameAck.Merge(m, src)
}
func (m *LoginGameAck) XXX_Size() int {
	return m.Size()
}
func (m *LoginGameAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginGameAck.DiscardUnknown(m)
}

var xxx_messageInfo_LoginGameAck proto.InternalMessageInfo

func (m *LoginGameAck) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *LoginGameAck) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *LoginGameAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoginGameAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 消息转发到房间失败，需要重新连接房间
type SendGameFail struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg" bson:"msg" msg:"msg"`
	Game int32  `protobuf:"varint,3,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
	Room int32  `protobuf:"varint,4,opt,name=room,proto3" json:"room" bson:"room" msg:"room"`
}

func (m *SendGameFail) Reset()         { *m = SendGameFail{} }
func (m *SendGameFail) String() string { return proto.CompactTextString(m) }
func (*SendGameFail) ProtoMessage()    {}
func (*SendGameFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{5}
}
func (m *SendGameFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendGameFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendGameFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendGameFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendGameFail.Merge(m, src)
}
func (m *SendGameFail) XXX_Size() int {
	return m.Size()
}
func (m *SendGameFail) XXX_DiscardUnknown() {
	xxx_messageInfo_SendGameFail.DiscardUnknown(m)
}

var xxx_messageInfo_SendGameFail proto.InternalMessageInfo

func (m *SendGameFail) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SendGameFail) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SendGameFail) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *SendGameFail) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

// 请求退出游戏
type ExitGameReq struct {
	Game int32 `protobuf:"varint,1,opt,name=game,proto3" json:"game" bson:"game" msg:"game"`
	Room int32 `protobuf:"varint,2,opt,name=room,proto3" json:"room" bson:"room" msg:"room"`
}

func (m *ExitGameReq) Reset()         { *m = ExitGameReq{} }
func (m *ExitGameReq) String() string { return proto.CompactTextString(m) }
func (*ExitGameReq) ProtoMessage()    {}
func (*ExitGameReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{6}
}
func (m *ExitGameReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitGameReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitGameReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitGameReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitGameReq.Merge(m, src)
}
func (m *ExitGameReq) XXX_Size() int {
	return m.Size()
}
func (m *ExitGameReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitGameReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExitGameReq proto.InternalMessageInfo

func (m *ExitGameReq) GetGame() int32 {
	if m != nil {
		return m.Game
	}
	return 0
}

func (m *ExitGameReq) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

// 请求退出游戏
type ExitGameAck struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg" bson:"msg" msg:"msg"`
}

func (m *ExitGameAck) Reset()         { *m = ExitGameAck{} }
func (m *ExitGameAck) String() string { return proto.CompactTextString(m) }
func (*ExitGameAck) ProtoMessage()    {}
func (*ExitGameAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_38fc58335341d769, []int{7}
}
func (m *ExitGameAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitGameAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitGameAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExitGameAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitGameAck.Merge(m, src)
}
func (m *ExitGameAck) XXX_Size() int {
	return m.Size()
}
func (m *ExitGameAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitGameAck.DiscardUnknown(m)
}

var xxx_messageInfo_ExitGameAck proto.InternalMessageInfo

func (m *ExitGameAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ExitGameAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*RoomInfo)(nil), "protocol.RoomInfo")
	proto.RegisterType((*GameKindReq)(nil), "protocol.GameKindReq")
	proto.RegisterType((*GameKindAck)(nil), "protocol.GameKindAck")
	proto.RegisterType((*LoginGameReq)(nil), "protocol.LoginGameReq")
	proto.RegisterType((*LoginGameAck)(nil), "protocol.LoginGameAck")
	proto.RegisterType((*SendGameFail)(nil), "protocol.SendGameFail")
	proto.RegisterType((*ExitGameReq)(nil), "protocol.ExitGameReq")
	proto.RegisterType((*ExitGameAck)(nil), "protocol.ExitGameAck")
}

func init() { proto.RegisterFile("game.proto", fileDescriptor_38fc58335341d769) }

var fileDescriptor_38fc58335341d769 = []byte{
	// 648 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6a, 0xdb, 0x4e,
	0x10, 0xc7, 0x23, 0xf9, 0x4f, 0x9c, 0x75, 0x7e, 0xbf, 0x82, 0x28, 0x61, 0x31, 0x41, 0x12, 0x3a,
	0x14, 0x53, 0xa8, 0x02, 0x29, 0xf4, 0x10, 0xe8, 0xa1, 0x86, 0xa6, 0x94, 0xb4, 0x97, 0x2d, 0x7d,
	0x80, 0xb5, 0xa4, 0xa8, 0x4b, 0xa5, 0x5d, 0xd7, 0x72, 0x8a, 0xf2, 0x16, 0x7d, 0x92, 0x3e, 0x47,
	0xe9, 0x29, 0xf4, 0xd4, 0x93, 0x28, 0xf6, 0x1b, 0xe8, 0x09, 0xca, 0xec, 0x1f, 0x59, 0x75, 0x7d,
	0xb0, 0x03, 0x3d, 0x69, 0x66, 0xf6, 0xfb, 0xd9, 0x99, 0x5d, 0xcd, 0x2c, 0x42, 0x29, 0xcd, 0x93,
	0x70, 0x36, 0x17, 0x0b, 0xe1, 0x0c, 0xe4, 0x27, 0x12, 0xd9, 0xe8, 0x49, 0xca, 0x16, 0x1f, 0x6e,
	0xa6, 0x61, 0x24, 0xf2, 0xb3, 0x54, 0xa4, 0xe2, 0x4c, 0xae, 0x4c, 0x6f, 0xae, 0xa5, 0x27, 0x1d,
	0x69, 0x29, 0x30, 0xf8, 0xda, 0x47, 0x03, 0x22, 0x44, 0xfe, 0x9a, 0x5f, 0x0b, 0x27, 0x44, 0x5d,
	0x4e, 0xf3, 0x04, 0x5b, 0xbe, 0x35, 0x3e, 0x9a, 0x8c, 0xea, 0xca, 0x3b, 0x99, 0x16, 0x82, 0x5f,
	0x04, 0x10, 0x0d, 0xfc, 0xbc, 0x48, 0xb5, 0x49, 0xa4, 0xce, 0x79, 0x84, 0x6c, 0x16, 0x63, 0xdb,
	0xb7, 0xc6, 0xbd, 0xc9, 0x49, 0x5d, 0x79, 0x8e, 0x52, 0xb3, 0x58, 0x6b, 0x59, 0x1c, 0x10, 0x9b,
	0xc5, 0xb0, 0x2f, 0xd4, 0x8a, 0x3b, 0x52, 0xd9, 0xda, 0x37, 0x5d, 0xef, 0x9b, 0xaa, 0x7d, 0xe1,
	0xe3, 0x9c, 0xa3, 0x5e, 0x96, 0x7c, 0x4e, 0x32, 0xdc, 0x95, 0xc0, 0x69, 0x5d, 0x79, 0x58, 0x01,
	0x32, 0xac, 0x09, 0x65, 0x13, 0x25, 0x75, 0x1e, 0xa3, 0x4e, 0x44, 0x67, 0xb8, 0x27, 0x09, 0x5c,
	0x57, 0xde, 0x43, 0x45, 0x44, 0x74, 0xa6, 0xf5, 0x60, 0x11, 0x10, 0x41, 0x3d, 0x94, 0x2f, 0x12,
	0xdc, 0xf7, 0xad, 0x71, 0xa7, 0x5d, 0x0f, 0x44, 0xb5, 0x5a, 0x9a, 0x44, 0xea, 0x9c, 0x0b, 0x74,
	0x18, 0x0b, 0x31, 0x7f, 0xcb, 0x38, 0x3e, 0x94, 0x88, 0x5f, 0x57, 0xde, 0xa9, 0x42, 0xf4, 0x82,
	0xa6, 0x8c, 0x47, 0x0c, 0xd0, 0xb0, 0xb4, 0xc4, 0x83, 0xad, 0x2c, 0x2d, 0xdb, 0x2c, 0x2d, 0x0d,
	0x4b, 0x4b, 0x60, 0x8b, 0x05, 0xbd, 0x85, 0xbc, 0x47, 0x9b, 0xac, 0x5e, 0xd0, 0xac, 0xf1, 0x88,
	0x01, 0x1a, 0x96, 0x96, 0x18, 0x6d, 0x65, 0x9b, 0xbc, 0xc6, 0x23, 0x06, 0x00, 0x76, 0x96, 0xa9,
	0xbc, 0xc3, 0x4d, 0x56, 0x2f, 0x68, 0xd6, 0x78, 0xc4, 0x00, 0x0d, 0x4b, 0x4b, 0x7c, 0xbc, 0x95,
	0x6d, 0xf2, 0x1a, 0x8f, 0x18, 0x00, 0xd8, 0x48, 0x30, 0x7e, 0x95, 0xdc, 0xe2, 0xff, 0x64, 0x0b,
	0xb6, 0x58, 0xbd, 0x60, 0xfe, 0xa5, 0xf6, 0x88, 0x01, 0xe0, 0x9f, 0xb2, 0x48, 0x70, 0xfc, 0xff,
	0x66, 0x8f, 0x41, 0xd4, 0xf4, 0x23, 0x98, 0x44, 0xea, 0x9c, 0x67, 0xa8, 0x2f, 0x78, 0xc6, 0x78,
	0x82, 0x1f, 0x48, 0xc2, 0xad, 0x2b, 0x6f, 0xa4, 0x08, 0x15, 0xd7, 0x8c, 0x76, 0x88, 0x56, 0x07,
	0xcf, 0xd1, 0xf0, 0x15, 0xcd, 0x93, 0x2b, 0xc6, 0x63, 0x92, 0x7c, 0x6a, 0x5a, 0xdb, 0xda, 0xad,
	0xb5, 0x83, 0xf7, 0x6b, 0xfc, 0x45, 0xf4, 0xd1, 0xb9, 0x44, 0xbd, 0xb9, 0x10, 0x79, 0x81, 0x2d,
	0xbf, 0x33, 0x1e, 0x9e, 0x3b, 0xa1, 0x99, 0xe3, 0xd0, 0x0c, 0x65, 0xbb, 0xfb, 0xa5, 0x54, 0x6f,
	0xaa, 0x6c, 0xa2, 0xf0, 0xe0, 0x87, 0x85, 0x8e, 0xdf, 0x88, 0x94, 0x71, 0xd8, 0xfc, 0x1e, 0x75,
	0xad, 0x47, 0xce, 0xde, 0x7d, 0xe4, 0x42, 0xd4, 0x85, 0xec, 0x7f, 0x8f, 0x35, 0x44, 0x5b, 0x65,
	0x06, 0x44, 0xea, 0xe4, 0xd8, 0xcd, 0xd3, 0x42, 0x4e, 0xf5, 0x1f, 0xcf, 0x0b, 0x44, 0xcd, 0xd8,
	0x81, 0x49, 0xa4, 0x2e, 0xf8, 0xde, 0x3e, 0x14, 0xdc, 0xd6, 0xbe, 0x87, 0x32, 0x05, 0xda, 0xbb,
	0x17, 0x18, 0x89, 0x78, 0xcb, 0x3b, 0x05, 0xd1, 0xa6, 0xf3, 0x62, 0xd8, 0x1f, 0x3e, 0xf0, 0xe6,
	0xe4, 0x45, 0xaa, 0xcf, 0xd3, 0x7a, 0x73, 0xf2, 0x22, 0xd5, 0x6a, 0xb0, 0x08, 0x88, 0xe4, 0x61,
	0xde, 0x25, 0x3c, 0x86, 0xb3, 0x5c, 0x52, 0x96, 0x35, 0xc9, 0xac, 0xfd, 0x92, 0xd9, 0x3b, 0x24,
	0xdb, 0xfb, 0xc1, 0x35, 0x17, 0xd5, 0xdd, 0xed, 0xa2, 0x82, 0x1c, 0x0d, 0x5f, 0x96, 0x6c, 0x71,
	0xdf, 0x66, 0xdb, 0xf3, 0xbf, 0x04, 0x6c, 0x9d, 0x4e, 0xb7, 0xc1, 0xbf, 0xba, 0xb9, 0x09, 0xfe,
	0xb6, 0x74, 0xad, 0xbb, 0xa5, 0x6b, 0xfd, 0x5a, 0xba, 0xd6, 0x97, 0x95, 0x7b, 0x70, 0xb7, 0x72,
	0x0f, 0x7e, 0xae, 0xdc, 0x83, 0x69, 0x5f, 0x8e, 0xe6, 0xd3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x01, 0xfd, 0x33, 0x7d, 0x77, 0x07, 0x00, 0x00,
}

func (m *RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Game != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.Cap != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cap))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Ante))
	}
	if m.DoorMin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DoorMin))
	}
	if m.DoorMax != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DoorMax))
	}
	if m.StayMin != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.StayMin))
	}
	if m.StayMax != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.StayMax))
	}
	if m.PlayMin != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.PlayMin))
	}
	if m.PlayMax != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.PlayMax))
	}
	if len(m.CoinKey) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.CoinKey)))
		i += copy(dAtA[i:], m.CoinKey)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Icon))
	}
	if m.Online != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Online))
	}
	return i, nil
}

func (m *GameKindReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameKindReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Game != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	return i, nil
}

func (m *GameKindAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameKindAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LoginGameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginGameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Game != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.Room != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	return i, nil
}

func (m *LoginGameAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginGameAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Game != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	if m.Room != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *SendGameFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendGameFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Game != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	if m.Room != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	return i, nil
}

func (m *ExitGameReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitGameReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Game != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Game))
	}
	if m.Room != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	return i, nil
}

func (m *ExitGameAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitGameAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.Cap != 0 {
		n += 1 + sovGame(uint64(m.Cap))
	}
	if m.Ante != 0 {
		n += 1 + sovGame(uint64(m.Ante))
	}
	if m.DoorMin != 0 {
		n += 1 + sovGame(uint64(m.DoorMin))
	}
	if m.DoorMax != 0 {
		n += 1 + sovGame(uint64(m.DoorMax))
	}
	if m.StayMin != 0 {
		n += 1 + sovGame(uint64(m.StayMin))
	}
	if m.StayMax != 0 {
		n += 1 + sovGame(uint64(m.StayMax))
	}
	if m.PlayMin != 0 {
		n += 1 + sovGame(uint64(m.PlayMin))
	}
	if m.PlayMax != 0 {
		n += 1 + sovGame(uint64(m.PlayMax))
	}
	l = len(m.CoinKey)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovGame(uint64(m.Icon))
	}
	if m.Online != 0 {
		n += 1 + sovGame(uint64(m.Online))
	}
	return n
}

func (m *GameKindReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	return n
}

func (m *GameKindAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *LoginGameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *LoginGameAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *SendGameFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	return n
}

func (m *ExitGameReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Game != 0 {
		n += 1 + sovGame(uint64(m.Game))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	return n
}

func (m *ExitGameAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func sovGame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			m.Cap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cap |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorMin", wireType)
			}
			m.DoorMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorMax", wireType)
			}
			m.DoorMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayMin", wireType)
			}
			m.StayMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayMax", wireType)
			}
			m.StayMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMin", wireType)
			}
			m.PlayMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayMin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMax", wireType)
			}
			m.PlayMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayMax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameKindReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameKindReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameKindReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameKindAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameKindAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameKindAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &RoomInfo{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginGameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginGameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginGameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginGameAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginGameAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginGameAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendGameFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendGameFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendGameFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitGameReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitGameReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitGameReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Game", wireType)
			}
			m.Game = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Game |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitGameAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitGameAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitGameAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthGame
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)
