// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: game.proto

package protocol

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RoomInfo struct {
	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name" msg:"name"`
	Id      int32  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty" bson:"id" msg:"id"`
	Kind    int32  `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty" bson:"kind" msg:"kind"`
	Level   int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty" bson:"level" msg:"level"`
	Cap     int32  `protobuf:"varint,5,opt,name=cap,proto3" json:"cap,omitempty" bson:"cap" msg:"cap"`
	Ante    int64  `protobuf:"varint,6,opt,name=ante,proto3" json:"ante,omitempty" bson:"ante" msg:"ante"`
	DoorMin int64  `protobuf:"varint,7,opt,name=doorMin,proto3" json:"doorMin,omitempty" bson:"doorMin" msg:"doorMin"`
	DoorMax int64  `protobuf:"varint,8,opt,name=doorMax,proto3" json:"doorMax,omitempty" bson:"doorMax" msg:"doorMax"`
	StayMin int64  `protobuf:"varint,9,opt,name=stayMin,proto3" json:"stayMin,omitempty" bson:"stayMin" msg:"stayMin"`
	StayMax int64  `protobuf:"varint,10,opt,name=stayMax,proto3" json:"stayMax,omitempty" bson:"stayMax" msg:"stayMax"`
	PlayMin int64  `protobuf:"varint,11,opt,name=playMin,proto3" json:"playMin,omitempty" bson:"playMin" msg:"playMin"`
	PlayMax int64  `protobuf:"varint,12,opt,name=playMax,proto3" json:"playMax,omitempty" bson:"playMax" msg:"playMax"`
	CoinKey string `protobuf:"bytes,13,opt,name=coinKey,proto3" json:"coinKey,omitempty" bson:"coinKey" msg:"coinKey"`
	Icon    int32  `protobuf:"varint,14,opt,name=icon,proto3" json:"icon,omitempty" bson:"icon" msg:"icon"`
	Online  int32  `protobuf:"varint,15,opt,name=online,proto3" json:"online,omitempty" bson:"online" msg:"online"`
}

func (m *RoomInfo) Reset()         { *m = RoomInfo{} }
func (m *RoomInfo) String() string { return proto.CompactTextString(m) }
func (*RoomInfo) ProtoMessage()    {}
func (*RoomInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{0}
}
func (m *RoomInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomInfo.Merge(dst, src)
}
func (m *RoomInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoomInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoomInfo proto.InternalMessageInfo

func (m *RoomInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RoomInfo) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *RoomInfo) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *RoomInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RoomInfo) GetCap() int32 {
	if m != nil {
		return m.Cap
	}
	return 0
}

func (m *RoomInfo) GetAnte() int64 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *RoomInfo) GetDoorMin() int64 {
	if m != nil {
		return m.DoorMin
	}
	return 0
}

func (m *RoomInfo) GetDoorMax() int64 {
	if m != nil {
		return m.DoorMax
	}
	return 0
}

func (m *RoomInfo) GetStayMin() int64 {
	if m != nil {
		return m.StayMin
	}
	return 0
}

func (m *RoomInfo) GetStayMax() int64 {
	if m != nil {
		return m.StayMax
	}
	return 0
}

func (m *RoomInfo) GetPlayMin() int64 {
	if m != nil {
		return m.PlayMin
	}
	return 0
}

func (m *RoomInfo) GetPlayMax() int64 {
	if m != nil {
		return m.PlayMax
	}
	return 0
}

func (m *RoomInfo) GetCoinKey() string {
	if m != nil {
		return m.CoinKey
	}
	return ""
}

func (m *RoomInfo) GetIcon() int32 {
	if m != nil {
		return m.Icon
	}
	return 0
}

func (m *RoomInfo) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

// 获取房间列表
type RoomListReq struct {
	Kind int32 `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty" bson:"kind" msg:"kind"`
}

func (m *RoomListReq) Reset()         { *m = RoomListReq{} }
func (m *RoomListReq) String() string { return proto.CompactTextString(m) }
func (*RoomListReq) ProtoMessage()    {}
func (*RoomListReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{1}
}
func (m *RoomListReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomListReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomListReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomListReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomListReq.Merge(dst, src)
}
func (m *RoomListReq) XXX_Size() int {
	return m.Size()
}
func (m *RoomListReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomListReq.DiscardUnknown(m)
}

var xxx_messageInfo_RoomListReq proto.InternalMessageInfo

func (m *RoomListReq) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

type RoomListAck struct {
	Rooms []*RoomInfo `protobuf:"bytes,1,rep,name=rooms,proto3" json:"rooms,omitempty" bson:"rooms" msg:"rooms"`
}

func (m *RoomListAck) Reset()         { *m = RoomListAck{} }
func (m *RoomListAck) String() string { return proto.CompactTextString(m) }
func (*RoomListAck) ProtoMessage()    {}
func (*RoomListAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{2}
}
func (m *RoomListAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoomListAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoomListAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RoomListAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoomListAck.Merge(dst, src)
}
func (m *RoomListAck) XXX_Size() int {
	return m.Size()
}
func (m *RoomListAck) XXX_DiscardUnknown() {
	xxx_messageInfo_RoomListAck.DiscardUnknown(m)
}

var xxx_messageInfo_RoomListAck proto.InternalMessageInfo

func (m *RoomListAck) GetRooms() []*RoomInfo {
	if m != nil {
		return m.Rooms
	}
	return nil
}

// 用户连接房间
type LoginRoomReq struct {
	Kind  int32  `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty" bson:"kind" msg:"kind"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty" bson:"level" msg:"level"`
	Room  int32  `protobuf:"varint,3,opt,name=room,proto3" json:"room,omitempty" bson:"room" msg:"room"`
	Args  string `protobuf:"bytes,4,opt,name=args,proto3" json:"args,omitempty" bson:"args" msg:"args"`
}

func (m *LoginRoomReq) Reset()         { *m = LoginRoomReq{} }
func (m *LoginRoomReq) String() string { return proto.CompactTextString(m) }
func (*LoginRoomReq) ProtoMessage()    {}
func (*LoginRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{3}
}
func (m *LoginRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRoomReq.Merge(dst, src)
}
func (m *LoginRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *LoginRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRoomReq proto.InternalMessageInfo

func (m *LoginRoomReq) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *LoginRoomReq) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *LoginRoomReq) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *LoginRoomReq) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

// 用户连接房间
type LoginRoomAck struct {
	Kind int32  `protobuf:"varint,1,opt,name=kind,proto3" json:"kind,omitempty" bson:"kind" msg:"kind"`
	Room int32  `protobuf:"varint,2,opt,name=room,proto3" json:"room,omitempty" bson:"room" msg:"room"`
	Code int32  `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty" bson:"msg" msg:"msg"`
}

func (m *LoginRoomAck) Reset()         { *m = LoginRoomAck{} }
func (m *LoginRoomAck) String() string { return proto.CompactTextString(m) }
func (*LoginRoomAck) ProtoMessage()    {}
func (*LoginRoomAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{4}
}
func (m *LoginRoomAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoginRoomAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoginRoomAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *LoginRoomAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRoomAck.Merge(dst, src)
}
func (m *LoginRoomAck) XXX_Size() int {
	return m.Size()
}
func (m *LoginRoomAck) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRoomAck.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRoomAck proto.InternalMessageInfo

func (m *LoginRoomAck) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *LoginRoomAck) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *LoginRoomAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *LoginRoomAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 消息转发到房间失败，需要重新连接房间
type SendRoomFail struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" bson:"msg" msg:"msg"`
	Kind int32  `protobuf:"varint,3,opt,name=kind,proto3" json:"kind,omitempty" bson:"kind" msg:"kind"`
	Room int32  `protobuf:"varint,4,opt,name=room,proto3" json:"room,omitempty" bson:"room" msg:"room"`
}

func (m *SendRoomFail) Reset()         { *m = SendRoomFail{} }
func (m *SendRoomFail) String() string { return proto.CompactTextString(m) }
func (*SendRoomFail) ProtoMessage()    {}
func (*SendRoomFail) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{5}
}
func (m *SendRoomFail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendRoomFail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendRoomFail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *SendRoomFail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendRoomFail.Merge(dst, src)
}
func (m *SendRoomFail) XXX_Size() int {
	return m.Size()
}
func (m *SendRoomFail) XXX_DiscardUnknown() {
	xxx_messageInfo_SendRoomFail.DiscardUnknown(m)
}

var xxx_messageInfo_SendRoomFail proto.InternalMessageInfo

func (m *SendRoomFail) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SendRoomFail) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SendRoomFail) GetKind() int32 {
	if m != nil {
		return m.Kind
	}
	return 0
}

func (m *SendRoomFail) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

// 请求退出房间
type ExitRoomReq struct {
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" bson:"id" msg:"id"`
}

func (m *ExitRoomReq) Reset()         { *m = ExitRoomReq{} }
func (m *ExitRoomReq) String() string { return proto.CompactTextString(m) }
func (*ExitRoomReq) ProtoMessage()    {}
func (*ExitRoomReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{6}
}
func (m *ExitRoomReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRoomReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRoomReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExitRoomReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRoomReq.Merge(dst, src)
}
func (m *ExitRoomReq) XXX_Size() int {
	return m.Size()
}
func (m *ExitRoomReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRoomReq.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRoomReq proto.InternalMessageInfo

func (m *ExitRoomReq) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 请求退出房间
type ExitRoomAck struct {
	Code int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty" bson:"code" msg:"code"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty" bson:"msg" msg:"msg"`
}

func (m *ExitRoomAck) Reset()         { *m = ExitRoomAck{} }
func (m *ExitRoomAck) String() string { return proto.CompactTextString(m) }
func (*ExitRoomAck) ProtoMessage()    {}
func (*ExitRoomAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_game_b1f22e7ddc94e046, []int{7}
}
func (m *ExitRoomAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExitRoomAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExitRoomAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ExitRoomAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExitRoomAck.Merge(dst, src)
}
func (m *ExitRoomAck) XXX_Size() int {
	return m.Size()
}
func (m *ExitRoomAck) XXX_DiscardUnknown() {
	xxx_messageInfo_ExitRoomAck.DiscardUnknown(m)
}

var xxx_messageInfo_ExitRoomAck proto.InternalMessageInfo

func (m *ExitRoomAck) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ExitRoomAck) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*RoomInfo)(nil), "protocol.RoomInfo")
	proto.RegisterType((*RoomListReq)(nil), "protocol.RoomListReq")
	proto.RegisterType((*RoomListAck)(nil), "protocol.RoomListAck")
	proto.RegisterType((*LoginRoomReq)(nil), "protocol.LoginRoomReq")
	proto.RegisterType((*LoginRoomAck)(nil), "protocol.LoginRoomAck")
	proto.RegisterType((*SendRoomFail)(nil), "protocol.SendRoomFail")
	proto.RegisterType((*ExitRoomReq)(nil), "protocol.ExitRoomReq")
	proto.RegisterType((*ExitRoomAck)(nil), "protocol.ExitRoomAck")
}
func (m *RoomInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Id != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	if m.Kind != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	}
	if m.Level != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.Cap != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Cap))
	}
	if m.Ante != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Ante))
	}
	if m.DoorMin != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DoorMin))
	}
	if m.DoorMax != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.DoorMax))
	}
	if m.StayMin != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.StayMin))
	}
	if m.StayMax != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.StayMax))
	}
	if m.PlayMin != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.PlayMin))
	}
	if m.PlayMax != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.PlayMax))
	}
	if len(m.CoinKey) > 0 {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.CoinKey)))
		i += copy(dAtA[i:], m.CoinKey)
	}
	if m.Icon != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Icon))
	}
	if m.Online != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Online))
	}
	return i, nil
}

func (m *RoomListReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomListReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	}
	return i, nil
}

func (m *RoomListAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoomListAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, msg := range m.Rooms {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGame(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *LoginRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRoomReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	}
	if m.Level != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Level))
	}
	if m.Room != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	if len(m.Args) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Args)))
		i += copy(dAtA[i:], m.Args)
	}
	return i, nil
}

func (m *LoginRoomAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoginRoomAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Kind != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	}
	if m.Room != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	if m.Code != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *SendRoomFail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendRoomFail) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	if m.Kind != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Kind))
	}
	if m.Room != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Room))
	}
	return i, nil
}

func (m *ExitRoomReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRoomReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Id))
	}
	return i, nil
}

func (m *ExitRoomAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExitRoomAck) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGame(dAtA, i, uint64(m.Code))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintGame(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func encodeVarintGame(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RoomInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	if m.Kind != 0 {
		n += 1 + sovGame(uint64(m.Kind))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.Cap != 0 {
		n += 1 + sovGame(uint64(m.Cap))
	}
	if m.Ante != 0 {
		n += 1 + sovGame(uint64(m.Ante))
	}
	if m.DoorMin != 0 {
		n += 1 + sovGame(uint64(m.DoorMin))
	}
	if m.DoorMax != 0 {
		n += 1 + sovGame(uint64(m.DoorMax))
	}
	if m.StayMin != 0 {
		n += 1 + sovGame(uint64(m.StayMin))
	}
	if m.StayMax != 0 {
		n += 1 + sovGame(uint64(m.StayMax))
	}
	if m.PlayMin != 0 {
		n += 1 + sovGame(uint64(m.PlayMin))
	}
	if m.PlayMax != 0 {
		n += 1 + sovGame(uint64(m.PlayMax))
	}
	l = len(m.CoinKey)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Icon != 0 {
		n += 1 + sovGame(uint64(m.Icon))
	}
	if m.Online != 0 {
		n += 1 + sovGame(uint64(m.Online))
	}
	return n
}

func (m *RoomListReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovGame(uint64(m.Kind))
	}
	return n
}

func (m *RoomListAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rooms) > 0 {
		for _, e := range m.Rooms {
			l = e.Size()
			n += 1 + l + sovGame(uint64(l))
		}
	}
	return n
}

func (m *LoginRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovGame(uint64(m.Kind))
	}
	if m.Level != 0 {
		n += 1 + sovGame(uint64(m.Level))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *LoginRoomAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Kind != 0 {
		n += 1 + sovGame(uint64(m.Kind))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func (m *SendRoomFail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	if m.Kind != 0 {
		n += 1 + sovGame(uint64(m.Kind))
	}
	if m.Room != 0 {
		n += 1 + sovGame(uint64(m.Room))
	}
	return n
}

func (m *ExitRoomReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGame(uint64(m.Id))
	}
	return n
}

func (m *ExitRoomAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovGame(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGame(uint64(l))
	}
	return n
}

func sovGame(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGame(x uint64) (n int) {
	return sovGame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RoomInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cap", wireType)
			}
			m.Cap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cap |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorMin", wireType)
			}
			m.DoorMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorMin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DoorMax", wireType)
			}
			m.DoorMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DoorMax |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayMin", wireType)
			}
			m.StayMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayMin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StayMax", wireType)
			}
			m.StayMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StayMax |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMin", wireType)
			}
			m.PlayMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayMin |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayMax", wireType)
			}
			m.PlayMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlayMax |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			m.Icon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Icon |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			m.Online = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Online |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomListReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomListReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomListReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoomListAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoomListAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoomListAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rooms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rooms = append(m.Rooms, &RoomInfo{})
			if err := m.Rooms[len(m.Rooms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoginRoomAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoginRoomAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoginRoomAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendRoomFail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendRoomFail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendRoomFail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kind", wireType)
			}
			m.Kind = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Kind |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRoomReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRoomReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRoomReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExitRoomAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExitRoomAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExitRoomAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGame
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGame
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGame
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGame(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGame = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGame   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("game.proto", fileDescriptor_game_b1f22e7ddc94e046) }

var fileDescriptor_game_b1f22e7ddc94e046 = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x95, 0xcf, 0x6a, 0xdc, 0x3e,
	0x10, 0xc7, 0xa3, 0xfd, 0x97, 0x44, 0x9b, 0xdf, 0xaf, 0x60, 0x4a, 0x10, 0x21, 0x78, 0x17, 0x1f,
	0xca, 0x52, 0xa8, 0x03, 0x29, 0xed, 0x21, 0xd0, 0x43, 0x03, 0x0d, 0x94, 0xa6, 0x17, 0x95, 0x3e,
	0x80, 0xd6, 0x76, 0x5c, 0x11, 0x5b, 0xda, 0xae, 0x9d, 0xe2, 0xbc, 0x45, 0x9f, 0xa4, 0xcf, 0x51,
	0x7a, 0x0a, 0x3d, 0xf5, 0x64, 0x4a, 0xf2, 0x06, 0x7e, 0x82, 0x32, 0x23, 0xc9, 0x71, 0x93, 0x40,
	0x37, 0x85, 0x9e, 0x3c, 0x33, 0xfa, 0x7e, 0x3c, 0x1a, 0x79, 0x46, 0xa6, 0x34, 0x15, 0x79, 0x12,
	0x2e, 0x96, 0xba, 0xd4, 0xde, 0x06, 0x3e, 0x22, 0x9d, 0xed, 0x3c, 0x49, 0x65, 0xf9, 0xe1, 0x6c,
	0x1e, 0x46, 0x3a, 0xdf, 0x4b, 0x75, 0xaa, 0xf7, 0x70, 0x65, 0x7e, 0x76, 0x82, 0x1e, 0x3a, 0x68,
	0x19, 0x30, 0xf8, 0x32, 0xa2, 0x1b, 0x5c, 0xeb, 0xfc, 0xb5, 0x3a, 0xd1, 0x5e, 0x48, 0x07, 0x4a,
	0xe4, 0x09, 0x23, 0x53, 0x32, 0xdb, 0x3c, 0xdc, 0x69, 0xea, 0xc9, 0xf6, 0xbc, 0xd0, 0xea, 0x20,
	0x80, 0x68, 0x30, 0xcd, 0x8b, 0xd4, 0x9a, 0x1c, 0x75, 0xde, 0x23, 0xda, 0x93, 0x31, 0xeb, 0x4d,
	0xc9, 0x6c, 0x78, 0xb8, 0xdd, 0xd4, 0x13, 0xcf, 0xa8, 0x65, 0x6c, 0xb5, 0x32, 0x0e, 0x78, 0x4f,
	0xc6, 0xf0, 0xde, 0x53, 0xa9, 0x62, 0xd6, 0x47, 0x65, 0xe7, 0xbd, 0x10, 0xb5, 0x5a, 0x34, 0x39,
	0xea, 0xbc, 0x7d, 0x3a, 0xcc, 0x92, 0x4f, 0x49, 0xc6, 0x06, 0x08, 0xec, 0x36, 0xf5, 0x84, 0x19,
	0x00, 0xc3, 0x96, 0x30, 0x36, 0x37, 0x52, 0xef, 0x31, 0xed, 0x47, 0x62, 0xc1, 0x86, 0x48, 0xb0,
	0xa6, 0x9e, 0x3c, 0x34, 0x44, 0x24, 0x16, 0x56, 0x0f, 0x16, 0x07, 0x11, 0xec, 0x47, 0xa8, 0x32,
	0x61, 0xa3, 0x29, 0x99, 0xf5, 0xbb, 0xfb, 0x81, 0xa8, 0x55, 0xa3, 0xc9, 0x51, 0xe7, 0x1d, 0xd0,
	0xf5, 0x58, 0xeb, 0xe5, 0x5b, 0xa9, 0xd8, 0x3a, 0x22, 0xd3, 0xa6, 0x9e, 0xec, 0x1a, 0xc4, 0x2e,
	0x58, 0xca, 0x79, 0xdc, 0x01, 0x2d, 0x2b, 0x2a, 0xb6, 0x71, 0x27, 0x2b, 0xaa, 0x2e, 0x2b, 0x2a,
	0xc7, 0x8a, 0x0a, 0xd8, 0xa2, 0x14, 0xe7, 0x90, 0x77, 0xf3, 0x26, 0x6b, 0x17, 0x2c, 0xeb, 0x3c,
	0xee, 0x80, 0x96, 0x15, 0x15, 0xa3, 0x77, 0xb2, 0x6d, 0x5e, 0xe7, 0x71, 0x07, 0x00, 0xbb, 0xc8,
	0x4c, 0xde, 0xf1, 0x4d, 0xd6, 0x2e, 0x58, 0xd6, 0x79, 0xdc, 0x01, 0x2d, 0x2b, 0x2a, 0xb6, 0x75,
	0x27, 0xdb, 0xe6, 0x75, 0x1e, 0x77, 0x00, 0xb0, 0x91, 0x96, 0xea, 0x4d, 0x72, 0xce, 0xfe, 0xc3,
	0x16, 0xec, 0xb0, 0x76, 0xc1, 0x7d, 0x4b, 0xeb, 0x71, 0x07, 0xc0, 0x37, 0x95, 0x91, 0x56, 0xec,
	0xff, 0x9b, 0x3d, 0x06, 0x51, 0xd7, 0x8f, 0x60, 0x72, 0xd4, 0x79, 0xcf, 0xe9, 0x48, 0xab, 0x4c,
	0xaa, 0x84, 0x3d, 0x40, 0xc2, 0x6f, 0xea, 0xc9, 0x8e, 0x21, 0x4c, 0xdc, 0x32, 0xd6, 0xe1, 0x56,
	0x1d, 0xbc, 0xa0, 0x63, 0x98, 0x97, 0x63, 0x59, 0x94, 0x3c, 0xf9, 0xd8, 0xb6, 0x36, 0x59, 0xad,
	0xb5, 0x83, 0xf7, 0xd7, 0xf8, 0xcb, 0xe8, 0xd4, 0x3b, 0xa2, 0xc3, 0xa5, 0xd6, 0x79, 0xc1, 0xc8,
	0xb4, 0x3f, 0x1b, 0xef, 0x7b, 0xa1, 0x9b, 0xe3, 0xd0, 0x0d, 0x65, 0xb7, 0xfb, 0x51, 0x6a, 0x5f,
	0x6a, 0x6c, 0x6e, 0xf0, 0xe0, 0x3b, 0xa1, 0x5b, 0xc7, 0x3a, 0x95, 0x0a, 0xb0, 0xbf, 0xd8, 0xd7,
	0xf5, 0xc8, 0xf5, 0x56, 0x1f, 0xb9, 0x90, 0x0e, 0x20, 0xfb, 0xed, 0xb1, 0x86, 0x68, 0x67, 0x9b,
	0x01, 0x47, 0x1d, 0x8e, 0xdd, 0x32, 0x2d, 0x70, 0xaa, 0x7f, 0xbb, 0x5e, 0x20, 0xea, 0xc6, 0x0e,
	0x4c, 0x8e, 0xba, 0xe0, 0x5b, 0xb7, 0x28, 0x38, 0xad, 0xfb, 0x16, 0xe5, 0x36, 0xd8, 0x5b, 0x7d,
	0x83, 0x91, 0x8e, 0x93, 0xdb, 0x05, 0x41, 0xb4, 0xed, 0xbc, 0x18, 0xee, 0x05, 0x78, 0xc0, 0x9d,
	0x93, 0x17, 0xa9, 0xad, 0xa7, 0x73, 0xe7, 0xe4, 0x45, 0x6a, 0xd5, 0x60, 0x71, 0x10, 0x61, 0x31,
	0xef, 0x12, 0x15, 0x43, 0x2d, 0x47, 0x42, 0x66, 0x6d, 0x32, 0x72, 0xbf, 0x64, 0xbd, 0x15, 0x92,
	0xdd, 0xfb, 0xc2, 0x75, 0x07, 0x35, 0x58, 0xed, 0xa0, 0x82, 0x67, 0x74, 0xfc, 0xaa, 0x92, 0xa5,
	0x6b, 0x36, 0xf3, 0x1f, 0x20, 0x7f, 0xfa, 0x0f, 0x04, 0xf2, 0x1a, 0xb3, 0x9f, 0xf3, 0x5f, 0x9d,
	0xc0, 0x21, 0xfb, 0x7a, 0xe9, 0x93, 0x8b, 0x4b, 0x9f, 0xfc, 0xbc, 0xf4, 0xc9, 0xe7, 0x2b, 0x7f,
	0xed, 0xe2, 0xca, 0x5f, 0xfb, 0x71, 0xe5, 0xaf, 0xcd, 0x47, 0x38, 0x62, 0x4f, 0x7f, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xdf, 0x78, 0x72, 0xd5, 0x3f, 0x07, 0x00, 0x00,
}
