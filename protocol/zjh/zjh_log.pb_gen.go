package zjh

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActionLog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Start, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "t":
			err = z.Type.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "u":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "c":
			z.Bet, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "p":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]int32, zb0002)
			}
			for za0001 := range z.Players {
				z.Players[za0001], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Players", za0001)
					return
				}
			}
		case "w":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Winners")
				return
			}
			if cap(z.Winners) >= int(zb0003) {
				z.Winners = (z.Winners)[:zb0003]
			} else {
				z.Winners = make([]int32, zb0003)
			}
			for za0002 := range z.Winners {
				z.Winners[za0002], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Winners", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActionLog) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.Uid == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Bet == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Players == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Winners == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = z.Type.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "u"
		err = en.Append(0xa1, 0x75)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.Uid)
		if err != nil {
			err = msgp.WrapError(err, "Uid")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "c"
		err = en.Append(0xa1, 0x63)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.Bet)
		if err != nil {
			err = msgp.WrapError(err, "Bet")
			return
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "p"
		err = en.Append(0xa1, 0x70)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Players)))
		if err != nil {
			err = msgp.WrapError(err, "Players")
			return
		}
		for za0001 := range z.Players {
			err = en.WriteInt32(z.Players[za0001])
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "w"
		err = en.Append(0xa1, 0x77)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Winners)))
		if err != nil {
			err = msgp.WrapError(err, "Winners")
			return
		}
		for za0002 := range z.Winners {
			err = en.WriteInt32(z.Winners[za0002])
			if err != nil {
				err = msgp.WrapError(err, "Winners", za0002)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActionLog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.Uid == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Bet == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.Players == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.Winners == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt64(o, z.Start)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o, err = z.Type.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "u"
		o = append(o, 0xa1, 0x75)
		o = msgp.AppendInt32(o, z.Uid)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "c"
		o = append(o, 0xa1, 0x63)
		o = msgp.AppendInt32(o, z.Bet)
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "p"
		o = append(o, 0xa1, 0x70)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Players)))
		for za0001 := range z.Players {
			o = msgp.AppendInt32(o, z.Players[za0001])
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "w"
		o = append(o, 0xa1, 0x77)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Winners)))
		for za0002 := range z.Winners {
			o = msgp.AppendInt32(o, z.Winners[za0002])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionLog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Start, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "t":
			bts, err = z.Type.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "u":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "c":
			z.Bet, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "p":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]int32, zb0002)
			}
			for za0001 := range z.Players {
				z.Players[za0001], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Players", za0001)
					return
				}
			}
		case "w":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Winners")
				return
			}
			if cap(z.Winners) >= int(zb0003) {
				z.Winners = (z.Winners)[:zb0003]
			} else {
				z.Winners = make([]int32, zb0003)
			}
			for za0002 := range z.Winners {
				z.Winners[za0002], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Winners", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActionLog) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int64Size + 2 + z.Type.Msgsize() + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.ArrayHeaderSize + (len(z.Players) * (msgp.Int32Size)) + 2 + msgp.ArrayHeaderSize + (len(z.Winners) * (msgp.Int32Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameBill) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "j":
			z.Job, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Job")
				return
			}
		case "c":
			z.OldCoin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "OldCoin")
				return
			}
		case "b":
			z.Bet, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "p":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "g":
			z.Weight, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Weight")
				return
			}
		case "w":
			z.Win, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "o":
			z.Water, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		case "y":
			z.Lucky, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		case "t":
			z.Robot, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Robot")
				return
			}
		case "k":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Pk")
				return
			}
			if cap(z.Pk) >= int(zb0002) {
				z.Pk = (z.Pk)[:zb0002]
			} else {
				z.Pk = make([]int32, zb0002)
			}
			for za0001 := range z.Pk {
				z.Pk[za0001], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Pk", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameBill) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(12)
	var zb0001Mask uint16 /* 12 bits */
	if z.Job == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Tax == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Water == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.Robot == 0 {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.Pk == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "u"
	err = en.Append(0xa1, 0x75)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Uid)
	if err != nil {
		err = msgp.WrapError(err, "Uid")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "j"
		err = en.Append(0xa1, 0x6a)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.Job)
		if err != nil {
			err = msgp.WrapError(err, "Job")
			return
		}
	}
	// write "c"
	err = en.Append(0xa1, 0x63)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.OldCoin)
	if err != nil {
		err = msgp.WrapError(err, "OldCoin")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Bet)
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Poker)
	if err != nil {
		err = msgp.WrapError(err, "Poker")
		return
	}
	// write "g"
	err = en.Append(0xa1, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Weight)
	if err != nil {
		err = msgp.WrapError(err, "Weight")
		return
	}
	// write "w"
	err = en.Append(0xa1, 0x77)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Win)
	if err != nil {
		err = msgp.WrapError(err, "Win")
		return
	}
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// write "x"
		err = en.Append(0xa1, 0x78)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Tax)
		if err != nil {
			err = msgp.WrapError(err, "Tax")
			return
		}
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// write "o"
		err = en.Append(0xa1, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Water)
		if err != nil {
			err = msgp.WrapError(err, "Water")
			return
		}
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// write "y"
		err = en.Append(0xa1, 0x79)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Lucky)
		if err != nil {
			err = msgp.WrapError(err, "Lucky")
			return
		}
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// write "t"
		err = en.Append(0xa1, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Robot)
		if err != nil {
			err = msgp.WrapError(err, "Robot")
			return
		}
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// write "k"
		err = en.Append(0xa1, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Pk)))
		if err != nil {
			err = msgp.WrapError(err, "Pk")
			return
		}
		for za0001 := range z.Pk {
			err = en.WriteInt32(z.Pk[za0001])
			if err != nil {
				err = msgp.WrapError(err, "Pk", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameBill) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(12)
	var zb0001Mask uint16 /* 12 bits */
	if z.Job == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Tax == 0 {
		zb0001Len--
		zb0001Mask |= 0x80
	}
	if z.Water == 0 {
		zb0001Len--
		zb0001Mask |= 0x100
	}
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x200
	}
	if z.Robot == 0 {
		zb0001Len--
		zb0001Mask |= 0x400
	}
	if z.Pk == nil {
		zb0001Len--
		zb0001Mask |= 0x800
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "u"
	o = append(o, 0xa1, 0x75)
	o = msgp.AppendInt32(o, z.Uid)
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "j"
		o = append(o, 0xa1, 0x6a)
		o = msgp.AppendInt32(o, z.Job)
	}
	// string "c"
	o = append(o, 0xa1, 0x63)
	o = msgp.AppendInt64(o, z.OldCoin)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendInt64(o, z.Bet)
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendBytes(o, z.Poker)
	// string "g"
	o = append(o, 0xa1, 0x67)
	o = msgp.AppendInt32(o, z.Weight)
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendInt64(o, z.Win)
	if (zb0001Mask & 0x80) == 0 { // if not empty
		// string "x"
		o = append(o, 0xa1, 0x78)
		o = msgp.AppendInt64(o, z.Tax)
	}
	if (zb0001Mask & 0x100) == 0 { // if not empty
		// string "o"
		o = append(o, 0xa1, 0x6f)
		o = msgp.AppendInt64(o, z.Water)
	}
	if (zb0001Mask & 0x200) == 0 { // if not empty
		// string "y"
		o = append(o, 0xa1, 0x79)
		o = msgp.AppendInt64(o, z.Lucky)
	}
	if (zb0001Mask & 0x400) == 0 { // if not empty
		// string "t"
		o = append(o, 0xa1, 0x74)
		o = msgp.AppendInt64(o, z.Robot)
	}
	if (zb0001Mask & 0x800) == 0 { // if not empty
		// string "k"
		o = append(o, 0xa1, 0x6b)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Pk)))
		for za0001 := range z.Pk {
			o = msgp.AppendInt32(o, z.Pk[za0001])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameBill) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "u":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		case "j":
			z.Job, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Job")
				return
			}
		case "c":
			z.OldCoin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OldCoin")
				return
			}
		case "b":
			z.Bet, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "p":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "g":
			z.Weight, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Weight")
				return
			}
		case "w":
			z.Win, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "o":
			z.Water, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		case "y":
			z.Lucky, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		case "t":
			z.Robot, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Robot")
				return
			}
		case "k":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pk")
				return
			}
			if cap(z.Pk) >= int(zb0002) {
				z.Pk = (z.Pk)[:zb0002]
			} else {
				z.Pk = make([]int32, zb0002)
			}
			for za0001 := range z.Pk {
				z.Pk[za0001], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pk", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameBill) Msgsize() (s int) {
	s = 1 + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.BytesPrefixSize + len(z.Poker) + 2 + msgp.Int32Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize + (len(z.Pk) * (msgp.Int32Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameRound) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Id, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "s":
			z.Start, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "r":
			z.Room, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Room")
				return
			}
		case "t":
			z.Tab, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Tab")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bill")
				return
			}
			if cap(z.Bill) >= int(zb0002) {
				z.Bill = (z.Bill)[:zb0002]
			} else {
				z.Bill = make([]*GameBill, zb0002)
			}
			for za0001 := range z.Bill {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
					z.Bill[za0001] = nil
				} else {
					if z.Bill[za0001] == nil {
						z.Bill[za0001] = new(GameBill)
					}
					err = z.Bill[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
				}
			}
		case "a":
			z.Ante, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Ante")
				return
			}
		case "g":
			z.Ring, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Ring")
				return
			}
		case "m":
			z.Sum, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "w":
			z.Win, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "o":
			z.Water, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		case "l":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
			if cap(z.Log) >= int(zb0003) {
				z.Log = (z.Log)[:zb0003]
			} else {
				z.Log = make([]*ActionLog, zb0003)
			}
			for za0002 := range z.Log {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Log", za0002)
						return
					}
					z.Log[za0002] = nil
				} else {
					if z.Log[za0002] == nil {
						z.Log[za0002] = new(ActionLog)
					}
					err = z.Log[za0002].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Log", za0002)
						return
					}
				}
			}
		case "p":
			z.Pool, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "y":
			z.Lucky, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		case "n":
			z.Note, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Note")
				return
			}
		case "v":
			z.Cheat, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Cheat")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameRound) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(17)
	var zb0001Mask uint32 /* 17 bits */
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.Note == "" {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.Cheat == false {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	// variable map header, size zb0001Len
	err = en.WriteMapHeader(zb0001Len)
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "i"
	err = en.Append(0xa1, 0x69)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Room)
	if err != nil {
		err = msgp.WrapError(err, "Room")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Tab)
	if err != nil {
		err = msgp.WrapError(err, "Tab")
		return
	}
	// write "b"
	err = en.Append(0xa1, 0x62)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bill)))
	if err != nil {
		err = msgp.WrapError(err, "Bill")
		return
	}
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Bill[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Bill", za0001)
				return
			}
		}
	}
	// write "a"
	err = en.Append(0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Ante)
	if err != nil {
		err = msgp.WrapError(err, "Ante")
		return
	}
	// write "g"
	err = en.Append(0xa1, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Ring)
	if err != nil {
		err = msgp.WrapError(err, "Ring")
		return
	}
	// write "m"
	err = en.Append(0xa1, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Sum)
	if err != nil {
		err = msgp.WrapError(err, "Sum")
		return
	}
	// write "w"
	err = en.Append(0xa1, 0x77)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Win)
	if err != nil {
		err = msgp.WrapError(err, "Win")
		return
	}
	// write "x"
	err = en.Append(0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Tax)
	if err != nil {
		err = msgp.WrapError(err, "Tax")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Water)
	if err != nil {
		err = msgp.WrapError(err, "Water")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Log)))
	if err != nil {
		err = msgp.WrapError(err, "Log")
		return
	}
	for za0002 := range z.Log {
		if z.Log[za0002] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Log[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Log", za0002)
				return
			}
		}
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Pool)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// write "y"
		err = en.Append(0xa1, 0x79)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Lucky)
		if err != nil {
			err = msgp.WrapError(err, "Lucky")
			return
		}
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// write "n"
		err = en.Append(0xa1, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.Note)
		if err != nil {
			err = msgp.WrapError(err, "Note")
			return
		}
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// write "v"
		err = en.Append(0xa1, 0x76)
		if err != nil {
			return
		}
		err = en.WriteBool(z.Cheat)
		if err != nil {
			err = msgp.WrapError(err, "Cheat")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameRound) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(17)
	var zb0001Mask uint32 /* 17 bits */
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x4000
	}
	if z.Note == "" {
		zb0001Len--
		zb0001Mask |= 0x8000
	}
	if z.Cheat == false {
		zb0001Len--
		zb0001Mask |= 0x10000
	}
	// variable map header, size zb0001Len
	o = msgp.AppendMapHeader(o, zb0001Len)
	if zb0001Len == 0 {
		return
	}
	// string "i"
	o = append(o, 0xa1, 0x69)
	o = msgp.AppendInt64(o, z.Id)
	// string "s"
	o = append(o, 0xa1, 0x73)
	o = msgp.AppendInt64(o, z.Start)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendInt64(o, z.End)
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendInt32(o, z.Room)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendInt32(o, z.Tab)
	// string "b"
	o = append(o, 0xa1, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bill)))
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Bill[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Bill", za0001)
				return
			}
		}
	}
	// string "a"
	o = append(o, 0xa1, 0x61)
	o = msgp.AppendInt32(o, z.Ante)
	// string "g"
	o = append(o, 0xa1, 0x67)
	o = msgp.AppendInt32(o, z.Ring)
	// string "m"
	o = append(o, 0xa1, 0x6d)
	o = msgp.AppendInt64(o, z.Sum)
	// string "w"
	o = append(o, 0xa1, 0x77)
	o = msgp.AppendInt64(o, z.Win)
	// string "x"
	o = append(o, 0xa1, 0x78)
	o = msgp.AppendInt64(o, z.Tax)
	// string "o"
	o = append(o, 0xa1, 0x6f)
	o = msgp.AppendInt64(o, z.Water)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Log)))
	for za0002 := range z.Log {
		if z.Log[za0002] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Log[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Log", za0002)
				return
			}
		}
	}
	// string "p"
	o = append(o, 0xa1, 0x70)
	o = msgp.AppendInt64(o, z.Pool)
	if (zb0001Mask & 0x4000) == 0 { // if not empty
		// string "y"
		o = append(o, 0xa1, 0x79)
		o = msgp.AppendInt64(o, z.Lucky)
	}
	if (zb0001Mask & 0x8000) == 0 { // if not empty
		// string "n"
		o = append(o, 0xa1, 0x6e)
		o = msgp.AppendString(o, z.Note)
	}
	if (zb0001Mask & 0x10000) == 0 { // if not empty
		// string "v"
		o = append(o, 0xa1, 0x76)
		o = msgp.AppendBool(o, z.Cheat)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameRound) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "i":
			z.Id, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "s":
			z.Start, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "r":
			z.Room, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Room")
				return
			}
		case "t":
			z.Tab, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tab")
				return
			}
		case "b":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bill")
				return
			}
			if cap(z.Bill) >= int(zb0002) {
				z.Bill = (z.Bill)[:zb0002]
			} else {
				z.Bill = make([]*GameBill, zb0002)
			}
			for za0001 := range z.Bill {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Bill[za0001] = nil
				} else {
					if z.Bill[za0001] == nil {
						z.Bill[za0001] = new(GameBill)
					}
					bts, err = z.Bill[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bill", za0001)
						return
					}
				}
			}
		case "a":
			z.Ante, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ante")
				return
			}
		case "g":
			z.Ring, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ring")
				return
			}
		case "m":
			z.Sum, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sum")
				return
			}
		case "w":
			z.Win, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Win")
				return
			}
		case "x":
			z.Tax, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tax")
				return
			}
		case "o":
			z.Water, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Water")
				return
			}
		case "l":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Log")
				return
			}
			if cap(z.Log) >= int(zb0003) {
				z.Log = (z.Log)[:zb0003]
			} else {
				z.Log = make([]*ActionLog, zb0003)
			}
			for za0002 := range z.Log {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Log[za0002] = nil
				} else {
					if z.Log[za0002] == nil {
						z.Log[za0002] = new(ActionLog)
					}
					bts, err = z.Log[za0002].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Log", za0002)
						return
					}
				}
			}
		case "p":
			z.Pool, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "y":
			z.Lucky, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		case "n":
			z.Note, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Note")
				return
			}
		case "v":
			z.Cheat, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cheat")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameRound) Msgsize() (s int) {
	s = 3 + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Bill {
		if z.Bill[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Bill[za0001].Msgsize()
		}
	}
	s += 2 + msgp.Int32Size + 2 + msgp.Int32Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.ArrayHeaderSize
	for za0002 := range z.Log {
		if z.Log[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += z.Log[za0002].Msgsize()
		}
	}
	s += 2 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.Note) + 2 + msgp.BoolSize
	return
}
