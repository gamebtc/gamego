// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zjh_log.proto

package zjh

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 玩家结算信息
type GameBill struct {
	// 玩家ID(u有建立索引，不要更改名称)
	Uid int32 `protobuf:"varint,1,opt,name=uid,proto3" json:"u" bson:"u" msg:"u"`
	// 玩家类型
	Job int32 `protobuf:"varint,2,opt,name=job,proto3" json:"j,omitempty" bson:"j,omitempty" msg:"j,omitempty"`
	// 开始游戏时带的钱
	OldCoin int64 `protobuf:"varint,3,opt,name=oldCoin,proto3" json:"c" bson:"c" msg:"c"`
	// 投注总额
	Bet int64 `protobuf:"varint,4,opt,name=bet,proto3" json:"b" bson:"b" msg:"b"`
	// 发牌情况
	Poker []byte `protobuf:"bytes,5,opt,name=poker,proto3" json:"p" bson:"p" msg:"p"`
	// 牌力
	Weight int32 `protobuf:"varint,6,opt,name=weight,proto3" json:"g" bson:"g" msg:"g"`
	// 输赢情况
	Win int64 `protobuf:"zigzag64,7,opt,name=win,proto3" json:"w" bson:"w" msg:"w"`
	// 税收
	Tax int64 `protobuf:"varint,8,opt,name=tax,proto3" json:"x,omitempty" bson:"x,omitempty" msg:"x,omitempty"`
	// 进入彩池的税收
	Water int64 `protobuf:"varint,9,opt,name=water,proto3" json:"o,omitempty" bson:"o,omitempty" msg:"o,omitempty"`
	// 喜钱，从彩池单独出
	Lucky int64 `protobuf:"varint,10,opt,name=lucky,proto3" json:"y,omitempty" bson:"y,omitempty" msg:"y,omitempty"`
	// 和机器人之间的输赢
	Robot int64 `protobuf:"zigzag64,11,opt,name=robot,proto3" json:"t,omitempty" bson:"t,omitempty" msg:"t,omitempty"`
	// PK过的玩家ID
	Pk []int32 `protobuf:"varint,12,rep,packed,name=pk,proto3" json:"k,omitempty" bson:"-" msg:"k,omitempty"`
}

func (m *GameBill) Reset()         { *m = GameBill{} }
func (m *GameBill) String() string { return proto.CompactTextString(m) }
func (*GameBill) ProtoMessage()    {}
func (*GameBill) Descriptor() ([]byte, []int) {
	return fileDescriptor_89d1366e1d3f95d7, []int{0}
}
func (m *GameBill) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameBill) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameBill.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameBill) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameBill.Merge(m, src)
}
func (m *GameBill) XXX_Size() int {
	return m.Size()
}
func (m *GameBill) XXX_DiscardUnknown() {
	xxx_messageInfo_GameBill.DiscardUnknown(m)
}

var xxx_messageInfo_GameBill proto.InternalMessageInfo

func (m *GameBill) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *GameBill) GetJob() int32 {
	if m != nil {
		return m.Job
	}
	return 0
}

func (m *GameBill) GetOldCoin() int64 {
	if m != nil {
		return m.OldCoin
	}
	return 0
}

func (m *GameBill) GetBet() int64 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *GameBill) GetPoker() []byte {
	if m != nil {
		return m.Poker
	}
	return nil
}

func (m *GameBill) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *GameBill) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameBill) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameBill) GetWater() int64 {
	if m != nil {
		return m.Water
	}
	return 0
}

func (m *GameBill) GetLucky() int64 {
	if m != nil {
		return m.Lucky
	}
	return 0
}

func (m *GameBill) GetRobot() int64 {
	if m != nil {
		return m.Robot
	}
	return 0
}

func (m *GameBill) GetPk() []int32 {
	if m != nil {
		return m.Pk
	}
	return nil
}

// 炸金花日志
type GameRound struct {
	// 全局唯一游戏ID(i有建立索引，不要更改名称)
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"i" bson:"i" msg:"i"`
	// 游戏开始时间(s有建立索引，不要更改名称)
	Start int64 `protobuf:"varint,2,opt,name=start,proto3" json:"s" bson:"s" msg:"s"`
	// 游戏结束时间
	End int64 `protobuf:"varint,3,opt,name=end,proto3" json:"e" bson:"e" msg:"e"`
	// 房间ID
	Room int32 `protobuf:"varint,4,opt,name=room,proto3" json:"r" bson:"r" msg:"r"`
	// 桌子ID
	Tab int32 `protobuf:"varint,5,opt,name=tab,proto3" json:"t" bson:"t" msg:"t"`
	// 所有玩家结算汇总(b.u有建立索引，不要更改名称)
	Bill []*GameBill `protobuf:"bytes,6,rep,name=bill,proto3" json:"b" bson:"b" msg:"b"`
	// 底注
	Ante int32 `protobuf:"varint,7,opt,name=ante,proto3" json:"a" bson:"a" msg:"a"`
	// 下注轮数
	Ring int32 `protobuf:"varint,8,opt,name=ring,proto3" json:"g" bson:"g" msg:"g"`
	// 下注总金币
	Sum int64 `protobuf:"varint,9,opt,name=sum,proto3" json:"m" bson:"m" msg:"m"`
	// 本局所有真实玩家的输赢
	Win int64 `protobuf:"zigzag64,10,opt,name=win,proto3" json:"w" bson:"w" msg:"w"`
	// 真实玩家总税收
	Tax int64 `protobuf:"varint,11,opt,name=tax,proto3" json:"x" bson:"x" msg:"x"`
	// 真实玩家进入彩池的税收
	Water int64 `protobuf:"varint,12,opt,name=water,proto3" json:"o" bson:"o" msg:"o"`
	// 动作日志
	Log []*ActionLog `protobuf:"bytes,13,rep,name=log,proto3" json:"l" bson:"l" msg:"l"`
	// 当前池子的钱
	Pool int64 `protobuf:"varint,14,opt,name=pool,proto3" json:"p" bson:"p" msg:"p"`
	// 真实玩家获得的喜钱，从彩池单独出
	Lucky int64 `protobuf:"varint,15,opt,name=lucky,proto3" json:"y,omitempty" bson:"y,omitempty" msg:"y,omitempty"`
	// 备注
	Note string `protobuf:"bytes,16,opt,name=note,proto3" json:"n,omitempty" bson:"n,omitempty" msg:"n,omitempty"`
	// 系统必赢
	Cheat bool `protobuf:"varint,17,opt,name=cheat,proto3" json:"v,omitempty" bson:"v,omitempty" msg:"v,omitempty"`
}

func (m *GameRound) Reset()         { *m = GameRound{} }
func (m *GameRound) String() string { return proto.CompactTextString(m) }
func (*GameRound) ProtoMessage()    {}
func (*GameRound) Descriptor() ([]byte, []int) {
	return fileDescriptor_89d1366e1d3f95d7, []int{1}
}
func (m *GameRound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GameRound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GameRound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GameRound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GameRound.Merge(m, src)
}
func (m *GameRound) XXX_Size() int {
	return m.Size()
}
func (m *GameRound) XXX_DiscardUnknown() {
	xxx_messageInfo_GameRound.DiscardUnknown(m)
}

var xxx_messageInfo_GameRound proto.InternalMessageInfo

func (m *GameRound) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GameRound) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *GameRound) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *GameRound) GetRoom() int32 {
	if m != nil {
		return m.Room
	}
	return 0
}

func (m *GameRound) GetTab() int32 {
	if m != nil {
		return m.Tab
	}
	return 0
}

func (m *GameRound) GetBill() []*GameBill {
	if m != nil {
		return m.Bill
	}
	return nil
}

func (m *GameRound) GetAnte() int32 {
	if m != nil {
		return m.Ante
	}
	return 0
}

func (m *GameRound) GetRing() int32 {
	if m != nil {
		return m.Ring
	}
	return 0
}

func (m *GameRound) GetSum() int64 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func (m *GameRound) GetWin() int64 {
	if m != nil {
		return m.Win
	}
	return 0
}

func (m *GameRound) GetTax() int64 {
	if m != nil {
		return m.Tax
	}
	return 0
}

func (m *GameRound) GetWater() int64 {
	if m != nil {
		return m.Water
	}
	return 0
}

func (m *GameRound) GetLog() []*ActionLog {
	if m != nil {
		return m.Log
	}
	return nil
}

func (m *GameRound) GetPool() int64 {
	if m != nil {
		return m.Pool
	}
	return 0
}

func (m *GameRound) GetLucky() int64 {
	if m != nil {
		return m.Lucky
	}
	return 0
}

func (m *GameRound) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *GameRound) GetCheat() bool {
	if m != nil {
		return m.Cheat
	}
	return false
}

type ActionLog struct {
	// 时间
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"s" bson:"s" msg:"s"`
	// 动作类型
	Type ActionType `protobuf:"varint,2,opt,name=type,proto3,enum=zjh.ActionType" json:"t" bson:"t" msg:"t"`
	// 玩家ID
	Uid int32 `protobuf:"varint,3,opt,name=uid,proto3" json:"u,omitempty" bson:"u,omitempty" msg:"u,omitempty"`
	// 下注
	Bet int32 `protobuf:"varint,4,opt,name=bet,proto3" json:"c,omitempty" bson:"c,omitempty" msg:"c,omitempty"`
	// 对手ID
	Players []int32 `protobuf:"varint,5,rep,packed,name=players,proto3" json:"p,omitempty" bson:"p,omitempty" msg:"p,omitempty"`
	// 赢的人
	Winners []int32 `protobuf:"varint,6,rep,packed,name=winners,proto3" json:"w,omitempty" bson:"w,omitempty" msg:"w,omitempty"`
}

func (m *ActionLog) Reset()         { *m = ActionLog{} }
func (m *ActionLog) String() string { return proto.CompactTextString(m) }
func (*ActionLog) ProtoMessage()    {}
func (*ActionLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_89d1366e1d3f95d7, []int{2}
}
func (m *ActionLog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ActionLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ActionLog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ActionLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionLog.Merge(m, src)
}
func (m *ActionLog) XXX_Size() int {
	return m.Size()
}
func (m *ActionLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionLog.DiscardUnknown(m)
}

var xxx_messageInfo_ActionLog proto.InternalMessageInfo

func (m *ActionLog) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *ActionLog) GetType() ActionType {
	if m != nil {
		return m.Type
	}
	return ActionType_ActionNone
}

func (m *ActionLog) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *ActionLog) GetBet() int32 {
	if m != nil {
		return m.Bet
	}
	return 0
}

func (m *ActionLog) GetPlayers() []int32 {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ActionLog) GetWinners() []int32 {
	if m != nil {
		return m.Winners
	}
	return nil
}

func init() {
	proto.RegisterType((*GameBill)(nil), "zjh.GameBill")
	proto.RegisterType((*GameRound)(nil), "zjh.GameRound")
	proto.RegisterType((*ActionLog)(nil), "zjh.ActionLog")
}

func init() { proto.RegisterFile("zjh_log.proto", fileDescriptor_89d1366e1d3f95d7) }

var fileDescriptor_89d1366e1d3f95d7 = []byte{
	// 855 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x3d, 0x8f, 0xe3, 0x44,
	0x18, 0xc7, 0xd7, 0x71, 0x92, 0xdd, 0xcc, 0xbe, 0xdc, 0xe1, 0x6a, 0x58, 0x89, 0xc4, 0x1a, 0x51,
	0x18, 0x1d, 0xd9, 0x88, 0xbb, 0x02, 0x89, 0x37, 0x89, 0x50, 0x20, 0x04, 0x14, 0x8c, 0xa8, 0x68,
	0x90, 0xed, 0x0c, 0x8e, 0x13, 0xdb, 0x63, 0xd9, 0xe3, 0x75, 0xbc, 0x9f, 0x82, 0x9e, 0x2f, 0xc2,
	0x47, 0xa0, 0xbc, 0x92, 0x2a, 0x42, 0xbb, 0xdd, 0x89, 0xea, 0x3e, 0x01, 0x9a, 0xc7, 0xe3, 0x1b,
	0x5b, 0xb6, 0x56, 0x5b, 0x50, 0x6d, 0x32, 0xfb, 0x7b, 0x7e, 0x1e, 0x3f, 0x79, 0xfe, 0x1e, 0xa3,
	0xcb, 0xbb, 0xdd, 0xf6, 0xd7, 0x88, 0x07, 0x37, 0x69, 0xc6, 0x05, 0xb7, 0xcc, 0xbb, 0xdd, 0xf6,
	0x7a, 0x19, 0x84, 0x62, 0x5b, 0x78, 0x37, 0x3e, 0x8f, 0x57, 0x01, 0x0f, 0xf8, 0x0a, 0xfe, 0xe7,
	0x15, 0xbf, 0xc1, 0x37, 0xf8, 0x02, 0x9f, 0xea, 0x9a, 0xeb, 0xd9, 0xdd, 0x6e, 0x5b, 0x7f, 0x24,
	0xff, 0x4e, 0xd0, 0xd9, 0xb7, 0x6e, 0xcc, 0xd6, 0x61, 0x14, 0x59, 0x2f, 0x90, 0x59, 0x84, 0x1b,
	0x6c, 0xd8, 0x86, 0x33, 0x59, 0xbf, 0xff, 0xe6, 0xb8, 0x30, 0x8a, 0xb7, 0xc7, 0xc5, 0x73, 0x2f,
	0xe7, 0xc9, 0x67, 0xa4, 0x20, 0x76, 0x9c, 0x07, 0xf2, 0x2f, 0x95, 0x94, 0xf5, 0x1d, 0x32, 0x77,
	0xdc, 0xc3, 0x23, 0x80, 0x3f, 0x7d, 0x73, 0x5c, 0x9c, 0xef, 0x3e, 0xe6, 0x71, 0x28, 0x58, 0x9c,
	0x8a, 0xea, 0xed, 0x71, 0xf1, 0x61, 0x5d, 0xd6, 0x5a, 0x54, 0x82, 0xf6, 0x0a, 0x95, 0x0e, 0xeb,
	0x15, 0x3a, 0xe5, 0xd1, 0xe6, 0x1b, 0x1e, 0x26, 0xd8, 0xb4, 0x0d, 0xc7, 0xac, 0xaf, 0xed, 0xeb,
	0x6b, 0xfb, 0xaa, 0xd4, 0x27, 0xb4, 0x21, 0xe5, 0x66, 0x3d, 0x26, 0xf0, 0x58, 0x17, 0x78, 0xba,
	0xc0, 0x53, 0x05, 0x1e, 0xa1, 0x92, 0xb2, 0x56, 0x68, 0x92, 0xf2, 0x3d, 0xcb, 0xf0, 0xc4, 0x36,
	0x9c, 0x8b, 0x1a, 0x4f, 0x35, 0x9e, 0x2a, 0x3c, 0x25, 0xb4, 0xe6, 0xac, 0x4f, 0xd0, 0xb4, 0x64,
	0x61, 0xb0, 0x15, 0x78, 0xaa, 0xbb, 0x11, 0xe8, 0x8a, 0x40, 0x55, 0x04, 0x84, 0x2a, 0x50, 0x6e,
	0xa8, 0x0c, 0x13, 0x7c, 0x6a, 0x1b, 0x8e, 0x55, 0xf3, 0xa5, 0xe6, 0x4b, 0xc5, 0x97, 0x84, 0x4a,
	0x4a, 0x76, 0x4f, 0xb8, 0x07, 0x7c, 0x06, 0xbb, 0x87, 0xee, 0x1d, 0x86, 0xba, 0x77, 0xe8, 0x75,
	0xef, 0xd0, 0xe9, 0x9e, 0x70, 0x0f, 0xd6, 0x8f, 0x68, 0x52, 0xba, 0x82, 0x65, 0x78, 0xa6, 0x65,
	0x7c, 0x48, 0xc6, 0x7b, 0xb2, 0xf6, 0x0a, 0xad, 0x2d, 0x52, 0x17, 0x15, 0xfe, 0xbe, 0xc2, 0x48,
	0xeb, 0xaa, 0x21, 0x5d, 0xd5, 0xd3, 0x55, 0x1d, 0x1d, 0x58, 0xa4, 0x2e, 0xe3, 0x1e, 0x17, 0xf8,
	0x1c, 0xfa, 0x02, 0x3a, 0x31, 0xa4, 0x13, 0x3d, 0x9d, 0xe8, 0xe8, 0xc0, 0x62, 0x7d, 0x89, 0x46,
	0xe9, 0x1e, 0x5f, 0xd8, 0xa6, 0x33, 0x59, 0x2f, 0xa5, 0x6b, 0xdf, 0x71, 0x5d, 0xd7, 0xae, 0xa5,
	0x32, 0xec, 0xdb, 0x86, 0x51, 0xba, 0x27, 0x7f, 0x9c, 0xa2, 0x99, 0x1c, 0x77, 0xca, 0x8b, 0x64,
	0x63, 0x7d, 0x84, 0x46, 0x6a, 0xdc, 0xd5, 0x04, 0x85, 0xfa, 0x07, 0x0b, 0x95, 0x22, 0x24, 0x74,
	0x14, 0x6e, 0xe4, 0x00, 0xe5, 0xc2, 0xcd, 0x04, 0xcc, 0xbb, 0xa2, 0x73, 0x4d, 0xe7, 0x8a, 0xce,
	0x09, 0xad, 0x39, 0x39, 0x0d, 0x2c, 0xd9, 0xb4, 0xe7, 0x99, 0x69, 0x9c, 0x29, 0x9c, 0x11, 0x2a,
	0x29, 0x6b, 0x89, 0xc6, 0x19, 0xe7, 0x31, 0x0c, 0xb3, 0x9a, 0xb5, 0x4c, 0xd3, 0x99, 0xa2, 0x33,
	0x42, 0x01, 0x93, 0x6e, 0xe1, 0x7a, 0x30, 0xcb, 0x8a, 0x16, 0x9a, 0x16, 0x4d, 0xf7, 0x60, 0x3c,
	0x3c, 0xeb, 0x0b, 0x34, 0xf6, 0xc2, 0x28, 0xc2, 0x53, 0xdb, 0x74, 0xce, 0x5f, 0x5e, 0xde, 0xc8,
	0xec, 0x37, 0x89, 0x7f, 0x2c, 0x37, 0x50, 0x25, 0x77, 0xe6, 0x26, 0x82, 0xc1, 0x54, 0xab, 0x6b,
	0xb9, 0x1a, 0x77, 0x15, 0xee, 0x12, 0x0a, 0x18, 0xdc, 0x48, 0x98, 0x04, 0x30, 0xd7, 0x8f, 0x86,
	0x06, 0x30, 0x79, 0x23, 0x79, 0x11, 0xab, 0xc1, 0x05, 0x3a, 0xd6, 0x74, 0xac, 0xe8, 0x98, 0x50,
	0x49, 0x35, 0xf9, 0x42, 0x4f, 0xca, 0xd7, 0x8b, 0x3a, 0x5f, 0xe7, 0xda, 0x7c, 0xd0, 0xf0, 0xa1,
	0xc9, 0x92, 0x4a, 0xd0, 0xaa, 0x49, 0xd0, 0x85, 0xc6, 0xb9, 0xc6, 0x79, 0x93, 0x96, 0x77, 0x19,
	0xf9, 0x1c, 0x99, 0x11, 0x0f, 0xf0, 0x25, 0xb4, 0xf4, 0x0a, 0x5a, 0xfa, 0xb5, 0x2f, 0x42, 0x9e,
	0xfc, 0xc0, 0x83, 0xba, 0x3c, 0xd2, 0xe5, 0x91, 0x2a, 0x8f, 0x08, 0x95, 0x55, 0xb2, 0x47, 0x29,
	0xe7, 0x11, 0xbe, 0xd2, 0x17, 0x1b, 0x7e, 0x14, 0x01, 0xa6, 0xf3, 0xf8, 0xec, 0x7f, 0xc9, 0xe3,
	0xf7, 0x68, 0x9c, 0x70, 0xc1, 0xf0, 0x73, 0xdb, 0x70, 0x66, 0xb5, 0x2d, 0x19, 0xb2, 0x25, 0x3d,
	0x5b, 0x7b, 0x85, 0x82, 0x44, 0xee, 0xcd, 0xdf, 0x32, 0x57, 0xe0, 0xf7, 0x6c, 0xc3, 0x39, 0xab,
	0x6d, 0xb7, 0x43, 0xb6, 0xdb, 0x9e, 0xed, 0xb6, 0xb3, 0x37, 0xb0, 0x90, 0x3f, 0x4d, 0x34, 0x7b,
	0xd7, 0x47, 0x1d, 0x39, 0xe3, 0x89, 0x91, 0xfb, 0x0a, 0x8d, 0x45, 0x95, 0x32, 0x88, 0xe8, 0xd5,
	0xcb, 0x67, 0xad, 0x9f, 0xe5, 0xe7, 0x2a, 0x65, 0x8f, 0x05, 0x05, 0xea, 0xe4, 0x33, 0x59, 0x1e,
	0x7f, 0xa6, 0x3e, 0xd1, 0x8a, 0xa1, 0x7b, 0x29, 0x7a, 0xf7, 0x52, 0x74, 0x9e, 0xc9, 0xea, 0x70,
	0x6c, 0x0e, 0x27, 0xa5, 0xf2, 0x87, 0x54, 0x7e, 0x4f, 0xe5, 0x77, 0x54, 0xf2, 0xe8, 0xfa, 0x09,
	0x9d, 0xa6, 0x91, 0x5b, 0xb1, 0x2c, 0xc7, 0x13, 0x78, 0xec, 0x81, 0x2e, 0x1d, 0xd2, 0xa5, 0x3d,
	0x5d, 0x7b, 0x85, 0x36, 0x1e, 0xa9, 0x2c, 0xc3, 0x24, 0x91, 0xca, 0xa9, 0x56, 0x96, 0x43, 0xca,
	0xb2, 0xa7, 0x2c, 0x3b, 0x4a, 0xe5, 0x59, 0x7f, 0xf0, 0xd7, 0xfd, 0xdc, 0x78, 0x7d, 0x3f, 0x37,
	0xfe, 0xb9, 0x9f, 0x1b, 0xbf, 0x3f, 0xcc, 0x4f, 0x5e, 0x3f, 0xcc, 0x4f, 0xfe, 0x7e, 0x98, 0x9f,
	0xfc, 0x22, 0x5f, 0x50, 0xbc, 0x29, 0xbc, 0x6d, 0xbc, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x36,
	0xb4, 0x4b, 0x9d, 0xbd, 0x08, 0x00, 0x00,
}

func (m *GameBill) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameBill) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameBill) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pk) > 0 {
		dAtA2 := make([]byte, len(m.Pk)*10)
		var j1 int
		for _, num1 := range m.Pk {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintZjhLog(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	if m.Robot != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64((uint64(m.Robot)<<1)^uint64((m.Robot>>63))))
		i--
		dAtA[i] = 0x58
	}
	if m.Lucky != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Lucky))
		i--
		dAtA[i] = 0x50
	}
	if m.Water != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Water))
		i--
		dAtA[i] = 0x48
	}
	if m.Tax != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Tax))
		i--
		dAtA[i] = 0x40
	}
	if m.Win != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
		i--
		dAtA[i] = 0x38
	}
	if m.Weight != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Poker) > 0 {
		i -= len(m.Poker)
		copy(dAtA[i:], m.Poker)
		i = encodeVarintZjhLog(dAtA, i, uint64(len(m.Poker)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bet != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Bet))
		i--
		dAtA[i] = 0x20
	}
	if m.OldCoin != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.OldCoin))
		i--
		dAtA[i] = 0x18
	}
	if m.Job != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Job))
		i--
		dAtA[i] = 0x10
	}
	if m.Uid != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GameRound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GameRound) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GameRound) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cheat {
		i--
		if m.Cheat {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.Note) > 0 {
		i -= len(m.Note)
		copy(dAtA[i:], m.Note)
		i = encodeVarintZjhLog(dAtA, i, uint64(len(m.Note)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Lucky != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Lucky))
		i--
		dAtA[i] = 0x78
	}
	if m.Pool != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Pool))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Log) > 0 {
		for iNdEx := len(m.Log) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Log[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZjhLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.Water != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Water))
		i--
		dAtA[i] = 0x60
	}
	if m.Tax != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Tax))
		i--
		dAtA[i] = 0x58
	}
	if m.Win != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64((uint64(m.Win)<<1)^uint64((m.Win>>63))))
		i--
		dAtA[i] = 0x50
	}
	if m.Sum != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Sum))
		i--
		dAtA[i] = 0x48
	}
	if m.Ring != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Ring))
		i--
		dAtA[i] = 0x40
	}
	if m.Ante != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Ante))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Bill) > 0 {
		for iNdEx := len(m.Bill) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bill[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintZjhLog(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Tab != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Tab))
		i--
		dAtA[i] = 0x28
	}
	if m.Room != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Room))
		i--
		dAtA[i] = 0x20
	}
	if m.End != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.End))
		i--
		dAtA[i] = 0x18
	}
	if m.Start != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ActionLog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ActionLog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ActionLog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Winners) > 0 {
		dAtA4 := make([]byte, len(m.Winners)*10)
		var j3 int
		for _, num1 := range m.Winners {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintZjhLog(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Players) > 0 {
		dAtA6 := make([]byte, len(m.Players)*10)
		var j5 int
		for _, num1 := range m.Players {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintZjhLog(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x2a
	}
	if m.Bet != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Bet))
		i--
		dAtA[i] = 0x20
	}
	if m.Uid != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Uid))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.Start != 0 {
		i = encodeVarintZjhLog(dAtA, i, uint64(m.Start))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintZjhLog(dAtA []byte, offset int, v uint64) int {
	offset -= sovZjhLog(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GameBill) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovZjhLog(uint64(m.Uid))
	}
	if m.Job != 0 {
		n += 1 + sovZjhLog(uint64(m.Job))
	}
	if m.OldCoin != 0 {
		n += 1 + sovZjhLog(uint64(m.OldCoin))
	}
	if m.Bet != 0 {
		n += 1 + sovZjhLog(uint64(m.Bet))
	}
	l = len(m.Poker)
	if l > 0 {
		n += 1 + l + sovZjhLog(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovZjhLog(uint64(m.Weight))
	}
	if m.Win != 0 {
		n += 1 + sozZjhLog(uint64(m.Win))
	}
	if m.Tax != 0 {
		n += 1 + sovZjhLog(uint64(m.Tax))
	}
	if m.Water != 0 {
		n += 1 + sovZjhLog(uint64(m.Water))
	}
	if m.Lucky != 0 {
		n += 1 + sovZjhLog(uint64(m.Lucky))
	}
	if m.Robot != 0 {
		n += 1 + sozZjhLog(uint64(m.Robot))
	}
	if len(m.Pk) > 0 {
		l = 0
		for _, e := range m.Pk {
			l += sovZjhLog(uint64(e))
		}
		n += 1 + sovZjhLog(uint64(l)) + l
	}
	return n
}

func (m *GameRound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovZjhLog(uint64(m.Id))
	}
	if m.Start != 0 {
		n += 1 + sovZjhLog(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovZjhLog(uint64(m.End))
	}
	if m.Room != 0 {
		n += 1 + sovZjhLog(uint64(m.Room))
	}
	if m.Tab != 0 {
		n += 1 + sovZjhLog(uint64(m.Tab))
	}
	if len(m.Bill) > 0 {
		for _, e := range m.Bill {
			l = e.Size()
			n += 1 + l + sovZjhLog(uint64(l))
		}
	}
	if m.Ante != 0 {
		n += 1 + sovZjhLog(uint64(m.Ante))
	}
	if m.Ring != 0 {
		n += 1 + sovZjhLog(uint64(m.Ring))
	}
	if m.Sum != 0 {
		n += 1 + sovZjhLog(uint64(m.Sum))
	}
	if m.Win != 0 {
		n += 1 + sozZjhLog(uint64(m.Win))
	}
	if m.Tax != 0 {
		n += 1 + sovZjhLog(uint64(m.Tax))
	}
	if m.Water != 0 {
		n += 1 + sovZjhLog(uint64(m.Water))
	}
	if len(m.Log) > 0 {
		for _, e := range m.Log {
			l = e.Size()
			n += 1 + l + sovZjhLog(uint64(l))
		}
	}
	if m.Pool != 0 {
		n += 1 + sovZjhLog(uint64(m.Pool))
	}
	if m.Lucky != 0 {
		n += 1 + sovZjhLog(uint64(m.Lucky))
	}
	l = len(m.Note)
	if l > 0 {
		n += 2 + l + sovZjhLog(uint64(l))
	}
	if m.Cheat {
		n += 3
	}
	return n
}

func (m *ActionLog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Start != 0 {
		n += 1 + sovZjhLog(uint64(m.Start))
	}
	if m.Type != 0 {
		n += 1 + sovZjhLog(uint64(m.Type))
	}
	if m.Uid != 0 {
		n += 1 + sovZjhLog(uint64(m.Uid))
	}
	if m.Bet != 0 {
		n += 1 + sovZjhLog(uint64(m.Bet))
	}
	if len(m.Players) > 0 {
		l = 0
		for _, e := range m.Players {
			l += sovZjhLog(uint64(e))
		}
		n += 1 + sovZjhLog(uint64(l)) + l
	}
	if len(m.Winners) > 0 {
		l = 0
		for _, e := range m.Winners {
			l += sovZjhLog(uint64(e))
		}
		n += 1 + sovZjhLog(uint64(l)) + l
	}
	return n
}

func sovZjhLog(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZjhLog(x uint64) (n int) {
	return sovZjhLog(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GameBill) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZjhLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameBill: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameBill: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
			m.Job = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Job |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldCoin", wireType)
			}
			m.OldCoin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldCoin |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Poker", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthZjhLog
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthZjhLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Poker = append(m.Poker[:0], dAtA[iNdEx:postIndex]...)
			if m.Poker == nil {
				m.Poker = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Water", wireType)
			}
			m.Water = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Water |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lucky", wireType)
			}
			m.Lucky = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lucky |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Robot", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Robot = int64(v)
		case 12:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pk = append(m.Pk, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZjhLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZjhLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pk) == 0 {
					m.Pk = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZjhLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pk = append(m.Pk, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pk", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZjhLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZjhLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Room", wireType)
			}
			m.Room = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Room |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tab", wireType)
			}
			m.Tab = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tab |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bill", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZjhLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZjhLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bill = append(m.Bill, &GameBill{})
			if err := m.Bill[len(m.Bill)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ante", wireType)
			}
			m.Ante = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ante |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ring", wireType)
			}
			m.Ring = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ring |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			m.Sum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Win", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Win = int64(v)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tax", wireType)
			}
			m.Tax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tax |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Water", wireType)
			}
			m.Water = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Water |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthZjhLog
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthZjhLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = append(m.Log, &ActionLog{})
			if err := m.Log[len(m.Log)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			m.Pool = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pool |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lucky", wireType)
			}
			m.Lucky = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Lucky |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Note", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZjhLog
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZjhLog
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Note = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cheat", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Cheat = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipZjhLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ActionLog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZjhLog
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ActionLog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ActionLog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ActionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bet", wireType)
			}
			m.Bet = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bet |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Players = append(m.Players, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZjhLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZjhLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Players) == 0 {
					m.Players = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZjhLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Players = append(m.Players, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Players", wireType)
			}
		case 6:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Winners = append(m.Winners, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZjhLog
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZjhLog
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZjhLog
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Winners) == 0 {
					m.Winners = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZjhLog
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Winners = append(m.Winners, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Winners", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZjhLog(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthZjhLog
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZjhLog(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZjhLog
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZjhLog
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZjhLog
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZjhLog
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZjhLog
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZjhLog        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZjhLog          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZjhLog = fmt.Errorf("proto: unexpected end of group")
)
