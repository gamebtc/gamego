package ddz

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	_ "github.com/gogo/protobuf/gogoproto"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActionAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = ActionType(zb0002)
			}
		case "poker":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "uid":
			z.Uid, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActionAck) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Uid == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "poker"
		err = en.Append(0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Poker)
		if err != nil {
			err = msgp.WrapError(err, "Poker")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "uid"
		err = en.Append(0xa3, 0x75, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt32(z.Uid)
		if err != nil {
			err = msgp.WrapError(err, "Uid")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActionAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(3)
	var zb0001Mask uint8 /* 3 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.Uid == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.Type))
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "poker"
		o = append(o, 0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		o = msgp.AppendBytes(o, z.Poker)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "uid"
		o = append(o, 0xa3, 0x75, 0x69, 0x64)
		o = msgp.AppendInt32(o, z.Uid)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = ActionType(zb0002)
			}
		case "poker":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "uid":
			z.Uid, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Uid")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActionAck) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int32Size + 6 + msgp.BytesPrefixSize + len(z.Poker) + 4 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ActionReq) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = ActionType(zb0002)
			}
		case "poker":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ActionReq) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "poker"
		err = en.Append(0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Poker)
		if err != nil {
			err = msgp.WrapError(err, "Poker")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ActionReq) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendInt32(o, int32(z.Type))
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "poker"
		o = append(o, 0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		o = msgp.AppendBytes(o, z.Poker)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionReq) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "type":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = ActionType(zb0002)
			}
		case "poker":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ActionReq) Msgsize() (s int) {
	s = 1 + 5 + msgp.Int32Size + 6 + msgp.BytesPrefixSize + len(z.Poker)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ActionType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ActionType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ActionType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ActionType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ActionType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ActionType) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Code) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Code(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Code) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Code) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Code) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Code(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Code) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameInitAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "table":
			z.Table, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "state":
			z.State, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "ring":
			z.Ring, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Ring")
				return
			}
		case "play":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]*Player, zb0002)
			}
			for za0001 := range z.Players {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
					z.Players[za0001] = nil
				} else {
					if z.Players[za0001] == nil {
						z.Players[za0001] = new(Player)
					}
					err = z.Players[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		case "poker":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "use":
			z.Use, err = dc.ReadBytes(z.Use)
			if err != nil {
				err = msgp.WrapError(err, "Use")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameInitAck) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Use == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "table"
	err = en.Append(0xa5, 0x74, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Table)
	if err != nil {
		err = msgp.WrapError(err, "Table")
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "state"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.State)
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "ring"
	err = en.Append(0xa4, 0x72, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Ring)
	if err != nil {
		err = msgp.WrapError(err, "Ring")
		return
	}
	// write "play"
	err = en.Append(0xa4, 0x70, 0x6c, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Players)))
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Players[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "poker"
		err = en.Append(0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Poker)
		if err != nil {
			err = msgp.WrapError(err, "Poker")
			return
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "use"
		err = en.Append(0xa3, 0x75, 0x73, 0x65)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.Use)
		if err != nil {
			err = msgp.WrapError(err, "Use")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameInitAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	if z.Poker == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.Use == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "table"
	o = append(o, 0xa5, 0x74, 0x61, 0x62, 0x6c, 0x65)
	o = msgp.AppendInt32(o, z.Table)
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "state"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendInt32(o, z.State)
	// string "ring"
	o = append(o, 0xa4, 0x72, 0x69, 0x6e, 0x67)
	o = msgp.AppendInt32(o, z.Ring)
	// string "play"
	o = append(o, 0xa4, 0x70, 0x6c, 0x61, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Players)))
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Players[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "poker"
		o = append(o, 0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
		o = msgp.AppendBytes(o, z.Poker)
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "use"
		o = append(o, 0xa3, 0x75, 0x73, 0x65)
		o = msgp.AppendBytes(o, z.Use)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameInitAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "table":
			z.Table, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Table")
				return
			}
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "state":
			z.State, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "ring":
			z.Ring, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Ring")
				return
			}
		case "play":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]*Player, zb0002)
			}
			for za0001 := range z.Players {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Players[za0001] = nil
				} else {
					if z.Players[za0001] == nil {
						z.Players[za0001] = new(Player)
					}
					bts, err = z.Players[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		case "poker":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "use":
			z.Use, bts, err = msgp.ReadBytesBytes(bts, z.Use)
			if err != nil {
				err = msgp.WrapError(err, "Use")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameInitAck) Msgsize() (s int) {
	s = 1 + 6 + msgp.Int32Size + 3 + msgp.Int32Size + 6 + msgp.Int32Size + 5 + msgp.Int32Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Players[za0001].Msgsize()
		}
	}
	s += 6 + msgp.BytesPrefixSize + len(z.Poker) + 4 + msgp.BytesPrefixSize + len(z.Use)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameResultAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "winner":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Winner")
				return
			}
			if cap(z.Winner) >= int(zb0002) {
				z.Winner = (z.Winner)[:zb0002]
			} else {
				z.Winner = make([]int32, zb0002)
			}
			for za0001 := range z.Winner {
				z.Winner[za0001], err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "Winner", za0001)
					return
				}
			}
		case "prize":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Prize")
				return
			}
			if cap(z.Prize) >= int(zb0003) {
				z.Prize = (z.Prize)[:zb0003]
			} else {
				z.Prize = make([]int64, zb0003)
			}
			for za0002 := range z.Prize {
				z.Prize[za0002], err = dc.ReadInt64()
				if err != nil {
					err = msgp.WrapError(err, "Prize", za0002)
					return
				}
			}
		case "coin":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "poker":
			z.Poker, err = dc.ReadBytes(z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "lucky":
			z.Lucky, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameResultAck) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "id"
	err = en.Append(0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "winner"
	err = en.Append(0xa6, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Winner)))
	if err != nil {
		err = msgp.WrapError(err, "Winner")
		return
	}
	for za0001 := range z.Winner {
		err = en.WriteInt32(z.Winner[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Winner", za0001)
			return
		}
	}
	// write "prize"
	err = en.Append(0xa5, 0x70, 0x72, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Prize)))
	if err != nil {
		err = msgp.WrapError(err, "Prize")
		return
	}
	for za0002 := range z.Prize {
		err = en.WriteInt64(z.Prize[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Prize", za0002)
			return
		}
	}
	// write "coin"
	err = en.Append(0xa4, 0x63, 0x6f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	// write "poker"
	err = en.Append(0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Poker)
	if err != nil {
		err = msgp.WrapError(err, "Poker")
		return
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "lucky"
		err = en.Append(0xa5, 0x6c, 0x75, 0x63, 0x6b, 0x79)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Lucky)
		if err != nil {
			err = msgp.WrapError(err, "Lucky")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameResultAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(6)
	var zb0001Mask uint8 /* 6 bits */
	if z.Lucky == 0 {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "id"
	o = append(o, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "winner"
	o = append(o, 0xa6, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Winner)))
	for za0001 := range z.Winner {
		o = msgp.AppendInt32(o, z.Winner[za0001])
	}
	// string "prize"
	o = append(o, 0xa5, 0x70, 0x72, 0x69, 0x7a, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Prize)))
	for za0002 := range z.Prize {
		o = msgp.AppendInt64(o, z.Prize[za0002])
	}
	// string "coin"
	o = append(o, 0xa4, 0x63, 0x6f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Coin)
	// string "poker"
	o = append(o, 0xa5, 0x70, 0x6f, 0x6b, 0x65, 0x72)
	o = msgp.AppendBytes(o, z.Poker)
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "lucky"
		o = append(o, 0xa5, 0x6c, 0x75, 0x63, 0x6b, 0x79)
		o = msgp.AppendInt64(o, z.Lucky)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameResultAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "winner":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Winner")
				return
			}
			if cap(z.Winner) >= int(zb0002) {
				z.Winner = (z.Winner)[:zb0002]
			} else {
				z.Winner = make([]int32, zb0002)
			}
			for za0001 := range z.Winner {
				z.Winner[za0001], bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Winner", za0001)
					return
				}
			}
		case "prize":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Prize")
				return
			}
			if cap(z.Prize) >= int(zb0003) {
				z.Prize = (z.Prize)[:zb0003]
			} else {
				z.Prize = make([]int64, zb0003)
			}
			for za0002 := range z.Prize {
				z.Prize[za0002], bts, err = msgp.ReadInt64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Prize", za0002)
					return
				}
			}
		case "coin":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "poker":
			z.Poker, bts, err = msgp.ReadBytesBytes(bts, z.Poker)
			if err != nil {
				err = msgp.WrapError(err, "Poker")
				return
			}
		case "lucky":
			z.Lucky, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Lucky")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameResultAck) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 7 + msgp.ArrayHeaderSize + (len(z.Winner) * (msgp.Int32Size)) + 6 + msgp.ArrayHeaderSize + (len(z.Prize) * (msgp.Int64Size)) + 5 + msgp.Int64Size + 6 + msgp.BytesPrefixSize + len(z.Poker) + 6 + msgp.Int64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *GameStartAck) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "pool":
			z.Pool, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "play":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]*Player, zb0002)
			}
			for za0001 := range z.Players {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
					z.Players[za0001] = nil
				} else {
					if z.Players[za0001] == nil {
						z.Players[za0001] = new(Player)
					}
					err = z.Players[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *GameStartAck) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "id"
	err = en.Append(0x83, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "pool"
	err = en.Append(0xa4, 0x70, 0x6f, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Pool)
	if err != nil {
		err = msgp.WrapError(err, "Pool")
		return
	}
	// write "play"
	err = en.Append(0xa4, 0x70, 0x6c, 0x61, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Players)))
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Players[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *GameStartAck) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "id"
	o = append(o, 0x83, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "pool"
	o = append(o, 0xa4, 0x70, 0x6f, 0x6f, 0x6c)
	o = msgp.AppendInt64(o, z.Pool)
	// string "play"
	o = append(o, 0xa4, 0x70, 0x6c, 0x61, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Players)))
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Players[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *GameStartAck) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "pool":
			z.Pool, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pool")
				return
			}
		case "play":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if cap(z.Players) >= int(zb0002) {
				z.Players = (z.Players)[:zb0002]
			} else {
				z.Players = make([]*Player, zb0002)
			}
			for za0001 := range z.Players {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Players[za0001] = nil
				} else {
					if z.Players[za0001] == nil {
						z.Players[za0001] = new(Player)
					}
					bts, err = z.Players[za0001].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *GameStartAck) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 5 + msgp.Int64Size + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Players {
		if z.Players[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Players[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Player) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "icon":
			z.Icon, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Icon")
				return
			}
		case "vip":
			z.Vip, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Vip")
				return
			}
		case "chair":
			z.Chair, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Chair")
				return
			}
		case "coin":
			z.Coin, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "bet":
			z.Bet, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "state":
			{
				var zb0002 int32
				zb0002, err = dc.ReadInt32()
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = Player_State(zb0002)
			}
		case "hand":
			z.Hand, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Hand")
				return
			}
		case "down":
			z.Down, err = dc.ReadInt32()
			if err != nil {
				err = msgp.WrapError(err, "Down")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Player) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "id"
	err = en.Append(0x8a, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Id)
	if err != nil {
		err = msgp.WrapError(err, "Id")
		return
	}
	// write "icon"
	err = en.Append(0xa4, 0x69, 0x63, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Icon)
	if err != nil {
		err = msgp.WrapError(err, "Icon")
		return
	}
	// write "vip"
	err = en.Append(0xa3, 0x76, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Vip)
	if err != nil {
		err = msgp.WrapError(err, "Vip")
		return
	}
	// write "chair"
	err = en.Append(0xa5, 0x63, 0x68, 0x61, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Chair)
	if err != nil {
		err = msgp.WrapError(err, "Chair")
		return
	}
	// write "coin"
	err = en.Append(0xa4, 0x63, 0x6f, 0x69, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Coin)
	if err != nil {
		err = msgp.WrapError(err, "Coin")
		return
	}
	// write "bet"
	err = en.Append(0xa3, 0x62, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Bet)
	if err != nil {
		err = msgp.WrapError(err, "Bet")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "state"
	err = en.Append(0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt32(int32(z.State))
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	// write "hand"
	err = en.Append(0xa4, 0x68, 0x61, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Hand)
	if err != nil {
		err = msgp.WrapError(err, "Hand")
		return
	}
	// write "down"
	err = en.Append(0xa4, 0x64, 0x6f, 0x77, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt32(z.Down)
	if err != nil {
		err = msgp.WrapError(err, "Down")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Player) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "id"
	o = append(o, 0x8a, 0xa2, 0x69, 0x64)
	o = msgp.AppendInt32(o, z.Id)
	// string "icon"
	o = append(o, 0xa4, 0x69, 0x63, 0x6f, 0x6e)
	o = msgp.AppendInt32(o, z.Icon)
	// string "vip"
	o = append(o, 0xa3, 0x76, 0x69, 0x70)
	o = msgp.AppendInt32(o, z.Vip)
	// string "chair"
	o = append(o, 0xa5, 0x63, 0x68, 0x61, 0x69, 0x72)
	o = msgp.AppendInt32(o, z.Chair)
	// string "coin"
	o = append(o, 0xa4, 0x63, 0x6f, 0x69, 0x6e)
	o = msgp.AppendInt64(o, z.Coin)
	// string "bet"
	o = append(o, 0xa3, 0x62, 0x65, 0x74)
	o = msgp.AppendInt64(o, z.Bet)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "state"
	o = append(o, 0xa5, 0x73, 0x74, 0x61, 0x74, 0x65)
	o = msgp.AppendInt32(o, int32(z.State))
	// string "hand"
	o = append(o, 0xa4, 0x68, 0x61, 0x6e, 0x64)
	o = msgp.AppendInt32(o, z.Hand)
	// string "down"
	o = append(o, 0xa4, 0x64, 0x6f, 0x77, 0x6e)
	o = msgp.AppendInt32(o, z.Down)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.Id, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Id")
				return
			}
		case "icon":
			z.Icon, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Icon")
				return
			}
		case "vip":
			z.Vip, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Vip")
				return
			}
		case "chair":
			z.Chair, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Chair")
				return
			}
		case "coin":
			z.Coin, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Coin")
				return
			}
		case "bet":
			z.Bet, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bet")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "state":
			{
				var zb0002 int32
				zb0002, bts, err = msgp.ReadInt32Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = Player_State(zb0002)
			}
		case "hand":
			z.Hand, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Hand")
				return
			}
		case "down":
			z.Down, bts, err = msgp.ReadInt32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Down")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Player) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int32Size + 5 + msgp.Int32Size + 4 + msgp.Int32Size + 6 + msgp.Int32Size + 5 + msgp.Int64Size + 4 + msgp.Int64Size + 5 + msgp.StringPrefixSize + len(z.Name) + 6 + msgp.Int32Size + 5 + msgp.Int32Size + 5 + msgp.Int32Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Player_State) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int32
		zb0001, err = dc.ReadInt32()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Player_State(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Player_State) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt32(int32(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Player_State) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt32(o, int32(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player_State) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int32
		zb0001, bts, err = msgp.ReadInt32Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Player_State(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Player_State) Msgsize() (s int) {
	s = msgp.Int32Size
	return
}
