// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_id.proto

package protocol

/*
import "game.proto";
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgId_Code int32

const (
	MsgId_None         MsgId_Code = 0
	MsgId_UserOffline  MsgId_Code = 1
	MsgId_AllocAgentId MsgId_Code = 2
	// 100以上玩家可以发送的消息
	MsgId_UserMessageHeadSplit MsgId_Code = 100
	MsgId_UserOfflineReq       MsgId_Code = 101
	MsgId_HandshakeReq         MsgId_Code = 102
	MsgId_HandshakeAck         MsgId_Code = 103
	MsgId_VerCheckReq          MsgId_Code = 104
	MsgId_VerCheckAck          MsgId_Code = 105
	MsgId_RegistReq            MsgId_Code = 107
	MsgId_RegistAck            MsgId_Code = 108
	MsgId_ErrorInfo            MsgId_Code = 109
	MsgId_FatalInfo            MsgId_Code = 112
	MsgId_UserLoginReq         MsgId_Code = 113
	MsgId_UserLoginSuccessAck  MsgId_Code = 115
	MsgId_UserLoginFailAck     MsgId_Code = 117
	MsgId_ClientErrorAck       MsgId_Code = 119
	MsgId_CodeLoginPwdReq      MsgId_Code = 120
	MsgId_CodeLoginPwdAck      MsgId_Code = 121
	// 200以上需要登录才能调用的协议
	MsgId_UserLoginMessageSplit MsgId_Code = 200
	MsgId_HeartBeatReq          MsgId_Code = 202
	MsgId_HeartBeatAck          MsgId_Code = 203
	MsgId_GameListReq           MsgId_Code = 204
	MsgId_GameListAck           MsgId_Code = 205
	MsgId_CodeUpAccountReq      MsgId_Code = 210
	MsgId_CodeUpAccountAck      MsgId_Code = 211
	MsgId_UpdateAccountReq      MsgId_Code = 212
	MsgId_UpdateAccountAck      MsgId_Code = 213
	MsgId_CodeSetPwdReq         MsgId_Code = 214
	MsgId_CodeSetPwdAck         MsgId_Code = 215
	MsgId_ChangePwdReq          MsgId_Code = 216
	MsgId_ChangePwdAck          MsgId_Code = 217
	MsgId_BagGetReq             MsgId_Code = 220
	MsgId_BagGetAck             MsgId_Code = 221
	MsgId_BagMoveReq            MsgId_Code = 222
	MsgId_BagMoveAck            MsgId_Code = 223
	MsgId_RepayInfoReq          MsgId_Code = 240
	MsgId_RepayInfoAck          MsgId_Code = 241
	MsgId_RepaySetAliReq        MsgId_Code = 242
	MsgId_RepaySetAliAck        MsgId_Code = 243
	MsgId_RepaySetBankReq       MsgId_Code = 244
	MsgId_RepaySetBankAck       MsgId_Code = 245
	MsgId_RepayListOrderReq     MsgId_Code = 246
	MsgId_RepayListOrderAck     MsgId_Code = 247
	MsgId_RepayNewOrderReq      MsgId_Code = 248
	MsgId_RepayNewOrderAck      MsgId_Code = 249
	MsgId_CustomSendReq         MsgId_Code = 260
	MsgId_CustomSendAck         MsgId_Code = 261
	MsgId_CustomRecvReq         MsgId_Code = 262
	MsgId_CustomRecvAck         MsgId_Code = 263
	MsgId_CustomCommonReq       MsgId_Code = 264
	MsgId_CustomCommonAck       MsgId_Code = 265
	MsgId_CustomNoteReq         MsgId_Code = 266
	MsgId_CustomNoteAck         MsgId_Code = 267
	MsgId_RankGetReq            MsgId_Code = 270
	MsgId_RankGetAck            MsgId_Code = 271
	MsgId_LoginGameReq          MsgId_Code = 301
	MsgId_LoginGameAck          MsgId_Code = 302
	MsgId_SendGameFail          MsgId_Code = 304
	MsgId_ExitGameReq           MsgId_Code = 305
	MsgId_ExitGameAck           MsgId_Code = 306
	MsgId_PayInfoReq            MsgId_Code = 1100
	MsgId_PayInfoAck            MsgId_Code = 1101
	MsgId_PayOrderReq           MsgId_Code = 1102
	MsgId_PayOrderAck           MsgId_Code = 1103
	MsgId_MailListReq           MsgId_Code = 1110
	MsgId_MailListAck           MsgId_Code = 1111
	MsgId_MailReadReq           MsgId_Code = 1112
	MsgId_MailReadAck           MsgId_Code = 1113
	MsgId_MailDeleteReq         MsgId_Code = 1114
	MsgId_MailDeleteAck         MsgId_Code = 1115
	MsgId_SpreadGetReq          MsgId_Code = 1130
	MsgId_SpreadGetAck          MsgId_Code = 1131
	MsgId_SpreadSetReq          MsgId_Code = 1132
	MsgId_SpreadSetAck          MsgId_Code = 1133
	MsgId_SpreadGiftReq         MsgId_Code = 1134
	MsgId_SpreadGiftAck         MsgId_Code = 1135
	// 8192以上是游戏请求
	MsgId_GameMessageHeadSplit MsgId_Code = 8192
)

var MsgId_Code_name = map[int32]string{
	0:    "None",
	1:    "UserOffline",
	2:    "AllocAgentId",
	100:  "UserMessageHeadSplit",
	101:  "UserOfflineReq",
	102:  "HandshakeReq",
	103:  "HandshakeAck",
	104:  "VerCheckReq",
	105:  "VerCheckAck",
	107:  "RegistReq",
	108:  "RegistAck",
	109:  "ErrorInfo",
	112:  "FatalInfo",
	113:  "UserLoginReq",
	115:  "UserLoginSuccessAck",
	117:  "UserLoginFailAck",
	119:  "ClientErrorAck",
	120:  "CodeLoginPwdReq",
	121:  "CodeLoginPwdAck",
	200:  "UserLoginMessageSplit",
	202:  "HeartBeatReq",
	203:  "HeartBeatAck",
	204:  "GameListReq",
	205:  "GameListAck",
	210:  "CodeUpAccountReq",
	211:  "CodeUpAccountAck",
	212:  "UpdateAccountReq",
	213:  "UpdateAccountAck",
	214:  "CodeSetPwdReq",
	215:  "CodeSetPwdAck",
	216:  "ChangePwdReq",
	217:  "ChangePwdAck",
	220:  "BagGetReq",
	221:  "BagGetAck",
	222:  "BagMoveReq",
	223:  "BagMoveAck",
	240:  "RepayInfoReq",
	241:  "RepayInfoAck",
	242:  "RepaySetAliReq",
	243:  "RepaySetAliAck",
	244:  "RepaySetBankReq",
	245:  "RepaySetBankAck",
	246:  "RepayListOrderReq",
	247:  "RepayListOrderAck",
	248:  "RepayNewOrderReq",
	249:  "RepayNewOrderAck",
	260:  "CustomSendReq",
	261:  "CustomSendAck",
	262:  "CustomRecvReq",
	263:  "CustomRecvAck",
	264:  "CustomCommonReq",
	265:  "CustomCommonAck",
	266:  "CustomNoteReq",
	267:  "CustomNoteAck",
	270:  "RankGetReq",
	271:  "RankGetAck",
	301:  "LoginGameReq",
	302:  "LoginGameAck",
	304:  "SendGameFail",
	305:  "ExitGameReq",
	306:  "ExitGameAck",
	1100: "PayInfoReq",
	1101: "PayInfoAck",
	1102: "PayOrderReq",
	1103: "PayOrderAck",
	1110: "MailListReq",
	1111: "MailListAck",
	1112: "MailReadReq",
	1113: "MailReadAck",
	1114: "MailDeleteReq",
	1115: "MailDeleteAck",
	1130: "SpreadGetReq",
	1131: "SpreadGetAck",
	1132: "SpreadSetReq",
	1133: "SpreadSetAck",
	1134: "SpreadGiftReq",
	1135: "SpreadGiftAck",
	8192: "GameMessageHeadSplit",
}
var MsgId_Code_value = map[string]int32{
	"None":                  0,
	"UserOffline":           1,
	"AllocAgentId":          2,
	"UserMessageHeadSplit":  100,
	"UserOfflineReq":        101,
	"HandshakeReq":          102,
	"HandshakeAck":          103,
	"VerCheckReq":           104,
	"VerCheckAck":           105,
	"RegistReq":             107,
	"RegistAck":             108,
	"ErrorInfo":             109,
	"FatalInfo":             112,
	"UserLoginReq":          113,
	"UserLoginSuccessAck":   115,
	"UserLoginFailAck":      117,
	"ClientErrorAck":        119,
	"CodeLoginPwdReq":       120,
	"CodeLoginPwdAck":       121,
	"UserLoginMessageSplit": 200,
	"HeartBeatReq":          202,
	"HeartBeatAck":          203,
	"GameListReq":           204,
	"GameListAck":           205,
	"CodeUpAccountReq":      210,
	"CodeUpAccountAck":      211,
	"UpdateAccountReq":      212,
	"UpdateAccountAck":      213,
	"CodeSetPwdReq":         214,
	"CodeSetPwdAck":         215,
	"ChangePwdReq":          216,
	"ChangePwdAck":          217,
	"BagGetReq":             220,
	"BagGetAck":             221,
	"BagMoveReq":            222,
	"BagMoveAck":            223,
	"RepayInfoReq":          240,
	"RepayInfoAck":          241,
	"RepaySetAliReq":        242,
	"RepaySetAliAck":        243,
	"RepaySetBankReq":       244,
	"RepaySetBankAck":       245,
	"RepayListOrderReq":     246,
	"RepayListOrderAck":     247,
	"RepayNewOrderReq":      248,
	"RepayNewOrderAck":      249,
	"CustomSendReq":         260,
	"CustomSendAck":         261,
	"CustomRecvReq":         262,
	"CustomRecvAck":         263,
	"CustomCommonReq":       264,
	"CustomCommonAck":       265,
	"CustomNoteReq":         266,
	"CustomNoteAck":         267,
	"RankGetReq":            270,
	"RankGetAck":            271,
	"LoginGameReq":          301,
	"LoginGameAck":          302,
	"SendGameFail":          304,
	"ExitGameReq":           305,
	"ExitGameAck":           306,
	"PayInfoReq":            1100,
	"PayInfoAck":            1101,
	"PayOrderReq":           1102,
	"PayOrderAck":           1103,
	"MailListReq":           1110,
	"MailListAck":           1111,
	"MailReadReq":           1112,
	"MailReadAck":           1113,
	"MailDeleteReq":         1114,
	"MailDeleteAck":         1115,
	"SpreadGetReq":          1130,
	"SpreadGetAck":          1131,
	"SpreadSetReq":          1132,
	"SpreadSetAck":          1133,
	"SpreadGiftReq":         1134,
	"SpreadGiftAck":         1135,
	"GameMessageHeadSplit":  8192,
}

func (x MsgId_Code) String() string {
	return proto.EnumName(MsgId_Code_name, int32(x))
}
func (MsgId_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_a3130dd60a2d8d0b, []int{0, 0}
}

type Error_Code int32

const (
	Error_None           Error_Code = 0
	Error_Success        Error_Code = 0
	Error_OK             Error_Code = 0
	Error_LoginRepeat    Error_Code = 1
	Error_LoginFail      Error_Code = 2
	Error_LoginOther     Error_Code = 3
	Error_CreateUserFail Error_Code = 4
	Error_DatabaseFail   Error_Code = 5
)

var Error_Code_name = map[int32]string{
	0: "None",
	// Duplicate value: 0: "Success",
	// Duplicate value: 0: "OK",
	1: "LoginRepeat",
	2: "LoginFail",
	3: "LoginOther",
	4: "CreateUserFail",
	5: "DatabaseFail",
}
var Error_Code_value = map[string]int32{
	"None":           0,
	"Success":        0,
	"OK":             0,
	"LoginRepeat":    1,
	"LoginFail":      2,
	"LoginOther":     3,
	"CreateUserFail": 4,
	"DatabaseFail":   5,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_a3130dd60a2d8d0b, []int{1, 0}
}

type MsgId struct {
}

func (m *MsgId) Reset()         { *m = MsgId{} }
func (m *MsgId) String() string { return proto.CompactTextString(m) }
func (*MsgId) ProtoMessage()    {}
func (*MsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_a3130dd60a2d8d0b, []int{0}
}
func (m *MsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgId.Merge(dst, src)
}
func (m *MsgId) XXX_Size() int {
	return m.Size()
}
func (m *MsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgId.DiscardUnknown(m)
}

var xxx_messageInfo_MsgId proto.InternalMessageInfo

type Error struct {
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_a3130dd60a2d8d0b, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgId)(nil), "protocol.MsgId")
	proto.RegisterType((*Error)(nil), "protocol.Error")
	proto.RegisterEnum("protocol.MsgId_Code", MsgId_Code_name, MsgId_Code_value)
	proto.RegisterEnum("protocol.Error_Code", Error_Code_name, Error_Code_value)
}
func (m *MsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMsgId(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgId(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgId(x uint64) (n int) {
	return sovMsgId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgId
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgId
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgId(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgId = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgId   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_id.proto", fileDescriptor_msg_id_a3130dd60a2d8d0b) }

var fileDescriptor_msg_id_a3130dd60a2d8d0b = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0x4b, 0x93, 0xdb, 0x44,
	0x10, 0xc7, 0x2d, 0xb1, 0x1b, 0x9c, 0x59, 0xc7, 0x9e, 0xcc, 0x3a, 0x10, 0x72, 0xf0, 0xc1, 0x1f,
	0x80, 0x0b, 0x5f, 0x00, 0xdb, 0x79, 0xec, 0x16, 0xf1, 0x7a, 0xcb, 0xae, 0xe5, 0x4a, 0x4d, 0xa4,
	0xb6, 0xac, 0xb2, 0x2c, 0x29, 0xd2, 0x38, 0x9b, 0x3d, 0x91, 0x03, 0x8f, 0x00, 0x55, 0xc0, 0x17,
	0x81, 0x02, 0x3e, 0x45, 0x0a, 0x02, 0xa4, 0x78, 0x84, 0xf0, 0xa6, 0x76, 0x6f, 0xbc, 0x9f, 0x01,
	0x6e, 0xd4, 0xbf, 0xa5, 0x75, 0x24, 0x9b, 0x93, 0x6b, 0x7e, 0xfa, 0xf5, 0x8c, 0xa7, 0xbb, 0xd5,
	0x12, 0xb5, 0x59, 0xea, 0x3d, 0xe3, 0xbb, 0x8f, 0xc7, 0x49, 0x64, 0x22, 0x55, 0xe5, 0x1f, 0x27,
	0x0a, 0xda, 0x37, 0x6a, 0x62, 0xbd, 0x9f, 0x7a, 0xdb, 0x6e, 0xfb, 0xfe, 0x86, 0x58, 0xeb, 0x45,
	0x2e, 0xa9, 0xaa, 0x58, 0xdb, 0x89, 0x42, 0x92, 0x15, 0xd5, 0x10, 0x1b, 0x7b, 0x29, 0x25, 0x83,
	0xf1, 0x38, 0xf0, 0x43, 0x92, 0x96, 0x92, 0xa2, 0xd6, 0x09, 0x82, 0xc8, 0xe9, 0x78, 0x14, 0x9a,
	0x6d, 0x57, 0xda, 0xea, 0xac, 0x68, 0x42, 0xe9, 0x53, 0x9a, 0x6a, 0x8f, 0xb6, 0x48, 0xbb, 0xa3,
	0x38, 0xf0, 0x8d, 0x74, 0x95, 0x12, 0xf5, 0x42, 0xf0, 0x90, 0xae, 0x4a, 0x42, 0xfc, 0x96, 0x0e,
	0xdd, 0x74, 0xa2, 0xa7, 0x4c, 0xc6, 0x25, 0xd2, 0x71, 0xa6, 0xd2, 0xc3, 0xa1, 0x4f, 0x53, 0xd2,
	0x9b, 0x90, 0x33, 0x85, 0x32, 0x29, 0x02, 0x18, 0xbe, 0x3a, 0x25, 0x4e, 0x0e, 0xc9, 0xf3, 0x53,
	0x83, 0xe7, 0xd3, 0x07, 0x4b, 0x3c, 0x0d, 0xb0, 0xbc, 0x90, 0x24, 0x51, 0xb2, 0x1d, 0x8e, 0x23,
	0x39, 0xc3, 0xf2, 0xa2, 0x36, 0x3a, 0xe0, 0x65, 0x8c, 0xf3, 0xf0, 0xaf, 0x2e, 0x47, 0x9e, 0x1f,
	0x22, 0xfc, 0xaa, 0x7a, 0x54, 0x6c, 0x2e, 0xc8, 0x68, 0xee, 0x38, 0x94, 0xa6, 0xd8, 0x28, 0x55,
	0x4d, 0x21, 0x17, 0x0f, 0x2e, 0x6a, 0x3f, 0x00, 0x9d, 0xe3, 0x5a, 0xbd, 0xc0, 0xa7, 0xd0, 0xf0,
	0x21, 0x60, 0xfb, 0x6a, 0x53, 0x34, 0x90, 0x39, 0x36, 0x77, 0xf7, 0x5d, 0xec, 0x7b, 0x7d, 0x19,
	0xc2, 0x3c, 0x50, 0xe7, 0xc4, 0x99, 0xc5, 0x9e, 0x79, 0xce, 0xb2, 0x7c, 0xdd, 0xb2, 0xd4, 0x69,
	0x51, 0xdb, 0x22, 0x9d, 0x98, 0x2e, 0x69, 0xbe, 0xd9, 0xbb, 0x65, 0x84, 0x0d, 0xde, 0x43, 0x09,
	0x36, 0x2e, 0xe9, 0x19, 0x5d, 0xce, 0xaf, 0x7f, 0xbb, 0x44, 0xe0, 0xbc, 0x6f, 0xa9, 0x33, 0x42,
	0xe2, 0xe8, 0xbd, 0xb8, 0xe3, 0x38, 0xd1, 0x3c, 0x64, 0xf1, 0xa3, 0x55, 0x0c, 0xfb, 0x63, 0xc6,
	0x7b, 0xb1, 0xab, 0x0d, 0x15, 0xec, 0x4f, 0x56, 0x31, 0xec, 0x4f, 0x2d, 0xa5, 0xc4, 0x29, 0x6c,
	0x32, 0x22, 0x93, 0xdf, 0xf4, 0xee, 0x12, 0x83, 0xf7, 0x19, 0xff, 0xf5, 0xde, 0x44, 0x87, 0x1e,
	0xe5, 0xda, 0xbd, 0x32, 0x82, 0xf5, 0xb9, 0xa5, 0xea, 0xe2, 0x64, 0x57, 0x7b, 0x97, 0x88, 0x0f,
	0xfd, 0xaa, 0xb0, 0xc6, 0xf3, 0xaf, 0x2d, 0xd5, 0x10, 0xa2, 0xab, 0xbd, 0x7e, 0x74, 0x8d, 0xdb,
	0xe5, 0x9b, 0x22, 0x80, 0xf1, 0x2d, 0x6f, 0x3a, 0xa4, 0x58, 0x1f, 0xa0, 0xbe, 0x70, 0x7e, 0x2d,
	0x23, 0x58, 0xbf, 0x59, 0x6a, 0x53, 0xd4, 0x19, 0x8d, 0xc8, 0x74, 0x02, 0x1f, 0xde, 0xef, 0xcb,
	0x10, 0xe6, 0x1f, 0x96, 0x6a, 0x8a, 0xc6, 0x31, 0xec, 0xea, 0x90, 0x5b, 0xf0, 0xcf, 0x15, 0x0a,
	0xf7, 0x2f, 0x4b, 0x3d, 0x22, 0x4e, 0x33, 0x45, 0xea, 0x07, 0x89, 0x4b, 0x09, 0xec, 0xfb, 0xff,
	0xc3, 0xe1, 0xff, 0xcd, 0x29, 0x65, 0xbe, 0x43, 0xfb, 0x0b, 0xfd, 0x9f, 0x55, 0x0c, 0xfb, 0xdf,
	0x2c, 0xab, 0xf3, 0xd4, 0x44, 0xb3, 0x11, 0x85, 0x9c, 0xc2, 0xe7, 0xec, 0x32, 0x83, 0xf7, 0x7c,
	0x81, 0x0d, 0xc9, 0xb9, 0x06, 0xef, 0x85, 0x25, 0x06, 0xef, 0x45, 0x1b, 0x77, 0xc8, 0x58, 0x2f,
	0x9a, 0xcd, 0x22, 0xee, 0xfe, 0x9b, 0x2b, 0x14, 0xee, 0x4b, 0x85, 0xf8, 0x9d, 0xc8, 0x70, 0xea,
	0x5f, 0x5e, 0x62, 0xf0, 0x5e, 0xb1, 0x51, 0x8e, 0xa1, 0x0e, 0xa7, 0x79, 0x01, 0x5f, 0x2d, 0x02,
	0x18, 0xaf, 0xd9, 0x28, 0x06, 0x77, 0x3b, 0x5a, 0x14, 0xce, 0x1b, 0x65, 0x04, 0xeb, 0x4d, 0x46,
	0xb8, 0x11, 0x08, 0x5e, 0x35, 0xf9, 0x96, 0x8d, 0xb6, 0xbe, 0x70, 0xdd, 0x37, 0xc7, 0x71, 0x6f,
	0x97, 0x08, 0xc2, 0xde, 0xe1, 0xd3, 0x76, 0x1f, 0x94, 0xfe, 0x76, 0xb5, 0x00, 0xf8, 0x55, 0xa8,
	0x22, 0x66, 0x57, 0x1f, 0x2c, 0xb2, 0xfd, 0x41, 0x89, 0xc0, 0xf9, 0x90, 0x49, 0x5f, 0xfb, 0xc1,
	0xf1, 0x2b, 0x75, 0xb7, 0x44, 0xb8, 0x9d, 0x17, 0x64, 0x48, 0x3a, 0xeb, 0xe6, 0x12, 0xe1, 0x66,
	0xae, 0x22, 0x41, 0x20, 0xe7, 0x29, 0xa0, 0x2c, 0x69, 0x5f, 0x2c, 0x31, 0x78, 0x5f, 0x56, 0xf9,
	0xb2, 0x71, 0x42, 0xda, 0xcd, 0xd3, 0xf6, 0x7d, 0x19, 0xc1, 0xfa, 0xa1, 0x80, 0x46, 0x99, 0xf5,
	0x63, 0x19, 0xc1, 0xfa, 0x89, 0xf7, 0xcf, 0x03, 0xfd, 0x31, 0x6b, 0x3f, 0x2f, 0x31, 0x78, 0xbf,
	0x54, 0xd5, 0x63, 0xa2, 0x89, 0xbc, 0xad, 0xcc, 0xe9, 0x1b, 0x4f, 0xb6, 0x6f, 0x5a, 0x62, 0x9d,
	0x87, 0x59, 0xfb, 0xd9, 0x95, 0x2f, 0xc0, 0x86, 0x78, 0x38, 0x9f, 0x89, 0xb2, 0xa2, 0x4e, 0x08,
	0x7b, 0xf0, 0x54, 0xf6, 0x59, 0xc8, 0xe7, 0x67, 0x4c, 0xda, 0x48, 0x0b, 0x33, 0x76, 0x31, 0x25,
	0xa5, 0xad, 0xea, 0x42, 0xf0, 0x72, 0x60, 0x26, 0x94, 0xc8, 0x87, 0x78, 0x64, 0x26, 0xa4, 0x0d,
	0x61, 0xf4, 0xb1, 0xb3, 0x86, 0x39, 0x7c, 0x5e, 0x1b, 0x7d, 0x45, 0xa7, 0x59, 0xc1, 0xd7, 0xcf,
	0xd9, 0xd2, 0xea, 0x9e, 0xbd, 0x75, 0xd8, 0xb2, 0xee, 0x1c, 0xb6, 0xac, 0xef, 0x0e, 0x5b, 0xd6,
	0xeb, 0x47, 0xad, 0xca, 0x9d, 0xa3, 0x56, 0xe5, 0xde, 0x51, 0xab, 0x72, 0xe5, 0x04, 0x7f, 0xb1,
	0x9e, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x41, 0xbd, 0x64, 0xef, 0xc8, 0x06, 0x00, 0x00,
}
