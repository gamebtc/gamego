// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_id.proto

//import "game.proto";

package protocol

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgId_Code int32

const (
	MsgId_None         MsgId_Code = 0
	MsgId_Offline      MsgId_Code = 1
	MsgId_AllocAgentId MsgId_Code = 2
	// 100以上玩家可以发送的消息
	MsgId_UserMessageHeadSplit MsgId_Code = 100
	MsgId_OfflineReq           MsgId_Code = 101
	MsgId_HandshakeReq         MsgId_Code = 102
	MsgId_HandshakeAck         MsgId_Code = 103
	MsgId_VerCheckReq          MsgId_Code = 104
	MsgId_VerCheckAck          MsgId_Code = 105
	MsgId_RegistReq            MsgId_Code = 107
	MsgId_RegistAck            MsgId_Code = 108
	MsgId_ErrorInfo            MsgId_Code = 109
	MsgId_FatalInfo            MsgId_Code = 112
	MsgId_LoginReq             MsgId_Code = 113
	MsgId_LoginSuccessAck      MsgId_Code = 115
	MsgId_LoginFailAck         MsgId_Code = 117
	MsgId_ClientErrorAck       MsgId_Code = 119
	MsgId_CodeLoginPwdReq      MsgId_Code = 120
	MsgId_CodeLoginPwdAck      MsgId_Code = 121
	// 200以上需要登录才能调用的协议
	MsgId_LoggedMessageSplit MsgId_Code = 200
	MsgId_HeartBeatReq       MsgId_Code = 202
	MsgId_HeartBeatAck       MsgId_Code = 203
	MsgId_GameListReq        MsgId_Code = 204
	MsgId_GameListAck        MsgId_Code = 205
	MsgId_CodeUpAccountReq   MsgId_Code = 210
	MsgId_CodeUpAccountAck   MsgId_Code = 211
	MsgId_UpdateAccountReq   MsgId_Code = 212
	MsgId_UpdateAccountAck   MsgId_Code = 213
	MsgId_CodeSetPwdReq      MsgId_Code = 214
	MsgId_CodeSetPwdAck      MsgId_Code = 215
	MsgId_ChangePwdReq       MsgId_Code = 216
	MsgId_ChangePwdAck       MsgId_Code = 217
	MsgId_BagGetReq          MsgId_Code = 220
	MsgId_BagGetAck          MsgId_Code = 221
	MsgId_BagMoveReq         MsgId_Code = 222
	MsgId_BagMoveAck         MsgId_Code = 223
	MsgId_RepayInfoReq       MsgId_Code = 240
	MsgId_RepayInfoAck       MsgId_Code = 241
	MsgId_RepaySetAliReq     MsgId_Code = 242
	MsgId_RepaySetAliAck     MsgId_Code = 243
	MsgId_RepaySetBankReq    MsgId_Code = 244
	MsgId_RepaySetBankAck    MsgId_Code = 245
	MsgId_RepayListOrderReq  MsgId_Code = 246
	MsgId_RepayListOrderAck  MsgId_Code = 247
	MsgId_RepayNewOrderReq   MsgId_Code = 248
	MsgId_RepayNewOrderAck   MsgId_Code = 249
	MsgId_CustomSendReq      MsgId_Code = 260
	MsgId_CustomSendAck      MsgId_Code = 261
	MsgId_CustomRecvReq      MsgId_Code = 262
	MsgId_CustomRecvAck      MsgId_Code = 263
	MsgId_CustomCommonReq    MsgId_Code = 264
	MsgId_CustomCommonAck    MsgId_Code = 265
	MsgId_CustomNoteReq      MsgId_Code = 266
	MsgId_CustomNoteAck      MsgId_Code = 267
	MsgId_RankGetReq         MsgId_Code = 270
	MsgId_RankGetAck         MsgId_Code = 271
	MsgId_LoginGameReq       MsgId_Code = 301
	MsgId_LoginGameAck       MsgId_Code = 302
	MsgId_SendGameFail       MsgId_Code = 304
	MsgId_ExitGameReq        MsgId_Code = 305
	MsgId_ExitGameAck        MsgId_Code = 306
	MsgId_PayInfoReq         MsgId_Code = 1100
	MsgId_PayInfoAck         MsgId_Code = 1101
	MsgId_PayOrderReq        MsgId_Code = 1102
	MsgId_PayOrderAck        MsgId_Code = 1103
	MsgId_MailListReq        MsgId_Code = 1110
	MsgId_MailListAck        MsgId_Code = 1111
	MsgId_MailReadReq        MsgId_Code = 1112
	MsgId_MailReadAck        MsgId_Code = 1113
	MsgId_MailDeleteReq      MsgId_Code = 1114
	MsgId_MailDeleteAck      MsgId_Code = 1115
	MsgId_SpreadGetReq       MsgId_Code = 1130
	MsgId_SpreadGetAck       MsgId_Code = 1131
	MsgId_SpreadSetReq       MsgId_Code = 1132
	MsgId_SpreadSetAck       MsgId_Code = 1133
	MsgId_SpreadGiftReq      MsgId_Code = 1134
	MsgId_SpreadGiftAck      MsgId_Code = 1135
	// 8192以上是游戏请求
	MsgId_GameMessageHeadSplit MsgId_Code = 8192
)

var MsgId_Code_name = map[int32]string{
	0:    "None",
	1:    "Offline",
	2:    "AllocAgentId",
	100:  "UserMessageHeadSplit",
	101:  "OfflineReq",
	102:  "HandshakeReq",
	103:  "HandshakeAck",
	104:  "VerCheckReq",
	105:  "VerCheckAck",
	107:  "RegistReq",
	108:  "RegistAck",
	109:  "ErrorInfo",
	112:  "FatalInfo",
	113:  "LoginReq",
	115:  "LoginSuccessAck",
	117:  "LoginFailAck",
	119:  "ClientErrorAck",
	120:  "CodeLoginPwdReq",
	121:  "CodeLoginPwdAck",
	200:  "LoggedMessageSplit",
	202:  "HeartBeatReq",
	203:  "HeartBeatAck",
	204:  "GameListReq",
	205:  "GameListAck",
	210:  "CodeUpAccountReq",
	211:  "CodeUpAccountAck",
	212:  "UpdateAccountReq",
	213:  "UpdateAccountAck",
	214:  "CodeSetPwdReq",
	215:  "CodeSetPwdAck",
	216:  "ChangePwdReq",
	217:  "ChangePwdAck",
	220:  "BagGetReq",
	221:  "BagGetAck",
	222:  "BagMoveReq",
	223:  "BagMoveAck",
	240:  "RepayInfoReq",
	241:  "RepayInfoAck",
	242:  "RepaySetAliReq",
	243:  "RepaySetAliAck",
	244:  "RepaySetBankReq",
	245:  "RepaySetBankAck",
	246:  "RepayListOrderReq",
	247:  "RepayListOrderAck",
	248:  "RepayNewOrderReq",
	249:  "RepayNewOrderAck",
	260:  "CustomSendReq",
	261:  "CustomSendAck",
	262:  "CustomRecvReq",
	263:  "CustomRecvAck",
	264:  "CustomCommonReq",
	265:  "CustomCommonAck",
	266:  "CustomNoteReq",
	267:  "CustomNoteAck",
	270:  "RankGetReq",
	271:  "RankGetAck",
	301:  "LoginGameReq",
	302:  "LoginGameAck",
	304:  "SendGameFail",
	305:  "ExitGameReq",
	306:  "ExitGameAck",
	1100: "PayInfoReq",
	1101: "PayInfoAck",
	1102: "PayOrderReq",
	1103: "PayOrderAck",
	1110: "MailListReq",
	1111: "MailListAck",
	1112: "MailReadReq",
	1113: "MailReadAck",
	1114: "MailDeleteReq",
	1115: "MailDeleteAck",
	1130: "SpreadGetReq",
	1131: "SpreadGetAck",
	1132: "SpreadSetReq",
	1133: "SpreadSetAck",
	1134: "SpreadGiftReq",
	1135: "SpreadGiftAck",
	8192: "GameMessageHeadSplit",
}

var MsgId_Code_value = map[string]int32{
	"None":                 0,
	"Offline":              1,
	"AllocAgentId":         2,
	"UserMessageHeadSplit": 100,
	"OfflineReq":           101,
	"HandshakeReq":         102,
	"HandshakeAck":         103,
	"VerCheckReq":          104,
	"VerCheckAck":          105,
	"RegistReq":            107,
	"RegistAck":            108,
	"ErrorInfo":            109,
	"FatalInfo":            112,
	"LoginReq":             113,
	"LoginSuccessAck":      115,
	"LoginFailAck":         117,
	"ClientErrorAck":       119,
	"CodeLoginPwdReq":      120,
	"CodeLoginPwdAck":      121,
	"LoggedMessageSplit":   200,
	"HeartBeatReq":         202,
	"HeartBeatAck":         203,
	"GameListReq":          204,
	"GameListAck":          205,
	"CodeUpAccountReq":     210,
	"CodeUpAccountAck":     211,
	"UpdateAccountReq":     212,
	"UpdateAccountAck":     213,
	"CodeSetPwdReq":        214,
	"CodeSetPwdAck":        215,
	"ChangePwdReq":         216,
	"ChangePwdAck":         217,
	"BagGetReq":            220,
	"BagGetAck":            221,
	"BagMoveReq":           222,
	"BagMoveAck":           223,
	"RepayInfoReq":         240,
	"RepayInfoAck":         241,
	"RepaySetAliReq":       242,
	"RepaySetAliAck":       243,
	"RepaySetBankReq":      244,
	"RepaySetBankAck":      245,
	"RepayListOrderReq":    246,
	"RepayListOrderAck":    247,
	"RepayNewOrderReq":     248,
	"RepayNewOrderAck":     249,
	"CustomSendReq":        260,
	"CustomSendAck":        261,
	"CustomRecvReq":        262,
	"CustomRecvAck":        263,
	"CustomCommonReq":      264,
	"CustomCommonAck":      265,
	"CustomNoteReq":        266,
	"CustomNoteAck":        267,
	"RankGetReq":           270,
	"RankGetAck":           271,
	"LoginGameReq":         301,
	"LoginGameAck":         302,
	"SendGameFail":         304,
	"ExitGameReq":          305,
	"ExitGameAck":          306,
	"PayInfoReq":           1100,
	"PayInfoAck":           1101,
	"PayOrderReq":          1102,
	"PayOrderAck":          1103,
	"MailListReq":          1110,
	"MailListAck":          1111,
	"MailReadReq":          1112,
	"MailReadAck":          1113,
	"MailDeleteReq":        1114,
	"MailDeleteAck":        1115,
	"SpreadGetReq":         1130,
	"SpreadGetAck":         1131,
	"SpreadSetReq":         1132,
	"SpreadSetAck":         1133,
	"SpreadGiftReq":        1134,
	"SpreadGiftAck":        1135,
	"GameMessageHeadSplit": 8192,
}

func (x MsgId_Code) String() string {
	return proto.EnumName(MsgId_Code_name, int32(x))
}

func (MsgId_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_719e06d2e65a68c8, []int{0, 0}
}

type Error_Code int32

const (
	Error_None           Error_Code = 0
	Error_Success        Error_Code = 0
	Error_OK             Error_Code = 0
	Error_LoginRepeat    Error_Code = 1
	Error_LoginFail      Error_Code = 2
	Error_LoginOther     Error_Code = 3
	Error_CreateUserFail Error_Code = 4
	Error_DatabaseFail   Error_Code = 5
)

var Error_Code_name = map[int32]string{
	0: "None",
	// Duplicate value: 0: "Success",
	// Duplicate value: 0: "OK",
	1: "LoginRepeat",
	2: "LoginFail",
	3: "LoginOther",
	4: "CreateUserFail",
	5: "DatabaseFail",
}

var Error_Code_value = map[string]int32{
	"None":           0,
	"Success":        0,
	"OK":             0,
	"LoginRepeat":    1,
	"LoginFail":      2,
	"LoginOther":     3,
	"CreateUserFail": 4,
	"DatabaseFail":   5,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}

func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_719e06d2e65a68c8, []int{1, 0}
}

type MsgId struct {
}

func (m *MsgId) Reset()         { *m = MsgId{} }
func (m *MsgId) String() string { return proto.CompactTextString(m) }
func (*MsgId) ProtoMessage()    {}
func (*MsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_719e06d2e65a68c8, []int{0}
}
func (m *MsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgId.Merge(m, src)
}
func (m *MsgId) XXX_Size() int {
	return m.Size()
}
func (m *MsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgId.DiscardUnknown(m)
}

var xxx_messageInfo_MsgId proto.InternalMessageInfo

type Error struct {
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_719e06d2e65a68c8, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("protocol.MsgId_Code", MsgId_Code_name, MsgId_Code_value)
	proto.RegisterEnum("protocol.Error_Code", Error_Code_name, Error_Code_value)
	proto.RegisterType((*MsgId)(nil), "protocol.MsgId")
	proto.RegisterType((*Error)(nil), "protocol.Error")
}

func init() { proto.RegisterFile("msg_id.proto", fileDescriptor_719e06d2e65a68c8) }

var fileDescriptor_719e06d2e65a68c8 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xc7, 0x2d, 0x91, 0x14, 0x75, 0x9d, 0x26, 0xdb, 0x6d, 0x80, 0xc2, 0x83, 0x1f, 0xf2, 0x01,
	0x78, 0xe1, 0x0b, 0x60, 0xbb, 0x97, 0x64, 0x88, 0xe3, 0x8c, 0x3d, 0xe1, 0x95, 0xd9, 0x4a, 0xc7,
	0xb2, 0xc6, 0xb2, 0x56, 0x95, 0xd6, 0x4d, 0xf3, 0x04, 0x0f, 0x5c, 0x0a, 0xcc, 0x00, 0x5f, 0x04,
	0x06, 0xf8, 0x14, 0x1d, 0x28, 0xd0, 0xe1, 0x52, 0xca, 0xb5, 0x4c, 0xf2, 0xc4, 0xfd, 0x7e, 0x7b,
	0xeb, 0xfc, 0x8f, 0x15, 0x57, 0xb2, 0xfb, 0xe4, 0x39, 0x3f, 0xfd, 0xce, 0xca, 0x7b, 0xf6, 0xec,
	0x91, 0x58, 0x19, 0xe7, 0xe1, 0x33, 0x51, 0xf0, 0x78, 0x9a, 0x19, 0x6b, 0x94, 0xc7, 0x3f, 0xbe,
	0x89, 0x37, 0xbe, 0xaf, 0x8b, 0xe5, 0x4e, 0x1e, 0x6e, 0x05, 0x1b, 0x77, 0xea, 0x62, 0xa9, 0x6d,
	0x02, 0x52, 0x9e, 0x58, 0xda, 0x31, 0x09, 0xc9, 0x9a, 0xaa, 0x8b, 0x07, 0xbb, 0x83, 0x41, 0x1c,
	0x25, 0x24, 0x1d, 0x25, 0xc5, 0x4a, 0x33, 0x8e, 0x8d, 0xdf, 0x0c, 0x29, 0xb1, 0x5b, 0x81, 0x74,
	0xd5, 0x59, 0xb1, 0xbe, 0x97, 0x53, 0xd6, 0xa1, 0x3c, 0xd7, 0x21, 0x6d, 0x92, 0x0e, 0xfa, 0x69,
	0x1c, 0x59, 0x19, 0xa8, 0x55, 0x21, 0x8a, 0xc4, 0x1e, 0x5d, 0x96, 0x84, 0xdc, 0x4d, 0x9d, 0x04,
	0xf9, 0x50, 0x8f, 0x98, 0x0c, 0x2a, 0xa4, 0xe9, 0x8f, 0x64, 0xa8, 0xd6, 0x44, 0xfd, 0x69, 0xca,
	0xda, 0x43, 0xf2, 0x47, 0x50, 0x86, 0x65, 0x00, 0x23, 0x52, 0xa7, 0xc4, 0xc9, 0x1e, 0x85, 0x51,
	0x6e, 0xf1, 0x7c, 0x74, 0x2f, 0xc4, 0xd3, 0x18, 0xe1, 0xf9, 0x2c, 0x33, 0xd9, 0x56, 0x32, 0x30,
	0x72, 0x8c, 0xf0, 0x82, 0xb6, 0x3a, 0xe6, 0x30, 0x55, 0x2b, 0xc2, 0xdb, 0x36, 0x61, 0x94, 0x20,
	0xf5, 0xb2, 0x3a, 0x23, 0xd6, 0x38, 0xea, 0x4f, 0x7c, 0x9f, 0xf2, 0x1c, 0x0b, 0xe4, 0xf8, 0x4b,
	0x0c, 0x2f, 0xe8, 0x28, 0x06, 0x99, 0x28, 0x25, 0x56, 0xdb, 0x71, 0x44, 0x89, 0xe5, 0x85, 0xc1,
	0xf6, 0x91, 0x8a, 0x2a, 0xb1, 0xb9, 0xbb, 0x1f, 0x60, 0xbd, 0xab, 0xf3, 0x10, 0xe6, 0x81, 0x7a,
	0x44, 0xa8, 0x6d, 0x13, 0x86, 0x14, 0x14, 0x05, 0x9a, 0x16, 0xe7, 0xba, 0xa3, 0x4e, 0x8b, 0x95,
	0x4d, 0xd2, 0x99, 0x6d, 0x91, 0xe6, 0xad, 0xbc, 0x57, 0x45, 0xc8, 0x7e, 0x1f, 0xf5, 0xae, 0x5f,
	0xd4, 0x63, 0xda, 0x2e, 0xf6, 0x7b, 0xa3, 0x42, 0xe0, 0x7c, 0xe0, 0xa8, 0x87, 0x84, 0xc4, 0x7b,
	0xf7, 0xd2, 0xa6, 0xef, 0x9b, 0x49, 0xc2, 0xe2, 0xc7, 0x8b, 0x18, 0xf6, 0x27, 0x8c, 0xf7, 0xd2,
	0x40, 0x5b, 0x2a, 0xd9, 0x9f, 0x2e, 0x62, 0xd8, 0x9f, 0x39, 0x4a, 0x89, 0x53, 0x58, 0xa4, 0x4f,
	0xb6, 0xd8, 0xe6, 0xad, 0x39, 0x06, 0xef, 0x73, 0xfe, 0xeb, 0xed, 0xa1, 0x4e, 0x42, 0x2a, 0xb4,
	0xdb, 0x55, 0x04, 0xeb, 0x0b, 0x47, 0xad, 0x8a, 0x93, 0x2d, 0x1d, 0x5e, 0x24, 0x7e, 0xe9, 0xd7,
	0xa5, 0x18, 0xcf, 0xbf, 0x71, 0xd4, 0x9a, 0x10, 0x2d, 0x1d, 0x76, 0xcc, 0x15, 0xee, 0x8f, 0x6f,
	0xcb, 0x00, 0xc6, 0x1d, 0x5e, 0xb4, 0x47, 0xa9, 0x3e, 0xc0, 0x81, 0xc2, 0xf9, 0xad, 0x8a, 0x60,
	0xfd, 0xee, 0xa8, 0x33, 0x62, 0x95, 0x51, 0x9f, 0x6c, 0x33, 0x8e, 0xe0, 0xfd, 0x31, 0x0f, 0x61,
	0xfe, 0xe9, 0xa8, 0x75, 0xb1, 0x76, 0x0c, 0x5b, 0x3a, 0xe1, 0x9e, 0xfb, 0x6b, 0x81, 0xc2, 0xfd,
	0xdb, 0x51, 0x0f, 0x8b, 0xd3, 0x4c, 0x51, 0xfa, 0x6e, 0x16, 0x50, 0x06, 0xfb, 0x9f, 0xfb, 0x70,
	0xf8, 0xff, 0x72, 0x49, 0x99, 0xef, 0xd0, 0xfe, 0x4c, 0xff, 0x6f, 0x11, 0xc3, 0xfe, 0x7f, 0x5a,
	0xd5, 0x49, 0x6e, 0xcd, 0xb8, 0x4f, 0x09, 0x97, 0xf0, 0x79, 0xb7, 0xca, 0xe0, 0xbd, 0x50, 0x62,
	0x3d, 0xf2, 0xaf, 0xc0, 0x7b, 0x71, 0x8e, 0xc1, 0x7b, 0xc9, 0xc5, 0x1e, 0xa6, 0xac, 0x6d, 0xc6,
	0x63, 0xc3, 0x2d, 0x7f, 0x6d, 0x81, 0xc2, 0x7d, 0xb9, 0x94, 0xbf, 0x63, 0x2c, 0x97, 0xfe, 0x95,
	0x39, 0x06, 0xef, 0x55, 0x17, 0xc7, 0xd1, 0xd3, 0xc9, 0xa8, 0x38, 0xc0, 0xd7, 0xca, 0x00, 0xc6,
	0xeb, 0x2e, 0x0e, 0x83, 0xfb, 0x1f, 0x2d, 0x0a, 0xe7, 0xcd, 0x2a, 0x82, 0xf5, 0x16, 0x23, 0xec,
	0x08, 0x04, 0xf7, 0x4c, 0xbe, 0xed, 0xa2, 0xad, 0xcf, 0x5f, 0x8d, 0xec, 0x71, 0xde, 0x3b, 0x15,
	0x82, 0xb4, 0x77, 0xf9, 0x6d, 0xbb, 0xf7, 0x8e, 0xfe, 0x86, 0x57, 0x02, 0x7c, 0x15, 0x3c, 0xe4,
	0xec, 0xea, 0x83, 0x59, 0xb5, 0x3f, 0xac, 0x10, 0x38, 0x1f, 0x31, 0xe9, 0xe8, 0x28, 0x3e, 0xbe,
	0x52, 0xb7, 0x2a, 0x84, 0xdb, 0x79, 0x46, 0x7a, 0xa4, 0xa7, 0xdd, 0x5c, 0x21, 0xdc, 0xcc, 0x1e,
	0x0a, 0x04, 0x72, 0x8e, 0x62, 0x9a, 0x16, 0xed, 0xcb, 0x39, 0x06, 0xef, 0x2b, 0x8f, 0x37, 0x9b,
	0x66, 0xa4, 0x83, 0xa2, 0x6c, 0x3f, 0x54, 0x11, 0xac, 0x1f, 0x4b, 0xa8, 0x3f, 0xb5, 0x7e, 0xaa,
	0x22, 0x58, 0x3f, 0xf3, 0xfa, 0x45, 0x62, 0x34, 0x60, 0xed, 0x97, 0x39, 0x06, 0xef, 0x57, 0x4f,
	0x3d, 0x2a, 0xd6, 0x51, 0xb7, 0x85, 0xa1, 0xfc, 0xdc, 0x93, 0x1b, 0xd7, 0x1c, 0xb1, 0xcc, 0x93,
	0x6c, 0xe3, 0xd9, 0xfb, 0x8d, 0xfa, 0x62, 0x18, 0xca, 0x9a, 0x3a, 0x21, 0xdc, 0xee, 0x53, 0xb2,
	0x86, 0x09, 0x5c, 0x0c, 0xcd, 0x94, 0xb4, 0x95, 0x0e, 0x86, 0xea, 0x6c, 0x44, 0x4a, 0x17, 0x63,
	0x9e, 0xc3, 0xae, 0x1d, 0x52, 0x26, 0x1f, 0xe0, 0x79, 0x99, 0x91, 0xb6, 0x84, 0xcf, 0x02, 0x3b,
	0x4b, 0x98, 0xaa, 0xe7, 0xb4, 0xd5, 0x97, 0x74, 0x3e, 0x3d, 0xf0, 0xe5, 0xc7, 0x5c, 0xe9, 0xb4,
	0xce, 0x5e, 0x3f, 0x6c, 0x38, 0x37, 0x0f, 0x1b, 0xce, 0x77, 0x87, 0x0d, 0xe7, 0x8d, 0xa3, 0x46,
	0xed, 0xe6, 0x51, 0xa3, 0x76, 0xfb, 0xa8, 0x51, 0xbb, 0x74, 0x82, 0x3f, 0x4d, 0x4f, 0xdc, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0xd2, 0xd2, 0x19, 0xb7, 0xb1, 0x06, 0x00, 0x00,
}

func (m *MsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMsgId(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgId(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgId(x uint64) (n int) {
	return sovMsgId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgId
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthMsgId
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgId
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgId(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthMsgId
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgId = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgId   = fmt.Errorf("proto: integer overflow")
)
