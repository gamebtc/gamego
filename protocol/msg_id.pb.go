// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: msg_id.proto

package protocol

/*
import "game.proto";
*/

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgId_Code int32

const (
	MsgId_None                MsgId_Code = 0
	MsgId_Control             MsgId_Code = 1
	MsgId_HandshakeReq        MsgId_Code = 2
	MsgId_HandshakeAck        MsgId_Code = 3
	MsgId_VerCheckReq         MsgId_Code = 4
	MsgId_VerCheckAck         MsgId_Code = 5
	MsgId_RegistReq           MsgId_Code = 7
	MsgId_RegistAck           MsgId_Code = 8
	MsgId_ErrorInfo           MsgId_Code = 9
	MsgId_FatalInfo           MsgId_Code = 12
	MsgId_UserLoginReq        MsgId_Code = 13
	MsgId_UserLoginSuccessAck MsgId_Code = 15
	MsgId_UserLoginFailAck    MsgId_Code = 17
	MsgId_ClientErrorAck      MsgId_Code = 19
	MsgId_CodeLoginPwdReq     MsgId_Code = 20
	MsgId_CodeLoginPwdAck     MsgId_Code = 21
	// 100以上需要登录才能调用的协议
	MsgId_UserMessageHeadSplit MsgId_Code = 100
	MsgId_HeartBeatReq         MsgId_Code = 102
	MsgId_HeartBeatAck         MsgId_Code = 103
	MsgId_GameListReq          MsgId_Code = 104
	MsgId_GameListAck          MsgId_Code = 105
	MsgId_CodeUpAccountReq     MsgId_Code = 110
	MsgId_CodeUpAccountAck     MsgId_Code = 111
	MsgId_UpdateAccountReq     MsgId_Code = 112
	MsgId_UpdateAccountAck     MsgId_Code = 113
	MsgId_CodeSetPwdReq        MsgId_Code = 114
	MsgId_CodeSetPwdAck        MsgId_Code = 115
	MsgId_ChangePwdReq         MsgId_Code = 116
	MsgId_ChangePwdAck         MsgId_Code = 117
	MsgId_BagGetReq            MsgId_Code = 120
	MsgId_BagGetAck            MsgId_Code = 121
	MsgId_BagMoveReq           MsgId_Code = 122
	MsgId_BagMoveAck           MsgId_Code = 123
	MsgId_RepayInfoReq         MsgId_Code = 140
	MsgId_RepayInfoAck         MsgId_Code = 141
	MsgId_RepaySetAliReq       MsgId_Code = 142
	MsgId_RepaySetAliAck       MsgId_Code = 143
	MsgId_RepaySetBankReq      MsgId_Code = 144
	MsgId_RepaySetBankAck      MsgId_Code = 145
	MsgId_RepayListOrderReq    MsgId_Code = 146
	MsgId_RepayListOrderAck    MsgId_Code = 147
	MsgId_RepayNewOrderReq     MsgId_Code = 148
	MsgId_RepayNewOrderAck     MsgId_Code = 149
	MsgId_CustomSendReq        MsgId_Code = 160
	MsgId_CustomSendAck        MsgId_Code = 161
	MsgId_CustomRecvReq        MsgId_Code = 162
	MsgId_CustomRecvAck        MsgId_Code = 163
	MsgId_CustomCommonReq      MsgId_Code = 164
	MsgId_CustomCommonAck      MsgId_Code = 165
	MsgId_CustomNoteReq        MsgId_Code = 166
	MsgId_CustomNoteAck        MsgId_Code = 167
	MsgId_RankGetReq           MsgId_Code = 170
	MsgId_RankGetAck           MsgId_Code = 171
	MsgId_LoginRoomReq         MsgId_Code = 201
	MsgId_LoginRoomAck         MsgId_Code = 202
	MsgId_SendRoomFail         MsgId_Code = 204
	MsgId_PayInfoReq           MsgId_Code = 1100
	MsgId_PayInfoAck           MsgId_Code = 1101
	MsgId_PayOrderReq          MsgId_Code = 1102
	MsgId_PayOrderAck          MsgId_Code = 1103
	MsgId_MailListReq          MsgId_Code = 1110
	MsgId_MailListAck          MsgId_Code = 1111
	MsgId_MailReadReq          MsgId_Code = 1112
	MsgId_MailReadAck          MsgId_Code = 1113
	MsgId_MailDeleteReq        MsgId_Code = 1114
	MsgId_MailDeleteAck        MsgId_Code = 1115
	MsgId_SpreadGetReq         MsgId_Code = 1130
	MsgId_SpreadGetAck         MsgId_Code = 1131
	MsgId_SpreadSetReq         MsgId_Code = 1132
	MsgId_SpreadSetAck         MsgId_Code = 1133
	MsgId_SpreadGiftReq        MsgId_Code = 1134
	MsgId_SpreadGiftAck        MsgId_Code = 1135
	// 8192以上是游戏请求
	MsgId_GameMessageHeadSplit MsgId_Code = 8192
)

var MsgId_Code_name = map[int32]string{
	0:    "None",
	1:    "Control",
	2:    "HandshakeReq",
	3:    "HandshakeAck",
	4:    "VerCheckReq",
	5:    "VerCheckAck",
	7:    "RegistReq",
	8:    "RegistAck",
	9:    "ErrorInfo",
	12:   "FatalInfo",
	13:   "UserLoginReq",
	15:   "UserLoginSuccessAck",
	17:   "UserLoginFailAck",
	19:   "ClientErrorAck",
	20:   "CodeLoginPwdReq",
	21:   "CodeLoginPwdAck",
	100:  "UserMessageHeadSplit",
	102:  "HeartBeatReq",
	103:  "HeartBeatAck",
	104:  "GameListReq",
	105:  "GameListAck",
	110:  "CodeUpAccountReq",
	111:  "CodeUpAccountAck",
	112:  "UpdateAccountReq",
	113:  "UpdateAccountAck",
	114:  "CodeSetPwdReq",
	115:  "CodeSetPwdAck",
	116:  "ChangePwdReq",
	117:  "ChangePwdAck",
	120:  "BagGetReq",
	121:  "BagGetAck",
	122:  "BagMoveReq",
	123:  "BagMoveAck",
	140:  "RepayInfoReq",
	141:  "RepayInfoAck",
	142:  "RepaySetAliReq",
	143:  "RepaySetAliAck",
	144:  "RepaySetBankReq",
	145:  "RepaySetBankAck",
	146:  "RepayListOrderReq",
	147:  "RepayListOrderAck",
	148:  "RepayNewOrderReq",
	149:  "RepayNewOrderAck",
	160:  "CustomSendReq",
	161:  "CustomSendAck",
	162:  "CustomRecvReq",
	163:  "CustomRecvAck",
	164:  "CustomCommonReq",
	165:  "CustomCommonAck",
	166:  "CustomNoteReq",
	167:  "CustomNoteAck",
	170:  "RankGetReq",
	171:  "RankGetAck",
	201:  "LoginRoomReq",
	202:  "LoginRoomAck",
	204:  "SendRoomFail",
	1100: "PayInfoReq",
	1101: "PayInfoAck",
	1102: "PayOrderReq",
	1103: "PayOrderAck",
	1110: "MailListReq",
	1111: "MailListAck",
	1112: "MailReadReq",
	1113: "MailReadAck",
	1114: "MailDeleteReq",
	1115: "MailDeleteAck",
	1130: "SpreadGetReq",
	1131: "SpreadGetAck",
	1132: "SpreadSetReq",
	1133: "SpreadSetAck",
	1134: "SpreadGiftReq",
	1135: "SpreadGiftAck",
	8192: "GameMessageHeadSplit",
}
var MsgId_Code_value = map[string]int32{
	"None":                 0,
	"Control":              1,
	"HandshakeReq":         2,
	"HandshakeAck":         3,
	"VerCheckReq":          4,
	"VerCheckAck":          5,
	"RegistReq":            7,
	"RegistAck":            8,
	"ErrorInfo":            9,
	"FatalInfo":            12,
	"UserLoginReq":         13,
	"UserLoginSuccessAck":  15,
	"UserLoginFailAck":     17,
	"ClientErrorAck":       19,
	"CodeLoginPwdReq":      20,
	"CodeLoginPwdAck":      21,
	"UserMessageHeadSplit": 100,
	"HeartBeatReq":         102,
	"HeartBeatAck":         103,
	"GameListReq":          104,
	"GameListAck":          105,
	"CodeUpAccountReq":     110,
	"CodeUpAccountAck":     111,
	"UpdateAccountReq":     112,
	"UpdateAccountAck":     113,
	"CodeSetPwdReq":        114,
	"CodeSetPwdAck":        115,
	"ChangePwdReq":         116,
	"ChangePwdAck":         117,
	"BagGetReq":            120,
	"BagGetAck":            121,
	"BagMoveReq":           122,
	"BagMoveAck":           123,
	"RepayInfoReq":         140,
	"RepayInfoAck":         141,
	"RepaySetAliReq":       142,
	"RepaySetAliAck":       143,
	"RepaySetBankReq":      144,
	"RepaySetBankAck":      145,
	"RepayListOrderReq":    146,
	"RepayListOrderAck":    147,
	"RepayNewOrderReq":     148,
	"RepayNewOrderAck":     149,
	"CustomSendReq":        160,
	"CustomSendAck":        161,
	"CustomRecvReq":        162,
	"CustomRecvAck":        163,
	"CustomCommonReq":      164,
	"CustomCommonAck":      165,
	"CustomNoteReq":        166,
	"CustomNoteAck":        167,
	"RankGetReq":           170,
	"RankGetAck":           171,
	"LoginRoomReq":         201,
	"LoginRoomAck":         202,
	"SendRoomFail":         204,
	"PayInfoReq":           1100,
	"PayInfoAck":           1101,
	"PayOrderReq":          1102,
	"PayOrderAck":          1103,
	"MailListReq":          1110,
	"MailListAck":          1111,
	"MailReadReq":          1112,
	"MailReadAck":          1113,
	"MailDeleteReq":        1114,
	"MailDeleteAck":        1115,
	"SpreadGetReq":         1130,
	"SpreadGetAck":         1131,
	"SpreadSetReq":         1132,
	"SpreadSetAck":         1133,
	"SpreadGiftReq":        1134,
	"SpreadGiftAck":        1135,
	"GameMessageHeadSplit": 8192,
}

func (x MsgId_Code) String() string {
	return proto.EnumName(MsgId_Code_name, int32(x))
}
func (MsgId_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_aa3af07b224e3fba, []int{0, 0}
}

type Error_Code int32

const (
	Error_None           Error_Code = 0
	Error_Success        Error_Code = 0
	Error_OK             Error_Code = 0
	Error_LoginRepeat    Error_Code = 1
	Error_LoginFail      Error_Code = 2
	Error_LoginOther     Error_Code = 3
	Error_CreateUserFail Error_Code = 4
	Error_DatabaseFail   Error_Code = 5
)

var Error_Code_name = map[int32]string{
	0: "None",
	// Duplicate value: 0: "Success",
	// Duplicate value: 0: "OK",
	1: "LoginRepeat",
	2: "LoginFail",
	3: "LoginOther",
	4: "CreateUserFail",
	5: "DatabaseFail",
}
var Error_Code_value = map[string]int32{
	"None":           0,
	"Success":        0,
	"OK":             0,
	"LoginRepeat":    1,
	"LoginFail":      2,
	"LoginOther":     3,
	"CreateUserFail": 4,
	"DatabaseFail":   5,
}

func (x Error_Code) String() string {
	return proto.EnumName(Error_Code_name, int32(x))
}
func (Error_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_aa3af07b224e3fba, []int{1, 0}
}

type MsgId struct {
}

func (m *MsgId) Reset()         { *m = MsgId{} }
func (m *MsgId) String() string { return proto.CompactTextString(m) }
func (*MsgId) ProtoMessage()    {}
func (*MsgId) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_aa3af07b224e3fba, []int{0}
}
func (m *MsgId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *MsgId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgId.Merge(dst, src)
}
func (m *MsgId) XXX_Size() int {
	return m.Size()
}
func (m *MsgId) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgId.DiscardUnknown(m)
}

var xxx_messageInfo_MsgId proto.InternalMessageInfo

type Error struct {
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_msg_id_aa3af07b224e3fba, []int{1}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(dst, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgId)(nil), "protocol.MsgId")
	proto.RegisterType((*Error)(nil), "protocol.Error")
	proto.RegisterEnum("protocol.MsgId_Code", MsgId_Code_name, MsgId_Code_value)
	proto.RegisterEnum("protocol.Error_Code", Error_Code_name, Error_Code_value)
}
func (m *MsgId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgId) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintMsgId(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MsgId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgId(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMsgId(x uint64) (n int) {
	return sovMsgId(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgId(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMsgId
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgId(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgId
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgId
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMsgId
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMsgId
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMsgId(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMsgId = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgId   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("msg_id.proto", fileDescriptor_msg_id_aa3af07b224e3fba) }

var fileDescriptor_msg_id_aa3af07b224e3fba = []byte{
	// 783 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x95, 0x4b, 0x93, 0xdb, 0x44,
	0x10, 0xc7, 0xad, 0x8d, 0x9d, 0x28, 0x63, 0x7b, 0x3d, 0x1e, 0x3b, 0x10, 0x38, 0xf8, 0xe0, 0x0f,
	0xc0, 0x85, 0x2f, 0xc0, 0xda, 0x21, 0x8f, 0x22, 0xde, 0xdd, 0xb2, 0x2b, 0x5c, 0xa9, 0x89, 0xd4,
	0x2b, 0xab, 0x2c, 0x6b, 0xb4, 0xd2, 0x38, 0x61, 0xe1, 0x00, 0x27, 0x8a, 0x03, 0x8f, 0xf0, 0xba,
	0xf3, 0xa6, 0x0a, 0xbe, 0x08, 0x50, 0x01, 0x72, 0x82, 0x00, 0x17, 0x6a, 0xf7, 0xc6, 0xf3, 0x0b,
	0x70, 0x48, 0xfd, 0xdb, 0x8a, 0x57, 0xb2, 0xf7, 0xe4, 0xea, 0xdf, 0xfc, 0x66, 0xa4, 0xee, 0x51,
	0xb7, 0x45, 0x63, 0x9e, 0x05, 0x2f, 0x85, 0xfe, 0x33, 0x49, 0x6a, 0xac, 0x51, 0x2e, 0xff, 0x78,
	0x26, 0xea, 0xbf, 0x51, 0x17, 0xb5, 0x51, 0x16, 0xdc, 0xf0, 0xfb, 0xff, 0x0b, 0x51, 0x1d, 0x1a,
	0x9f, 0x94, 0x2b, 0xaa, 0xbb, 0x26, 0x26, 0x59, 0x51, 0x75, 0x71, 0x61, 0x68, 0x62, 0x9b, 0x9a,
	0x48, 0x3a, 0x4a, 0x8a, 0xc6, 0x75, 0x1d, 0xfb, 0xd9, 0x54, 0xcf, 0x68, 0x4c, 0x87, 0x72, 0xab,
	0x44, 0x76, 0xbc, 0x99, 0x3c, 0xa7, 0x5a, 0xa2, 0xfe, 0x22, 0xa5, 0xc3, 0x29, 0x79, 0x33, 0x28,
	0xd5, 0x22, 0x80, 0x51, 0x53, 0x4d, 0x71, 0x71, 0x4c, 0x41, 0x98, 0x59, 0xac, 0x5f, 0x38, 0x0d,
	0xb1, 0xea, 0x22, 0x7c, 0x3e, 0x4d, 0x4d, 0x7a, 0x23, 0x3e, 0x30, 0xf2, 0x22, 0xc2, 0xab, 0xda,
	0xea, 0x88, 0xc3, 0x06, 0x9e, 0x77, 0x2b, 0xa3, 0xf4, 0xa6, 0x09, 0xc2, 0x18, 0xdb, 0x9b, 0xea,
	0x49, 0xd1, 0x59, 0x91, 0xc9, 0xc2, 0xf3, 0x28, 0xcb, 0x70, 0x50, 0x4b, 0x75, 0x85, 0x5c, 0x2d,
	0x5c, 0xd5, 0x61, 0x04, 0xda, 0x56, 0x4a, 0x6c, 0x0f, 0xa3, 0x90, 0x62, 0xcb, 0x0f, 0x01, 0xeb,
	0xa8, 0x8e, 0x68, 0x21, 0x6b, 0x36, 0xf7, 0xef, 0xfa, 0x38, 0xb7, 0xbb, 0x0e, 0x61, 0x5e, 0x52,
	0x97, 0x45, 0x17, 0x67, 0x8e, 0x28, 0xcb, 0x74, 0x40, 0xd7, 0x49, 0xfb, 0x93, 0x24, 0x0a, 0xad,
	0xf4, 0xb9, 0x10, 0xa4, 0x53, 0x3b, 0x20, 0xcd, 0x79, 0x1d, 0x94, 0x08, 0x76, 0x07, 0xa8, 0xc4,
	0x35, 0x3d, 0xa7, 0x9b, 0x79, 0xea, 0xd3, 0x22, 0x80, 0x11, 0xe2, 0x9d, 0xf1, 0xd0, 0x5b, 0xc9,
	0x8e, 0xe7, 0x99, 0x45, 0xcc, 0x5a, 0xbc, 0x41, 0xe1, 0x1a, 0xce, 0x2f, 0xf1, 0xb5, 0xa5, 0x82,
	0x9b, 0x6c, 0x50, 0xb8, 0x87, 0xaa, 0x2d, 0x9a, 0x38, 0x61, 0x42, 0x36, 0xcf, 0x2f, 0x2d, 0x23,
	0x58, 0x19, 0xde, 0x78, 0x38, 0xd5, 0x71, 0x40, 0xb9, 0x64, 0x4b, 0x04, 0xce, 0x02, 0xf7, 0x31,
	0xd0, 0xc1, 0x35, 0xe2, 0xc7, 0xbd, 0x7c, 0x1a, 0x62, 0xf5, 0x48, 0x6d, 0x0b, 0x31, 0xd0, 0xc1,
	0xc8, 0xdc, 0xe1, 0xcf, 0xe3, 0x95, 0x42, 0x8c, 0xf5, 0x57, 0x55, 0x5b, 0x34, 0xc6, 0x94, 0xe8,
	0x23, 0xdc, 0x26, 0x8c, 0xb7, 0x9c, 0x12, 0x82, 0xf4, 0xb6, 0xa3, 0x3a, 0x62, 0x9b, 0xd1, 0x84,
	0xec, 0x4e, 0x14, 0xc2, 0x7b, 0x67, 0x1d, 0xc2, 0x7c, 0xd7, 0x51, 0x5d, 0xd1, 0x7a, 0x0c, 0x07,
	0x3a, 0xe6, 0x0f, 0xee, 0xde, 0x06, 0x85, 0xfb, 0x9e, 0xa3, 0x9e, 0x10, 0x6d, 0xa6, 0xa8, 0xf6,
	0x5e, 0xea, 0x53, 0x0a, 0xfb, 0xfd, 0x33, 0x38, 0xfc, 0x0f, 0x1c, 0x75, 0x49, 0x48, 0xe6, 0xbb,
	0x74, 0x77, 0xa5, 0x7f, 0xb8, 0x89, 0x61, 0x7f, 0xe4, 0x28, 0x25, 0x9a, 0xc3, 0x45, 0x66, 0xcd,
	0x7c, 0x42, 0x31, 0x17, 0xef, 0xe3, 0x35, 0x06, 0xef, 0x93, 0x02, 0x1b, 0x93, 0x77, 0x07, 0xde,
	0xa7, 0x6b, 0x0c, 0xde, 0x67, 0x9c, 0xc3, 0x92, 0x0d, 0xcd, 0x7c, 0x6e, 0xf8, 0x5b, 0xff, 0x7c,
	0x83, 0xc2, 0xfd, 0xa2, 0xb0, 0x7f, 0xd7, 0x58, 0x2e, 0xfc, 0x97, 0x6b, 0x0c, 0xde, 0x57, 0x8e,
	0x6a, 0x09, 0x31, 0xd6, 0xf1, 0x2c, 0xbf, 0xbc, 0xaf, 0x8b, 0x00, 0xc6, 0x37, 0x7c, 0x19, 0xcb,
	0xd6, 0x32, 0x78, 0x99, 0x43, 0xf9, 0x5d, 0x19, 0xc1, 0xfa, 0x9e, 0x11, 0x67, 0x69, 0xcc, 0x1c,
	0x8d, 0x25, 0xef, 0xf3, 0x49, 0xfb, 0xa7, 0xd7, 0x7a, 0xdf, 0x2d, 0x00, 0x6c, 0xfa, 0xc1, 0x55,
	0x52, 0xd4, 0xf7, 0xf5, 0xd1, 0xaa, 0x92, 0x3f, 0x96, 0x08, 0x9c, 0x9f, 0x98, 0x8c, 0x74, 0x18,
	0x3d, 0x6e, 0x90, 0x9f, 0x4b, 0x04, 0xce, 0x2f, 0x2b, 0x32, 0x26, 0xcd, 0x65, 0x7e, 0x58, 0x22,
	0x70, 0x7e, 0x75, 0x91, 0x3c, 0xc8, 0x15, 0x8a, 0x68, 0x59, 0x90, 0xdf, 0xd6, 0x18, 0xbc, 0xdf,
	0x5d, 0x4e, 0x24, 0x49, 0x49, 0xfb, 0x79, 0x49, 0xfe, 0x2c, 0x23, 0x58, 0x7f, 0x15, 0xd0, 0x64,
	0x69, 0xfd, 0x5d, 0x46, 0xb0, 0xfe, 0xe1, 0xf3, 0xf3, 0x8d, 0xe1, 0x01, 0x6b, 0xff, 0xae, 0x31,
	0x78, 0xff, 0xb9, 0xea, 0x29, 0xd1, 0x45, 0xcf, 0x6f, 0x8c, 0x90, 0xd7, 0x9f, 0xeb, 0xbf, 0xe9,
	0x88, 0x1a, 0x8f, 0xa5, 0xfe, 0x6b, 0x67, 0xcd, 0xe1, 0x7c, 0xba, 0xc9, 0x8a, 0x3a, 0x2f, 0xb6,
	0xf6, 0x5e, 0x90, 0x15, 0xcc, 0x8f, 0x7c, 0x12, 0x26, 0xa4, 0xad, 0x74, 0xd0, 0x8e, 0xab, 0x79,
	0x27, 0xb7, 0xd0, 0x7e, 0x1c, 0xee, 0xd9, 0x29, 0xa5, 0xf2, 0x1c, 0x0f, 0xbf, 0x94, 0xb4, 0x25,
	0x0c, 0x31, 0x76, 0xaa, 0x68, 0xf1, 0x2b, 0xda, 0xea, 0xdb, 0x3a, 0x23, 0x26, 0xb5, 0xa7, 0xb7,
	0xa4, 0x33, 0xb8, 0xfc, 0xed, 0x71, 0xcf, 0x79, 0x70, 0xdc, 0x73, 0xfe, 0x38, 0xee, 0x39, 0xf7,
	0x4e, 0x7a, 0x95, 0x07, 0x27, 0xbd, 0xca, 0xc3, 0x93, 0x5e, 0xe5, 0xf6, 0x79, 0xfe, 0xdf, 0x78,
	0xf6, 0x51, 0x00, 0x00, 0x00, 0xff, 0xff, 0x08, 0xe9, 0xdb, 0xb4, 0x4e, 0x06, 0x00, 0x00,
}
